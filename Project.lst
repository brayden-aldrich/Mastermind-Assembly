Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/07/23 11:07:31
Mastermind			(AddTwo.asm		     Page 1 - 1


				 TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses


				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range from Irvine's WriteString,
				;               output is stored in given register
				;
				; Use:          _low and _high may be literals, _target may
				;               be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM

 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00
 00000318 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00
 00000364 49 6E 76 61 6C	invalidInput    			BYTE		"Invalid input.", CR, LF, 0
	   69 64 20 69 6E
	   70 75 74 2E 0D
	   0A 00

				; (Gamestate)               Variables defining gameplay

 00000375 00			current_round               BYTE        0

 00000376  00000004 [		solution                    BYTE        CODE_LENGTH DUP(?) ; TODO What's this?
	    00
	   ]
 0000037A  00000004 [		game_matrix                 BYTE        CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 0000039A  00000004 [		user_guess                  BYTE        CODE_LENGTH DUP(? )
	    00
	   ]

				; Hits and Blows            hits and blows will be stored in these variables
 0000039E 00000000		hits                        DWORD       ?
 000003A2 00000000		blows                       DWORD       ?
 000003A6 00000003		uArray                      DWORD       3, 3, 1, 3       ; user guesses
	   00000003
	   00000001
	   00000003
 000003B6 00000003		solArray                    DWORD       3, 3, 3, 3       ; peg positions?
	   00000003
	   00000003
	   00000003
 000003C6 00000000		helperVar1                  DWORD       ?
 000003CA 00000000		matches                     DWORD       ?

				; Hits and Blows temporary helper variables   - feel free to delete after
 000003CE 43 6F 6D 70 61	msgHh1                      BYTE        "Comparing arrays", LF, 0
	   72 69 6E 67 20
	   61 72 72 61 79
	   73 0A 00
 000003E0 55 73 65 72 20	msgHh2                      BYTE        "User array: ", 0
	   61 72 72 61 79
	   3A 20 00
 000003ED 0A 53 6F 6C 75	msgHh3                      BYTE        LF, "Solution array: ", 0
	   74 69 6F 6E 20
	   61 72 72 61 79
	   3A 20 00
 000003FF 0A 68 69 74 73	msgHh4                      BYTE        LF, "hits: ", 0
	   3A 20 00
 00000407 0A 62 6C 6F 77	msgHh5                      BYTE        LF, "blows: ", 0
	   73 3A 20 00
 00000410 20 00			msgSpace                    BYTE        " ", 0

 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			setup:
				;
				; Runs functions that set the environment to expected
				; --------------------------------------------------------
 00000000  9B DB E3		finit
 00000003  E8 00000000 E	call            Randomize

 00000008  6A 08		push            8
 0000000A  E8 000001D5		call            SetColorFromPalette

				; --------------------------------------------------------
 0000000F			gameplay:
				;
				; Runs the gameloop TODO contains test code right now
				; --------------------------------------------------------

 0000000F  E8 000000E3		call            DrawNewGameboard

				mPlacePeg       7, 7, 2
 00000014  52		     2	    push        EDX
 00000015  B2 07	     2	    mov         dl, 7
 00000017  FE CA	     2	    dec         dl
 00000019  B6 07	     2	    mov         dh, 7
 0000001B  FE CE	     2	    dec         dh
 0000001D  E8 00000000 E     2	    call        Gotoxy
 00000022  5A		     2	    pop         EDX
 00000023  6A 02	     1	    push        2
 00000025  E8 000001BA	     1	    call        SetColorFromPalette
 0000002A  52		     2	    push        EDX
 0000002B  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000030  E8 00000000 E     2	    call        WriteString
 00000035  5A		     2	    pop         EDX
				mPlacePeg       7, 9, 5
 00000036  52		     2	    push        EDX
 00000037  B2 07	     2	    mov         dl, 7
 00000039  FE CA	     2	    dec         dl
 0000003B  B6 09	     2	    mov         dh, 9
 0000003D  FE CE	     2	    dec         dh
 0000003F  E8 00000000 E     2	    call        Gotoxy
 00000044  5A		     2	    pop         EDX
 00000045  6A 05	     1	    push        5
 00000047  E8 00000198	     1	    call        SetColorFromPalette
 0000004C  52		     2	    push        EDX
 0000004D  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000052  E8 00000000 E     2	    call        WriteString
 00000057  5A		     2	    pop         EDX
				mPlacePeg       7, 11, 1
 00000058  52		     2	    push        EDX
 00000059  B2 07	     2	    mov         dl, 7
 0000005B  FE CA	     2	    dec         dl
 0000005D  B6 0B	     2	    mov         dh, 11
 0000005F  FE CE	     2	    dec         dh
 00000061  E8 00000000 E     2	    call        Gotoxy
 00000066  5A		     2	    pop         EDX
 00000067  6A 01	     1	    push        1
 00000069  E8 00000176	     1	    call        SetColorFromPalette
 0000006E  52		     2	    push        EDX
 0000006F  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000074  E8 00000000 E     2	    call        WriteString
 00000079  5A		     2	    pop         EDX
				mPlacePeg       7, 13, 4
 0000007A  52		     2	    push        EDX
 0000007B  B2 07	     2	    mov         dl, 7
 0000007D  FE CA	     2	    dec         dl
 0000007F  B6 0D	     2	    mov         dh, 13
 00000081  FE CE	     2	    dec         dh
 00000083  E8 00000000 E     2	    call        Gotoxy
 00000088  5A		     2	    pop         EDX
 00000089  6A 04	     1	    push        4
 0000008B  E8 00000154	     1	    call        SetColorFromPalette
 00000090  52		     2	    push        EDX
 00000091  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000096  E8 00000000 E     2	    call        WriteString
 0000009B  5A		     2	    pop         EDX

				mPlaceFeedback  7, 4, HIT
 0000009C  6A 07	     1	    push        7
 0000009E  6A 04	     1	    push        4
 000000A0  6A 02	     1	    push        HIT
 000000A2  E8 00000195	     1	    call        PlaceFeedback
				mPlaceFeedback  8, 4, BLOW
 000000A7  6A 08	     1	    push        8
 000000A9  6A 04	     1	    push        4
 000000AB  6A 01	     1	    push        BLOW
 000000AD  E8 0000018A	     1	    call        PlaceFeedback
				mPlaceFeedback  7, 5, BLOW
 000000B2  6A 07	     1	    push        7
 000000B4  6A 05	     1	    push        5
 000000B6  6A 01	     1	    push        BLOW
 000000B8  E8 0000017F	     1	    call        PlaceFeedback

 000000BD  E8 00000286		call            PrintSolution

 000000C2  6A 00		push            FALSE
 000000C4  6A 01		push            TYPE solution
 000000C6  68 00000376 R	push            OFFSET solution
 000000CB  E8 000000AE		call            GenerateCode

				;push            OFFSET userArray   TODO this is the latest I think, needs to use a different array - Trenton Young
 000000D0  E8 00000149		call            ListenUser
 000000D5  E8 000001D9		call            CheckSimilar

				; End of program steps
				mGotoXY         1, 20
 000000DA  52		     1	    push        EDX
 000000DB  B2 01	     1	    mov         dl, 1
 000000DD  FE CA	     1	    dec         dl
 000000DF  B6 14	     1	    mov         dh, 20
 000000E1  FE CE	     1	    dec         dh
 000000E3  E8 00000000 E     1	    call        Gotoxy
 000000E8  5A		     1	    pop         EDX

 000000E9  6A 08		push            8
 000000EB  E8 000000F4		call            SetColorFromPalette

				;; comparing uArray and solArray elements - updates hits and blows TODO I think this is old, I restored it from old file - Trenton Young
				;push            OFFSET blows
				;push            OFFSET hits
				;call            CheckSimilar

				invoke EXITProcess, 0		; exit to operating system
 000000F0  6A 00	   *	    push   +000000000h
 000000F2  E8 00000000 E   *	    call   ExitProcess
 000000F7			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 000000F7			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 000000F7  51			push        ECX

 000000F8  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 000000FD  52		     1	    push        EDX
 000000FE  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 00000103  E8 00000000 E     1	    call        WriteString
 00000108  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 00000109  52		     1	    push        EDX
 0000010A  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 0000010F  E8 00000000 E     1	    call        WriteString
 00000114  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 00000115  52		     1	    push        EDX
 00000116  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 0000011B  E8 00000000 E     1	    call        WriteString
 00000120  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000121  52		     1	    push        EDX
 00000122  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000127  E8 00000000 E     1	    call        WriteString
 0000012C  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 0000012D  52		     1	    push        EDX
 0000012E  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000133  E8 00000000 E     1	    call        WriteString
 00000138  5A		     1	    pop         EDX

 00000139  B9 00000004		mov         ECX, ROWS
 0000013E			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 0000013E  52		     1	    push        EDX
 0000013F  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000144  E8 00000000 E     1	    call        WriteString
 00000149  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 0000014A  52		     1	    push        EDX
 0000014B  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 00000150  E8 00000000 E     1	    call        WriteString
 00000155  5A		     1	    pop         EDX

 00000156  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 00000158  52		     1	    push        EDX
 00000159  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 0000015E  E8 00000000 E     1	    call        WriteString
 00000163  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 00000164  52		     1	    push        EDX
 00000165  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 0000016A  E8 00000000 E     1	    call        WriteString
 0000016F  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 00000170  52		     1	    push        EDX
 00000171  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 00000176  E8 00000000 E     1	    call        WriteString
 0000017B  5A		     1	    pop         EDX

 0000017C  59			pop         ECX

 0000017D  C3			ret
 0000017E			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 0000017E			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code
				; -------------------------------------------------------- -
 0000017E  55			push        EBP
 0000017F  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000181  50			push        EAX
 00000182  53			push        EBX
 00000183  51			push        ECX
 00000184  52			push        EDX

 00000185			_stackFrame:
 00000185  B9 00000004		    mov     ECX, CODE_LENGTH
 0000018A  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 0000018D  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 00000190  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 00000193			_generateCode:
 00000193  51			    push    ECX                     ; Preserve loop counter

				    mArand  1, COLORS, ECX          ; Get a random number and store to EDX
 00000194  50		     1	    push        EAX
 00000195  B8 00000008	     1	    mov         EAX, COLORS
 0000019A  83 E8 01	     1	    sub         EAX, 1
 0000019D  40		     1	    inc         EAX
 0000019E  E8 00000000 E     1	    call        RandomRange
 000001A3  83 C0 01	     1	    add         EAX, 1
 000001A6  8B C8	     1	    mov         ECX, EAX
 000001A8  58		     1	    pop         EAX

 000001A9  83 FA 01		    cmp     EDX, TRUE
 000001AC  74 0B		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 000001AE  8B D1		    mov     EDX, ECX                ; EDX is now random number
 000001B0  59			    pop     ECX                     ; ECX is loop counter again

				    ; TODO check code, can probably somehow use the code checking proc that needs to be written for gameplay

 000001B1  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 000001B2  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 000001B4  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 000001B9			    _allowDuplicates:
 000001B9  89 08		    mov     [EAX], ECX              ; Store in next index

 000001BB  59			    pop     ECX                     ; restore loop counter

 000001BC  03 C3		    add     EAX, EBX                ; Increment index

 000001BE  E2 D3		    loop    _generateCode

 000001C0  5A			pop         EDX
 000001C1  59			pop         ECX
 000001C2  5B			pop         EBX
 000001C3  58			pop         EAX
 000001C4  5D			pop         EBP

 000001C5  C2 000C		ret         12
 000001C8			GenerateCode ENDP


				; -------------------------------------------------------- -
 000001C8			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000001C8  55			push                EBP
 000001C9  8B EC		mov                 EBP, ESP

 000001CB  53			push                EBX
 000001CC  51			push                ECX
 000001CD  52			push                EDX

 000001CE			_stackFrame:
 000001CE  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000001D1  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000001D4  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000001D7  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000001D9  03 D8		add                 EBX, EAX                ; Get to array[n]
 000001DB  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000001DD  5A			pop                 EDX
 000001DE  59			pop                 ECX
 000001DF  5B			pop                 EBX

 000001E0  5D			pop                 EBP

 000001E1  C2 000C		ret 12
 000001E4			ArrayAt ENDP

				; -------------------------------------------------------- -
 000001E4			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000001E4  55			push                EBP
 000001E5  8B EC		mov                 EBP, ESP

 000001E7  50			push                EAX
 000001E8  53			push                EBX
 000001E9  51			push                ECX

 000001EA			_stackFrame:
 000001EA  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000001ED  51			push                ECX
 000001EE  68 000002A7 R	push                OFFSET MAP_background_color
 000001F3  6A 04		push                TYPE MAP_background_color
 000001F5  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 000001FA  BB 00000010		mov                 EBX, 16
 000001FF  F7 E3		mul                 EBX

				; Preserve background in EBX
 00000201  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 00000203  51			push                ECX
 00000204  68 000002D3 R	push                OFFSET MAP_text_color
 00000209  6A 04		push                TYPE MAP_text_color
 0000020B  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 00000210  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000212  E8 00000000 E	call                SetTextColor

 00000217  59			pop                 ECX
 00000218  5B			pop                 EBX
 00000219  58			pop                 EAX

 0000021A  5D			pop                 EBP

 0000021B  C2 0004		ret 4
 0000021E			SetColorFromPalette ENDP

				; -------------------------------------------------------- -
 0000021E			ListenUser PROC
				; Author:           Hla Htun
				; Description:      Takes in 4 user input and stores it in the array
				;
				; Parameters:
				;                   push OFFSET userArray
				;                   push TYPE userArray
				;                   call
				; Preconditions:    An array as a parameter to store the 4 user inputs
				; Postconditions:   None. The array passed will be updated with the user input
				; -------------------------------------------------------- -
				    ; call readDec
				    ; store to array

				    ; loop until 4
 0000021E  55			    push EBP
 0000021F  8B EC		    mov EBP, ESP
 00000221  60			    pushad


 00000222  8B 7D 08		    mov EDI, [EBP+8]
 00000225  B9 00000004		    mov ECX, 4
 0000022A			    askUser:
 0000022A  E8 00000000 E	        call ReadInt
 0000022F  89 07		        mov [EDI], EAX
 00000231  83 F9 00		        cmp ECX, 0
				;        JE outOfAskUser    TODO there is no such label in this version - Trenton Young
 00000234  83 E9 01		        sub ECX, 1
 00000237  EB F1		        JMP askUser

 00000239  61			    popad
 0000023A  5D			    pop EBP
 0000023B  C3			    ret
 0000023C			ListenUser ENDP

				; --------------------------------------------------------
 0000023C			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 0000023C  55			push            EBP
 0000023D  8B EC		mov             EBP, ESP

 0000023F  50			push            EAX
 00000240  53			push            EBX
 00000241  51			push            ECX
 00000242  52			push            EDX

 00000243			_stackFrame:
 00000243  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 00000246  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 00000249  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 0000024C			_moveCursor:
 0000024C  50			    push        EAX

 0000024D  8B C3		    mov         EAX, EBX                ; insert y
 0000024F  48			    dec         EAX                     ; shift back for 1-indexing
 00000250  BB 00000100		    mov         EBX, 256
 00000255  F7 E3		    mul         EBX                     ; shift y to subregister AH

 00000257  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 00000259  48			    dec         EAX                     ; shift back for 1-indexing

 0000025A  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 0000025C  E8 00000000 E	    call        GotoXY
 00000261  58			    pop         EAX

 00000262  83 F8 02		cmp             EAX, HIT
 00000265  74 2F		je              _hit

 00000267  83 F8 01		cmp             EAX, BLOW
 0000026A  74 15		je              _blow

 0000026C			_miss:
 0000026C  6A 08		    push        8
 0000026E  E8 FFFFFF71		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 00000273  52		     1	    push        EDX
 00000274  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 00000279  E8 00000000 E     1	    call        WriteString
 0000027E  5A		     1	    pop         EDX
 0000027F  EB 2A		    jmp         _done
 00000281			_blow:
 00000281  6A 09		    push        9
 00000283  E8 FFFFFF5C		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 00000288  52		     1	    push        EDX
 00000289  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 0000028E  E8 00000000 E     1	    call        WriteString
 00000293  5A		     1	    pop         EDX
 00000294  EB 15		    jmp         _done
 00000296			_hit:
 00000296  6A 0A		    push        10
 00000298  E8 FFFFFF47		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 0000029D  52		     1	    push        EDX
 0000029E  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 000002A3  E8 00000000 E     1	    call        WriteString
 000002A8  5A		     1	    pop         EDX
 000002A9  EB 00		    jmp         _done

 000002AB			_done:

 000002AB  5A			pop             EDX
 000002AC  59			pop             ECX
 000002AD  5B			pop             EBX
 000002AE  58			pop             EAX

 000002AF  5D			pop             EBP

 000002B0  C2 000C		ret 12
 000002B3			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 000002B3			CheckSimilar PROC
				; Author:           Hla Htun
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have uArray and solArray as global variables
				;                   Both of the arrays must have a size of 4
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 000002B3  55			    push    EBP
 000002B4  8B EC		    mov     EBP, ESP

 000002B6  B9 00000000		    mov     ECX, 0
 000002BB			    PrintuArray:
 000002BB  51			        push    ECX
 000002BC  68 000003A6 R	        push    OFFSET uArray
 000002C1  6A 04		        push    TYPE uArray
 000002C3  E8 FFFFFF00		        call    ArrayAt
 000002C8  A3 000003C6 R	        mov     helperVar1, EAX

 000002CD  51			        push    ECX
 000002CE  68 000003B6 R	        push    OFFSET solArray
 000002D3  6A 04		        push    TYPE solArray
 000002D5  E8 FFFFFEEE		        call    ArrayAt
 000002DA  8B 1D 000003C6 R	        mov     EBX, helperVar1
 000002E0  3B D8		        cmp     EBX, EAX
 000002E2  74 02		        JE      isAHit
 000002E4  EB 07		        JMP     notAHit
 000002E6			        isAHit:
 000002E6  83 05 0000039E R	            add hits, 1
	   01

 000002ED			        notAHit:
				            ; ECX => i
				            ; EBX => j
 000002ED  A3 000003C6 R	            mov     helperVar1, EAX
 000002F2  8B 1D 0000039E R	            mov     EBX, hits
 000002F8			            loop2ndArray:
 000002F8  53			                push    EBX
 000002F9  68 000003A6 R	                push    OFFSET uArray
 000002FE  6A 04		                push    TYPE uArray
 00000300  E8 FFFFFEC3		                call    ArrayAt
 00000305  3B 05 000003C6 R	                cmp     EAX, helperVar1
 0000030B  74 0A		                JE      isAMatch
 0000030D  83 FB 03		                cmp     EBX, 3
 00000310  74 0E		                JE      outOfisThisInArray
 00000312  83 C3 01		                add     EBX, 1
 00000315  EB E1		                JMP     loop2ndArray

 00000317			            isAMatch:
 00000317  83 05 000003CA R	                add     matches, 1
	   01
 0000031E  EB 00		                JMP     outOfisThisInArray


 00000320			        outOfisThisInArray:
 00000320  83 F9 03		            cmp     ECX, 3
 00000323  74 05		            JE      outOfPrintuArray
 00000325  83 C1 01		            add     ECX, 1
 00000328  EB 91		            JMP     PrintuArray

 0000032A			outOfPrintuArray:
 0000032A  8B 5D 08		    mov     EBX, [EBP + 8]
 0000032D  A1 0000039E R	    mov     EAX, hits
 00000332  89 03		    mov     [EBX], EAX      ; saving to hits variable

 00000334  A1 000003CA R	    mov     EAX, matches
 00000339  2B 05 0000039E R	    sub     EAX, hits
 0000033F  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000342  89 03		    mov     [EBX], EAX      ; saving to blows variable

 00000344  5D			    pop     EBP
 00000345  C2 0008		    ret     8
 00000348			CheckSimilar ENDP


				; -------------------------------------------------------- -
 00000348			PrintSolution PROC
				; Author:           Cameron Kroeker
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -

 00000348  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 0000034D  0F B6 87		movzx EAX, solution[EDI]
	   00000376 R
				mPlacePeg       75, 7, EAX
 00000354  52		     2	    push        EDX
 00000355  B2 4B	     2	    mov         dl, 75
 00000357  FE CA	     2	    dec         dl
 00000359  B6 07	     2	    mov         dh, 7
 0000035B  FE CE	     2	    dec         dh
 0000035D  E8 00000000 E     2	    call        Gotoxy
 00000362  5A		     2	    pop         EDX
 00000363  50		     1	    push        EAX
 00000364  E8 FFFFFE7B	     1	    call        SetColorFromPalette
 00000369  52		     2	    push        EDX
 0000036A  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000036F  E8 00000000 E     2	    call        WriteString
 00000374  5A		     2	    pop         EDX

 00000375  0F B6 87		movzx EAX, solution[EDI+1]
	   00000377 R
				mPlacePeg       75, 9, EAX
 0000037C  52		     2	    push        EDX
 0000037D  B2 4B	     2	    mov         dl, 75
 0000037F  FE CA	     2	    dec         dl
 00000381  B6 09	     2	    mov         dh, 9
 00000383  FE CE	     2	    dec         dh
 00000385  E8 00000000 E     2	    call        Gotoxy
 0000038A  5A		     2	    pop         EDX
 0000038B  50		     1	    push        EAX
 0000038C  E8 FFFFFE53	     1	    call        SetColorFromPalette
 00000391  52		     2	    push        EDX
 00000392  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000397  E8 00000000 E     2	    call        WriteString
 0000039C  5A		     2	    pop         EDX

 0000039D  0F B6 87		movzx EAX, solution[EDI+2]
	   00000378 R
				mPlacePeg       75, 11, EAX
 000003A4  52		     2	    push        EDX
 000003A5  B2 4B	     2	    mov         dl, 75
 000003A7  FE CA	     2	    dec         dl
 000003A9  B6 0B	     2	    mov         dh, 11
 000003AB  FE CE	     2	    dec         dh
 000003AD  E8 00000000 E     2	    call        Gotoxy
 000003B2  5A		     2	    pop         EDX
 000003B3  50		     1	    push        EAX
 000003B4  E8 FFFFFE2B	     1	    call        SetColorFromPalette
 000003B9  52		     2	    push        EDX
 000003BA  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003BF  E8 00000000 E     2	    call        WriteString
 000003C4  5A		     2	    pop         EDX

 000003C5  0F B6 87		movzx EAX, solution[EDI+3]
	   00000379 R
				mPlacePeg       75, 13, EAX
 000003CC  52		     2	    push        EDX
 000003CD  B2 4B	     2	    mov         dl, 75
 000003CF  FE CA	     2	    dec         dl
 000003D1  B6 0D	     2	    mov         dh, 13
 000003D3  FE CE	     2	    dec         dh
 000003D5  E8 00000000 E     2	    call        Gotoxy
 000003DA  5A		     2	    pop         EDX
 000003DB  50		     1	    push        EAX
 000003DC  E8 FFFFFE03	     1	    call        SetColorFromPalette
 000003E1  52		     2	    push        EDX
 000003E2  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003E7  E8 00000000 E     2	    call        WriteString
 000003EC  5A		     2	    pop         EDX


				;Set color back to White
 000003ED  6A 08		push            8
 000003EF  E8 FFFFFDF0		call            SetColorFromPalette


 000003F4  B8 00000000		mov EAX, 0
 000003F9  C3			ret
 000003FA			PrintSolution ENDP


				; -------------------------------------------------------- -
 000003FA			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user input and updates user_guess array
				;
				;
				; Parameters:       push OFFSET user_guess
				;                   push TYPE   user_guess
				;
				;
				;
				; Postconditions:
				; -------------------------------------------------------- -
 000003FA  55			push            EBP
 000003FB  8B EC		mov             EBP, ESP

 000003FD  52			push            EDX
 000003FE  51			push            ECX
 000003FF  53			push            EBX
 00000400  50			push            EAX
 00000401  57			push            EDI
 00000402  56			push            ESI

 00000403			_init_variables:
 00000403  8B 7D 0C		    mov         EDI, [EBP + 12]         ; offset
 00000406  8B 75 08		    mov         ESI, [EBP + 8]          ; type
 00000409  B9 00000000		    mov         ECX, 0
 0000040E			_string:
 0000040E  BA 00000318 R	    mov         EDX, OFFSET selectColor
 00000413  E8 00000000 E	    call        WriteString

 00000418  50			push            EAX
				;  loop until user inputs a code
 00000419			_loop:
 00000419  B8 00000032		    mov             EAX, 50
 0000041E  E8 00000000 E	    call            Delay
 00000423  E8 00000000 E	    call            ReadKey
 00000428  74 EF		    jz              _loop

 0000042A  58			pop             EAX
 0000042B  51			push            ECX                     ; save ECX
 0000042C  0F B7 CA		movzx           ECX, DX

 0000042F  83 F9 25		cmp             ECX, 37                 ; left
 00000432  74 37		je              _decrease
 00000434  83 F9 28		cmp             ECX, 40                 ; down
 00000437  74 32		je              _decrease

 00000439  83 F9 26		cmp             ECX, 38                 ; up
 0000043C  74 0D		je              _increase
 0000043E  83 F9 27		cmp             ECX, 39                 ; right
 00000441  74 08		je              _increase

 00000443  83 F9 0D		cmp             ECX, 13                 ; enter
 00000446  74 2C		je              _enter
 00000448  EB 2C		jmp             _invalid
 0000044A  59			pop             ECX
 0000044B			_increase:
 0000044B  83 C1 01		add             ECX, 1
 0000044E  83 F9 07		cmp             ECX, 7
 00000451  7D 02		jge             _resetHigh
 00000453  EB 05		jmp             _getColor

 00000455			    _resetHigh:
 00000455  B9 00000000		    mov             ECX, 0
 0000045A			    _getColor:
 0000045A  8B C1		    mov             EAX, ECX
 0000045C  50			    push            EAX
 0000045D  68 000002A7 R	    push            OFFSET  MAP_background_color
 00000462  6A 04		    push            TYPE    MAP_background_color
 00000464  E8 FFFFFD5F		    call            ArrayAt

 00000469			    _currentColor:
				    ; somehow update the console to display the selection?

 00000469  EB AE		jmp             _loop
 0000046B			_decrease:
				;cmp             [EAX], 0       ; TODO fix build error with this line - Trenton Young
 0000046B  83 F8 00		cmp             EAX, 0
 0000046E  7E E5		jle             _resetHigh

 00000470  2B C3		sub             EAX, EBX


 00000472  EB A5		jmp             _loop
 00000474			_enter:

				; increase x pos in console and inc user_guess array
 00000474  EB A3		jmp             _loop
 00000476			_invalid:
 00000476  BA 00000364 R	    mov             EDX, OFFSET invalidInput
 0000047B  E8 00000000 E	    call            WriteString
 00000480  EB 8C		    jmp             _string



 00000482			_end:

 00000482  C3			ret
 00000483			GetUserCode ENDP


				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/07/23 11:07:31
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000412 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000483 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001CE _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 000002B3 _TEXT	Length= 00000095 Public STDCALL
  PrintuArray  . . . . . . . . .	L Near	 000002BB _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 000002E6 _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 000002ED _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 000002F8 _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 00000317 _TEXT	
  outOfisThisInArray . . . . . .	L Near	 00000320 _TEXT	
  outOfPrintuArray . . . . . . .	L Near	 0000032A _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 000000F7 _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 0000013E _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 0000017E _TEXT	Length= 0000004A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000185 _TEXT	
  _generateCode  . . . . . . . .	L Near	 00000193 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 000001B9 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 000003FA _TEXT	Length= 00000089 Public STDCALL
  _init_variables  . . . . . . .	L Near	 00000403 _TEXT	
  _string  . . . . . . . . . . .	L Near	 0000040E _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000419 _TEXT	
  _increase  . . . . . . . . . .	L Near	 0000044B _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 00000455 _TEXT	
  _getColor  . . . . . . . . . .	L Near	 0000045A _TEXT	
  _currentColor  . . . . . . . .	L Near	 00000469 _TEXT	
  _decrease  . . . . . . . . . .	L Near	 0000046B _TEXT	
  _enter . . . . . . . . . . . .	L Near	 00000474 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000476 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000482 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ListenUser . . . . . . . . . . .	P Near	 0000021E _TEXT	Length= 0000001E Public STDCALL
  askUser  . . . . . . . . . . .	L Near	 0000022A _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 0000023C _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000243 _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 0000024C _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 0000026C _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 00000281 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 00000296 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 000002AB _TEXT	
PrintSolution  . . . . . . . . .	P Near	 00000348 _TEXT	Length= 000000B2 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000001E4 _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001EA _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F7 Public STDCALL
  setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameplay . . . . . . . . . . .	L Near	 0000000F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 000003A2 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
current_round  . . . . . . . . .	Byte	 00000375 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	Byte	 0000037A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000002FF _DATA	
helperVar1 . . . . . . . . . . .	DWord	 000003C6 _DATA	
hits . . . . . . . . . . . . . .	DWord	 0000039E _DATA	
invalidInput . . . . . . . . . .	Byte	 00000364 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 000003CA _DATA	
msgHh1 . . . . . . . . . . . . .	Byte	 000003CE _DATA	
msgHh2 . . . . . . . . . . . . .	Byte	 000003E0 _DATA	
msgHh3 . . . . . . . . . . . . .	Byte	 000003ED _DATA	
msgHh4 . . . . . . . . . . . . .	Byte	 000003FF _DATA	
msgHh5 . . . . . . . . . . . . .	Byte	 00000407 _DATA	
msgSpace . . . . . . . . . . . .	Byte	 00000410 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectColor  . . . . . . . . . .	Byte	 00000318 _DATA	
solArray . . . . . . . . . . . .	DWord	 000003B6 _DATA	
solution . . . . . . . . . . . .	Byte	 00000376 _DATA	
uArray . . . . . . . . . . . . .	DWord	 000003A6 _DATA	
user_guess . . . . . . . . . . .	Byte	 0000039A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
