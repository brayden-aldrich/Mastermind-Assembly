Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/06/23 16:40:38
Mastermind			(AddTwo.asm		     Page 1 - 1


				TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses


				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range from Irvine's WriteString,
				;               output is stored in given register
				;
				; Use:          _low and _high may be literals, _target may
				;               be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX 

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A 00
 00000044 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   0D 0A 00
 00000088 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 23 20
	   20 20 20 20 20
	   20 20 20 20 23
	   0D 0A 00
 000000CC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 23 20
	   20 20 20 20 20
	   20 20 20 20 23
	   0D 0A 00
 00000110 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 23 20
	   20 20 20 20 20
	   20 20 20 20 23
	   0D 0A 00
 00000154 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 23 20
	   20 20 5B 58 58
	   5D 20 20 20 23
	   0D 0A 00
 00000198 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 23 20
	   20 20 20 20 20
	   20 20 20 20 23
	   0D 0A 00
 000001DC 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   00

 0000021E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 00000221 6F 00			GUI_feedback_hit            BYTE        "o", 0
 00000223 2A 00			GUI_feedback_blow           BYTE        "*", 0
 00000225 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 00000227 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 00000253 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 0000027F 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00

				; (Gamestate)               Variables defining gameplay

 00000298 00			current_round               BYTE        0

 00000299  00000004 [		solution                    BYTE        CODE_LENGTH DUP(?)
	    00
	   ]
 0000029D  00000004 [		game_matrix                 BYTE        CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00
	    ]
	   ]


 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			setup:
				;
				; Runs functions that set the environment to expected
				; --------------------------------------------------------
 00000000  9B DB E3		finit
 00000003  E8 00000000 E	call            Randomize

 00000008  6A 08		push            8
 0000000A  E8 000001C6		call            SetColorFromPalette

				; --------------------------------------------------------
 0000000F			gameplay:
				;
				; Runs the gameloop TODO contains test code right now
				; --------------------------------------------------------

 0000000F  E8 000000D4		call            DrawNewGameboard

				mPlacePeg       7, 7, 2
 00000014  52		     2	    push        EDX 
 00000015  B2 07	     2	    mov         dl, 7
 00000017  FE CA	     2	    dec         dl
 00000019  B6 07	     2	    mov         dh, 7
 0000001B  FE CE	     2	    dec         dh
 0000001D  E8 00000000 E     2	    call        Gotoxy
 00000022  5A		     2	    pop         EDX
 00000023  6A 02	     1	    push        2
 00000025  E8 000001AB	     1	    call        SetColorFromPalette
 0000002A  52		     2	    push        EDX
 0000002B  BA 0000021E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000030  E8 00000000 E     2	    call        WriteString
 00000035  5A		     2	    pop         EDX
				mPlacePeg       7, 9, 5
 00000036  52		     2	    push        EDX 
 00000037  B2 07	     2	    mov         dl, 7
 00000039  FE CA	     2	    dec         dl
 0000003B  B6 09	     2	    mov         dh, 9
 0000003D  FE CE	     2	    dec         dh
 0000003F  E8 00000000 E     2	    call        Gotoxy
 00000044  5A		     2	    pop         EDX
 00000045  6A 05	     1	    push        5
 00000047  E8 00000189	     1	    call        SetColorFromPalette
 0000004C  52		     2	    push        EDX
 0000004D  BA 0000021E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000052  E8 00000000 E     2	    call        WriteString
 00000057  5A		     2	    pop         EDX
				mPlacePeg       7, 11, 1
 00000058  52		     2	    push        EDX 
 00000059  B2 07	     2	    mov         dl, 7
 0000005B  FE CA	     2	    dec         dl
 0000005D  B6 0B	     2	    mov         dh, 11
 0000005F  FE CE	     2	    dec         dh
 00000061  E8 00000000 E     2	    call        Gotoxy
 00000066  5A		     2	    pop         EDX
 00000067  6A 01	     1	    push        1
 00000069  E8 00000167	     1	    call        SetColorFromPalette
 0000006E  52		     2	    push        EDX
 0000006F  BA 0000021E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000074  E8 00000000 E     2	    call        WriteString
 00000079  5A		     2	    pop         EDX
				mPlacePeg       7, 13, 4
 0000007A  52		     2	    push        EDX 
 0000007B  B2 07	     2	    mov         dl, 7
 0000007D  FE CA	     2	    dec         dl
 0000007F  B6 0D	     2	    mov         dh, 13
 00000081  FE CE	     2	    dec         dh
 00000083  E8 00000000 E     2	    call        Gotoxy
 00000088  5A		     2	    pop         EDX
 00000089  6A 04	     1	    push        4
 0000008B  E8 00000145	     1	    call        SetColorFromPalette
 00000090  52		     2	    push        EDX
 00000091  BA 0000021E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000096  E8 00000000 E     2	    call        WriteString
 0000009B  5A		     2	    pop         EDX

				mPlaceFeedback  7, 4, HIT
 0000009C  6A 07	     1	    push        7
 0000009E  6A 04	     1	    push        4
 000000A0  6A 02	     1	    push        HIT
 000000A2  E8 00000168	     1	    call        PlaceFeedback
				mPlaceFeedback  8, 4, BLOW
 000000A7  6A 08	     1	    push        8
 000000A9  6A 04	     1	    push        4
 000000AB  6A 01	     1	    push        BLOW
 000000AD  E8 0000015D	     1	    call        PlaceFeedback
				mPlaceFeedback  7, 5, BLOW
 000000B2  6A 07	     1	    push        7
 000000B4  6A 05	     1	    push        5
 000000B6  6A 01	     1	    push        BLOW
 000000B8  E8 00000152	     1	    call        PlaceFeedback


 000000BD  6A 00		push            FALSE
 000000BF  6A 01		push            TYPE solution
 000000C1  68 00000299 R	push            OFFSET solution
 000000C6  E8 000000A4		call            GenerateCode


				; End of program steps
				mGotoXY         1, 20
 000000CB  52		     1	    push        EDX 
 000000CC  B2 01	     1	    mov         dl, 1
 000000CE  FE CA	     1	    dec         dl
 000000D0  B6 14	     1	    mov         dh, 20
 000000D2  FE CE	     1	    dec         dh
 000000D4  E8 00000000 E     1	    call        Gotoxy
 000000D9  5A		     1	    pop         EDX

 000000DA  6A 08		push            8
 000000DC  E8 000000F4		call            SetColorFromPalette
				exit                                    ; exit to operating system
 000000E1  6A 00	   *	    push   +000000000h
 000000E3  E8 00000000 E   *	    call   ExitProcess
 000000E8			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 000000E8			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 000000E8  51			push        ECX

 000000E9  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 000000EE  52		     1	    push        EDX
 000000EF  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 000000F4  E8 00000000 E     1	    call        WriteString
 000000F9  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 000000FA  52		     1	    push        EDX
 000000FB  BA 00000044 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 00000100  E8 00000000 E     1	    call        WriteString
 00000105  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 00000106  52		     1	    push        EDX
 00000107  BA 00000088 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 0000010C  E8 00000000 E     1	    call        WriteString
 00000111  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000112  52		     1	    push        EDX
 00000113  BA 000000CC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000118  E8 00000000 E     1	    call        WriteString
 0000011D  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 0000011E  52		     1	    push        EDX
 0000011F  BA 000000CC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000124  E8 00000000 E     1	    call        WriteString
 00000129  5A		     1	    pop         EDX

 0000012A  B9 00000004		mov         ECX, ROWS
 0000012F			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 0000012F  52		     1	    push        EDX
 00000130  BA 00000110 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000135  E8 00000000 E     1	    call        WriteString
 0000013A  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 0000013B  52		     1	    push        EDX
 0000013C  BA 00000154 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 00000141  E8 00000000 E     1	    call        WriteString
 00000146  5A		     1	    pop         EDX

 00000147  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 00000149  52		     1	    push        EDX
 0000014A  BA 00000198 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 0000014F  E8 00000000 E     1	    call        WriteString
 00000154  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 00000155  52		     1	    push        EDX
 00000156  BA 00000110 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 0000015B  E8 00000000 E     1	    call        WriteString
 00000160  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 00000161  52		     1	    push        EDX
 00000162  BA 000001DC R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 00000167  E8 00000000 E     1	    call        WriteString
 0000016C  5A		     1	    pop         EDX

 0000016D  59			pop         ECX

 0000016E  C3			ret
 0000016F			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 0000016F			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code
				; -------------------------------------------------------- -
 0000016F  55			push        EBP
 00000170  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000172  50			push        EAX
 00000173  53			push        EBX
 00000174  51			push        ECX
 00000175  52			push        EDX

 00000176			_stackFrame:
 00000176  B9 00000004		    mov     ECX, CODE_LENGTH
 0000017B  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 0000017E  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 00000181  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 00000184			_generateCode:
 00000184  51			    push    ECX                     ; Preserve loop counter

				    mArand  1, COLORS, ECX          ; Get a random number and store to EDX
 00000185  50		     1	    push        EAX
 00000186  B8 00000008	     1	    mov         EAX, COLORS
 0000018B  83 E8 01	     1	    sub         EAX, 1
 0000018E  40		     1	    inc         EAX
 0000018F  E8 00000000 E     1	    call        RandomRange
 00000194  83 C0 01	     1	    add         EAX, 1
 00000197  8B C8	     1	    mov         ECX, EAX
 00000199  58		     1	    pop         EAX

 0000019A  83 FA 01		    cmp     EDX, TRUE
 0000019D  74 0B		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 0000019F  8B D1		    mov     EDX, ECX                ; EDX is now random number
 000001A1  59			    pop     ECX                     ; ECX is loop counter again

				    ; TODO check code, can probably somehow use the code checking proc that needs to be written for gameplay

 000001A2  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 000001A3  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 000001A5  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 000001AA			    _allowDuplicates:
 000001AA  89 08		    mov     [EAX], ECX              ; Store in next index

 000001AC  59			    pop     ECX                     ; restore loop counter

 000001AD  03 C3		    add     EAX, EBX                ; Increment index

 000001AF  E2 D3		    loop    _generateCode

 000001B1  5A			pop         EDX
 000001B2  59			pop         ECX
 000001B3  5B			pop         EBX
 000001B4  58			pop         EAX
 000001B5  5D			pop         EBP

 000001B6  C2 000C		ret         12
 000001B9			GenerateCode ENDP


				; -------------------------------------------------------- -
 000001B9			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000001B9  55			push                EBP
 000001BA  8B EC		mov                 EBP, ESP

 000001BC  53			push                EBX
 000001BD  51			push                ECX
 000001BE  52			push                EDX

 000001BF			_stackFrame:
 000001BF  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000001C2  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000001C5  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000001C8  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000001CA  03 D8		add                 EBX, EAX                ; Get to array[n]
 000001CC  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000001CE  5A			pop                 EDX
 000001CF  59			pop                 ECX
 000001D0  5B			pop                 EBX

 000001D1  5D			pop                 EBP

 000001D2  C2 000C		ret 12
 000001D5			ArrayAt ENDP

				; -------------------------------------------------------- -
 000001D5			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000001D5  55			push                EBP
 000001D6  8B EC		mov                 EBP, ESP

 000001D8  50			push                EAX
 000001D9  53			push                EBX
 000001DA  51			push                ECX

 000001DB			_stackFrame:
 000001DB  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000001DE  51			push                ECX
 000001DF  68 00000227 R	push                OFFSET MAP_background_color
 000001E4  6A 04		push                TYPE MAP_background_color
 000001E6  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 000001EB  BB 00000010		mov                 EBX, 16
 000001F0  F7 E3		mul                 EBX

				; Preserve background in EBX
 000001F2  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 000001F4  51			push                ECX
 000001F5  68 00000253 R	push                OFFSET MAP_text_color
 000001FA  6A 04		push                TYPE MAP_text_color
 000001FC  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 00000201  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000203  E8 00000000 E	call                SetTextColor

 00000208  59			pop                 ECX
 00000209  5B			pop                 EBX
 0000020A  58			pop                 EAX

 0000020B  5D			pop                 EBP

 0000020C  C2 0004		ret 4
 0000020F			SetColorFromPalette ENDP

				; --------------------------------------------------------
 0000020F			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 0000020F  55			push            EBP
 00000210  8B EC		mov             EBP, ESP

 00000212  50			push            EAX
 00000213  53			push            EBX
 00000214  51			push            ECX
 00000215  52			push            EDX

 00000216			_stackFrame:
 00000216  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 00000219  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 0000021C  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 0000021F			_moveCursor:
 0000021F  50			    push        EAX

 00000220  8B C3		    mov         EAX, EBX                ; insert y
 00000222  48			    dec         EAX                     ; shift back for 1-indexing
 00000223  BB 00000100		    mov         EBX, 256
 00000228  F7 E3		    mul         EBX                     ; shift y to subregister AH

 0000022A  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 0000022C  48			    dec         EAX                     ; shift back for 1-indexing

 0000022D  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 0000022F  E8 00000000 E	    call        GotoXY
 00000234  58			    pop         EAX

 00000235  83 F8 02		cmp             EAX, HIT
 00000238  74 2F		je              _hit

 0000023A  83 F8 01		cmp             EAX, BLOW
 0000023D  74 15		je              _blow

 0000023F			_miss:
 0000023F  6A 08		    push        8
 00000241  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 00000246  52		     1	    push        EDX
 00000247  BA 00000225 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 0000024C  E8 00000000 E     1	    call        WriteString
 00000251  5A		     1	    pop         EDX
 00000252  EB 2A		    jmp         _done
 00000254			_blow:
 00000254  6A 09		    push        9
 00000256  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 0000025B  52		     1	    push        EDX
 0000025C  BA 00000223 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 00000261  E8 00000000 E     1	    call        WriteString
 00000266  5A		     1	    pop         EDX
 00000267  EB 15		    jmp         _done
 00000269			_hit:
 00000269  6A 0A		    push        10
 0000026B  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 00000270  52		     1	    push        EDX
 00000271  BA 00000221 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 00000276  E8 00000000 E     1	    call        WriteString
 0000027B  5A		     1	    pop         EDX
 0000027C  EB 00		    jmp         _done

 0000027E			_done:

 0000027E  5A			pop             EDX
 0000027F  59			pop             ECX
 00000280  5B			pop             EBX
 00000281  58			pop             EAX

 00000282  5D			pop             EBP

 00000283  C2 000C		ret 12
 00000286			PlaceFeedback ENDP


				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/06/23 16:40:38
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002BD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000286 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000001B9 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001BF _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 000000E8 _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 0000012F _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 0000016F _TEXT	Length= 0000004A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000176 _TEXT	
  _generateCode  . . . . . . . .	L Near	 00000184 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 000001AA _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 0000020F _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000216 _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 0000021F _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 0000023F _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 00000254 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 00000269 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 0000027E _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000001D5 _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001DB _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E8 Public STDCALL
  setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameplay . . . . . . . . . . .	L Near	 0000000F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 00000223 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 00000221 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 00000225 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 00000198 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000044 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 00000088 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000CC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 00000154 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000110 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 000001DC _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000021E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 00000227 _DATA	
MAP_text_color . . . . . . . . .	DWord	 00000253 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
current_round  . . . . . . . . .	Byte	 00000298 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	Byte	 0000029D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 0000027F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
solution . . . . . . . . . . . .	Byte	 00000299 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
