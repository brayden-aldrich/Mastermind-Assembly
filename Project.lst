Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/10/23 19:49:23
Mastermind			(AddTwo.asm		     Page 1 - 1


				 TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses

 = 00000064			OUT_OF_RANGE_1 = 100
 = 000000C8			OUT_OF_RANGE_2 = 200

				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range [_low.._high] from Irvine's lib,
				;               output is stored in given register
				;
				; Use:          _low (inclusive) and _high  (inclusive) may be
				;               literals, _target may be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM


 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00
 00000318 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00

				; (Gamestate)               Variables defining gameplay

 00000364 00			current_round               BYTE        0

 00000365  00000004 [		solution                    DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_2)
	    000000C8
	   ]
 00000375  00000004 [		game_matrix                 DWORD       CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00000000
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 000003F5  00000004 [		user_guess                  DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_1)
	    00000064
	   ]

				; Hits and Blows            hits and blows will be stored in these variables
 00000405 00000000		hits                        DWORD       0
 00000409 00000000		blows                       DWORD       0
 0000040D 00000000		helperVar1                  DWORD       ?
 00000411 00000000		T_HelperVar                 DWORD       ?
 00000415 00000000		matches                     DWORD       ?

 00000419 0000000F		currX                       DWORD       15              ; Helper var for GetUserCode. Stores current X coordinate. FOR START OF GAME, SET TO 7 ; TODO can probably be calculated on the fly (from test phase) - Trenton Young
 0000041D 00000007		currY                       DWORD       7               ; Helper var for GetUserCode. Stores current Y coordinate. FOR START OF GAME, SET TO 7
 00000421 00000000		currIndex                   DWORD       0               ; Helper var for GetUserCode. Will store current array index.


 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			ProgramSetup:
				;
				; Runs functions that set the environment to expected parameters,
				; seeds the random number generator, initiates the FPU, sets the
				; text and background color
				; --------------------------------------------------------
 00000000  9B DB E3		    finit
 00000003  E8 00000000 E	    call            Randomize

 00000008  6A 08		    push            8
 0000000A  E8 000001B5		    call            SetColorFromPalette


				; --------------------------------------------------------
 0000000F			InitialGreeting:
				;
				; Prompts the user for their name then greets them
				; --------------------------------------------------------

				    ; TODO PROC get user's name
				    ; TODO PROC greet user


				; --------------------------------------------------------
 0000000F			PromptForRules:
				;
				; Prompts the user asking if they would like the rules of the
				; game to be displayed
				; --------------------------------------------------------

				    ; TODO PROC prompt user YES/NO (will be used elsewhere, design modular procedure)
				    ; TODO use that procedure to ask
				    ; TODO if NO/SKIP, then jmp to NewGamestate


				; --------------------------------------------------------
 0000000F			DisplayRules:
				;
				; Prints the rules of the game and then waits for the user to
				; press a key before continuing, to give them a chance to read
				; --------------------------------------------------------

				    ; TODO write up rules strings (extra cool: file IO)
				    ; TODO use Irvine lib WaitMsg (or something) after printing
				    ; TODO EXTRA we could have two different messages, the initial
				    ;           print which goes into detail and a subsequent version
				    ;           which is less verbose


				; --------------------------------------------------------
				; TODO IFF hasWon is TRUE
 0000000F			PromptForDuplicates:
				;
				; Allow the user to choose if they want to allow duplicate
				; colors in the code, let user know that there may be more
				; than two of any given color if they agree.

				    ; TODO create a variable to store the user's choice
				    ; TODO prompt the user


				; --------------------------------------------------------
 0000000F			NewGamestate:
				;
				; Print a new gameboard, set the round to zero, and generate a new
				; solution code
				; --------------------------------------------------------

 0000000F  E8 00000042		    call            DrawNewGameboard
 00000014  C6 05 00000364 R	    mov             current_round, 0
	   00

 0000001B  6A 00		    push            FALSE
 0000001D  6A 04		    push            TYPE solution
 0000001F  68 00000365 R	    push            OFFSET solution
 00000024  E8 000000B4		    call            GenerateCode

				; --------------------------------------------------------
 00000029  B9 00000008		mov                 ECX, ROUNDS
 0000002E			GameTurn:
				;
				; Get the user's input, check against the solution, give the
				; user feedback, and repeat until the user is out of turns or
				; guesses the solution
				; --------------------------------------------------------

				    ; Get input from the user
 0000002E  68 000003F5 R	    push            OFFSET user_guess
 00000033  E8 0000039E		    call            GetUserCode

				    ; TODO store the guess in the game_matrix

				    ; Check the user's move against solution
 00000038  68 00000409 R	    push            OFFSET blows
 0000003D  68 00000405 R	    push            OFFSET hits
 00000042  E8 0000022E		    call            CheckSimilar

				    ; TODO draw user feedback

				    ; TODO IF HITS == 4, jmp to WinnerCelebration

				    ; TODO IF ROUND > ROUNDS, jmp to LoserAdmonishment

				    ; If no endgame conditions are met, the user takes another turn
 00000047  FE 05 00000364 R	    inc             current_round
 0000004D  E2 DF		    loop            GameTurn


				; --------------------------------------------------------
 0000004F			WinnerCelebration:
				;
				; Notify the user that they have won
				; --------------------------------------------------------

				    ; TODO write a celebration
				    ; TODO create a variable 'hasWon'
				    ; TODO set hasWon to TRUE


				; --------------------------------------------------------
 0000004F			LoserAdmonishment:
;
				; Notify the user that they are a loser
				; --------------------------------------------------------

				    ; TODO write an admonishment


				; --------------------------------------------------------
 0000004F			PromptForPlayAgain:
				;
				; Prompt the user to play the game again
				; --------------------------------------------------------

				    ; TODO prompt
				    ; TODO if yes, jmp to NewGamestate
				    ; TODO else, farewell



				;   jmp noTesting
				;   --------------------------------------------------------
				;   testing:
				;   ;
				;   ; contains test code
				;   ; --------------------------------------------------------
				;
				;   mov ECX, 10
				;   _debug:
				;       mArand 1, 3, EBX
				;       loop _debug
				;
				;   call            DrawNewGameboard
				;
				;   mPlacePeg       7, 7, 2
				;   mPlacePeg       7, 9, 5
				;   mPlacePeg       7, 11, 1
				;   mPlacePeg       7, 13, 4
				;
				;   mPlaceFeedback  7, 4, HIT
				;   mPlaceFeedback  8, 4, BLOW
				;   mPlaceFeedback  7, 5, BLOW
				;
				;   push            FALSE
				;   push            TYPE solution
				;   push            OFFSET solution
				;   call            GenerateCode
				;
				;   call            PrintSolution
				;
				;
				;   push            OFFSET user_guess
				;   call            GetUserCode
				;
				;
				;   ; End of program steps
				;   mGotoXY         1, 20
				;
				;   push            8
				;   call            SetColorFromPalette
				;
				;   ; comparing user_guess and solution elements - updates hits and blows
				;   push            OFFSET blows
				;   push            OFFSET hits
				;   call            CheckSimilar
				;   noTesting:

				invoke EXITProcess, 0		; exit to operating system
 0000004F  6A 00	   *	    push   +000000000h
 00000051  E8 00000000 E   *	    call   ExitProcess
 00000056			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 00000056			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 00000056  51			push        ECX

 00000057  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 0000005C  52		     1	    push        EDX
 0000005D  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 00000062  E8 00000000 E     1	    call        WriteString
 00000067  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 00000068  52		     1	    push        EDX
 00000069  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 0000006E  E8 00000000 E     1	    call        WriteString
 00000073  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 00000074  52		     1	    push        EDX
 00000075  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 0000007A  E8 00000000 E     1	    call        WriteString
 0000007F  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000080  52		     1	    push        EDX
 00000081  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000086  E8 00000000 E     1	    call        WriteString
 0000008B  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 0000008C  52		     1	    push        EDX
 0000008D  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000092  E8 00000000 E     1	    call        WriteString
 00000097  5A		     1	    pop         EDX

 00000098  B9 00000004		mov         ECX, ROWS
 0000009D			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 0000009D  52		     1	    push        EDX
 0000009E  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 000000A3  E8 00000000 E     1	    call        WriteString
 000000A8  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 000000A9  52		     1	    push        EDX
 000000AA  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 000000AF  E8 00000000 E     1	    call        WriteString
 000000B4  5A		     1	    pop         EDX

 000000B5  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 000000B7  52		     1	    push        EDX
 000000B8  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 000000BD  E8 00000000 E     1	    call        WriteString
 000000C2  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 000000C3  52		     1	    push        EDX
 000000C4  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 000000C9  E8 00000000 E     1	    call        WriteString
 000000CE  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 000000CF  52		     1	    push        EDX
 000000D0  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 000000D5  E8 00000000 E     1	    call        WriteString
 000000DA  5A		     1	    pop         EDX

 000000DB  59			pop         ECX

 000000DC  C3			ret
 000000DD			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 000000DD			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code,
				;                   user_guess and solution will be mutated
				; -------------------------------------------------------- -
 000000DD  55			push        EBP
 000000DE  8B EC		mov         EBP, ESP    ; register-indirect initialization

 000000E0  50			push        EAX
 000000E1  53			push        EBX
 000000E2  51			push        ECX
 000000E3  52			push        EDX

 000000E4  B8 00000000		mov         EAX, 0
 000000E9  B9 00000004		mov         ECX, CODE_LENGTH
 000000EE  C7 05 00000411 R	mov         T_HelperVar, 0
	   00000000
				;inc         ECX

 000000F8			_clearCheckArrays:
 000000F8  C7 80 000003F5 R	    mov     user_guess[EAX], OUT_OF_RANGE_1
	   00000064
 00000102  C7 80 00000365 R	    mov     solution[EAX], OUT_OF_RANGE_2
	   000000C8

 0000010C  83 C0 04		    add     EAX, TYPE user_guess
 0000010F  E2 E7		    loop    _clearCheckArrays

 00000111  C7 05 00000411 R	    mov     T_HelperVar, 0            ; initialize index accumulator
	   00000000

 0000011B			_stackFrame:
 0000011B  B9 00000004		    mov     ECX, CODE_LENGTH
 00000120  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 00000123  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 00000126  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 00000129			_generateCode:
 00000129  8B 55 10		    mov     EDX, [EBP + 16]         ; Reclaim the duplicate flag
 0000012C  51			    push    ECX                     ; Preserve loop counter

 0000012D  50			    push    EAX
 0000012E  B8 00000008		    mov     EAX, COLORS
 00000133  48			    dec     EAX
				    mArand  0, EAX, ECX             ; Get a random number and store to ECX
 00000134  50		     1	    push        EAX
 00000135  8B C0	     1	    mov         EAX, EAX
 00000137  83 E8 00	     1	    sub         EAX, 0
 0000013A  40		     1	    inc         EAX
 0000013B  E8 00000000 E     1	    call        RandomRange
 00000140  83 C0 00	     1	    add         EAX, 0
 00000143  8B C8	     1	    mov         ECX, EAX
 00000145  58		     1	    pop         EAX
 00000146  58			    pop     EAX

 00000147  83 FA 01		    cmp     EDX, TRUE
 0000014A  74 4D		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 0000014C  8B D1		    mov     EDX, ECX                ; EDX is now random number
 0000014E  59			    pop     ECX                     ; ECX is loop counter again

 0000014F			    _checkCode:
 0000014F  89 15 000003F5 R	        mov             user_guess[0], EDX      ; Store the current candidate in user_guess[0]

				        ; comparing user_guess(candidate, index, ?, ?) and solution(accepted codes) elements - updates hits and blows
 00000155  68 00000409 R	        push            OFFSET blows
 0000015A  68 00000405 R	        push            OFFSET hits
 0000015F  E8 00000111		        call            CheckSimilar

 00000164  83 3D 00000405 R	        cmp             hits, 0
	   00
 0000016B  7F BC		        jg              _generateCode
 0000016D  83 3D 00000409 R	        cmp             blows, 0
	   00
 00000174  7F B3		        jg              _generateCode       ; check if the candidate has already been selected, run generate code over if so

 00000176  53			        push            EBX
 00000177  8B 1D 00000411 R	        mov             EBX, T_HelperVar
 0000017D  89 93 00000365 R	        mov             solution[EBX], EDX  ; store the accepted candidate in the next slot of the solution array
 00000183  5B			        pop             EBX

 00000184  50			        push            EAX
 00000185  B8 00000004		        mov             EAX, TYPE user_guess
 0000018A  01 05 00000411 R	        add             T_HelperVar, EAX    ; increment index accumulator
 00000190  58			        pop             EAX


 00000191  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 00000192  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 00000194  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 00000199			    _allowDuplicates:
 00000199  89 08		    mov     [EAX], ECX              ; Store in next index

 0000019B  59			    pop     ECX                     ; restore loop counter

 0000019C  03 C3		    add     EAX, EBX                ; Increment index

 0000019E  E2 89		    loop    _generateCode

 000001A0  5A			pop         EDX
 000001A1  59			pop         ECX
 000001A2  5B			pop         EBX
 000001A3  58			pop         EAX
 000001A4  5D			pop         EBP

 000001A5  C2 000C		ret         12
 000001A8			GenerateCode ENDP


				; -------------------------------------------------------- -
 000001A8			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000001A8  55			push                EBP
 000001A9  8B EC		mov                 EBP, ESP

 000001AB  53			push                EBX
 000001AC  51			push                ECX
 000001AD  52			push                EDX

 000001AE			_stackFrame:
 000001AE  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000001B1  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000001B4  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000001B7  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000001B9  03 D8		add                 EBX, EAX                ; Get to array[n]
 000001BB  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000001BD  5A			pop                 EDX
 000001BE  59			pop                 ECX
 000001BF  5B			pop                 EBX

 000001C0  5D			pop                 EBP

 000001C1  C2 000C		ret 12
 000001C4			ArrayAt ENDP

				; -------------------------------------------------------- -
 000001C4			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000001C4  55			push                EBP
 000001C5  8B EC		mov                 EBP, ESP

 000001C7  50			push                EAX
 000001C8  53			push                EBX
 000001C9  51			push                ECX

 000001CA			_stackFrame:
 000001CA  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000001CD  51			push                ECX
 000001CE  68 000002A7 R	push                OFFSET MAP_background_color
 000001D3  6A 04		push                TYPE MAP_background_color
 000001D5  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 000001DA  BB 00000010		mov                 EBX, 16
 000001DF  F7 E3		mul                 EBX

				; Preserve background in EBX
 000001E1  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 000001E3  51			push                ECX
 000001E4  68 000002D3 R	push                OFFSET MAP_text_color
 000001E9  6A 04		push                TYPE MAP_text_color
 000001EB  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 000001F0  03 C3		add                 EAX, EBX

				; Finally, set the color
 000001F2  E8 00000000 E	call                SetTextColor

 000001F7  59			pop                 ECX
 000001F8  5B			pop                 EBX
 000001F9  58			pop                 EAX

 000001FA  5D			pop                 EBP

 000001FB  C2 0004		ret 4
 000001FE			SetColorFromPalette ENDP

				; --------------------------------------------------------
 000001FE			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 000001FE  55			push            EBP
 000001FF  8B EC		mov             EBP, ESP

 00000201  50			push            EAX
 00000202  53			push            EBX
 00000203  51			push            ECX
 00000204  52			push            EDX

 00000205			_stackFrame:
 00000205  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 00000208  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 0000020B  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 0000020E			_moveCursor:
 0000020E  50			    push        EAX

 0000020F  8B C3		    mov         EAX, EBX                ; insert y
 00000211  48			    dec         EAX                     ; shift back for 1-indexing
 00000212  BB 00000100		    mov         EBX, 256
 00000217  F7 E3		    mul         EBX                     ; shift y to subregister AH

 00000219  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 0000021B  48			    dec         EAX                     ; shift back for 1-indexing

 0000021C  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 0000021E  E8 00000000 E	    call        GotoXY
 00000223  58			    pop         EAX

 00000224  83 F8 02		cmp             EAX, HIT
 00000227  74 2F		je              _hit

 00000229  83 F8 01		cmp             EAX, BLOW
 0000022C  74 15		je              _blow

 0000022E			_miss:
 0000022E  6A 08		    push        8
 00000230  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 00000235  52		     1	    push        EDX
 00000236  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 0000023B  E8 00000000 E     1	    call        WriteString
 00000240  5A		     1	    pop         EDX
 00000241  EB 2A		    jmp         _done
 00000243			_blow:
 00000243  6A 09		    push        9
 00000245  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 0000024A  52		     1	    push        EDX
 0000024B  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 00000250  E8 00000000 E     1	    call        WriteString
 00000255  5A		     1	    pop         EDX
 00000256  EB 15		    jmp         _done
 00000258			_hit:
 00000258  6A 0A		    push        10
 0000025A  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 0000025F  52		     1	    push        EDX
 00000260  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 00000265  E8 00000000 E     1	    call        WriteString
 0000026A  5A		     1	    pop         EDX
 0000026B  EB 00		    jmp         _done

 0000026D			_done:

 0000026D  5A			pop             EDX
 0000026E  59			pop             ECX
 0000026F  5B			pop             EBX
 00000270  58			pop             EAX

 00000271  5D			pop             EBP

 00000272  C2 000C		ret 12
 00000275			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 00000275			CheckSimilar PROC
				; Author:           Hla Htun (Trenton Young made small contribution)
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have user_guess and solution as global variables
				;                   Both of the arrays must have a size of 4
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 00000275  55			    push    EBP
 00000276  8B EC		    mov     EBP, ESP

 00000278  50			    push    EAX
 00000279  53			    push    EBX
 0000027A  51			    push    ECX

 0000027B  B8 00000000		    mov     EAX, 0
 00000280  8B 5D 08		    mov     EBX, [EBP + 8]
 00000283  89 03		    mov     [EBX], EAX      ; initializing hits variable
 00000285  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000288  89 03		    mov     [EBX], EAX      ; initializing blows variable
 0000028A  A3 00000415 R	    mov     matches, EAX

 0000028F  B9 00000000		    mov     ECX, 0
 00000294			    PrintUserGuess:
 00000294  51			        push    ECX
 00000295  68 000003F5 R	        push    OFFSET user_guess
 0000029A  6A 04		        push    TYPE user_guess
 0000029C  E8 FFFFFF07		        call    ArrayAt
 000002A1  A3 0000040D R	        mov     helperVar1, EAX

 000002A6  51			        push    ECX
 000002A7  68 00000365 R	        push    OFFSET solution
 000002AC  6A 04		        push    TYPE solution
 000002AE  E8 FFFFFEF5		        call    ArrayAt
 000002B3  8B 1D 0000040D R	        mov     EBX, helperVar1
 000002B9  3B D8		        cmp     EBX, EAX
 000002BB  74 02		        JE      isAHit
 000002BD  EB 07		        JMP     notAHit
 000002BF			        isAHit:
 000002BF  83 05 00000405 R	            add hits, 1
	   01

 000002C6			        notAHit:
				            ; ECX => i
				            ; EBX => j
 000002C6  A3 0000040D R	            mov     helperVar1, EAX
 000002CB  8B 1D 00000405 R	            mov     EBX, hits
 000002D1			            loop2ndArray:
 000002D1  53			                push    EBX
 000002D2  68 000003F5 R	                push    OFFSET user_guess
 000002D7  6A 04		                push    TYPE user_guess
 000002D9  E8 FFFFFECA		                call    ArrayAt
 000002DE  3B 05 0000040D R	                cmp     EAX, helperVar1
 000002E4  74 0A		                JE      isAMatch
 000002E6  83 FB 03		                cmp     EBX, 3
 000002E9  74 0E		                JE      outOfisThisInArray
 000002EB  83 C3 01		                add     EBX, 1
 000002EE  EB E1		                JMP     loop2ndArray

 000002F0			            isAMatch:
 000002F0  83 05 00000415 R	                add     matches, 1
	   01
 000002F7  EB 00		                JMP     outOfisThisInArray


 000002F9			        outOfisThisInArray:
 000002F9  83 F9 03		            cmp     ECX, 3
 000002FC  74 05		            JE      outOfPrintUserGuess
 000002FE  83 C1 01		            add     ECX, 1
 00000301  EB 91		            JMP     PrintUserGuess

 00000303			outOfPrintUserGuess:
 00000303  8B 5D 08		    mov     EBX, [EBP + 8]
 00000306  A1 00000405 R	    mov     EAX, hits
 0000030B  89 03		    mov     [EBX], EAX      ; saving to hits variable

 0000030D  A1 00000415 R	    mov     EAX, matches
 00000312  2B 05 00000405 R	    sub     EAX, hits
 00000318  8B 5D 0C		    mov     EBX, [EBP + 12]
 0000031B  89 03		    mov     [EBX], EAX      ; saving to blows variable

 0000031D  59			    pop     ECX
 0000031E  5B			    pop     EBX
 0000031F  58			    pop     EAX

 00000320  5D			    pop     EBP
 00000321  C2 0008		    ret     8
 00000324			CheckSimilar ENDP


				; -------------------------------------------------------- -
 00000324			PrintSolution PROC
				; Author:           Cameron Kroeker (Trenton Young made small contribution)
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -
 00000324  50			push    EAX
 00000325  57			push    EDI

 00000326  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 0000032B  8B 87 00000365 R	mov EAX, solution[EDI]
				mPlacePeg       75, 7, EAX
 00000331  52		     2	    push        EDX
 00000332  B2 4B	     2	    mov         dl, 75
 00000334  FE CA	     2	    dec         dl
 00000336  B6 07	     2	    mov         dh, 7
 00000338  FE CE	     2	    dec         dh
 0000033A  E8 00000000 E     2	    call        Gotoxy
 0000033F  5A		     2	    pop         EDX
 00000340  50		     1	    push        EAX
 00000341  E8 FFFFFE7E	     1	    call        SetColorFromPalette
 00000346  52		     2	    push        EDX
 00000347  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000034C  E8 00000000 E     2	    call        WriteString
 00000351  5A		     2	    pop         EDX

 00000352  8B 87 00000369 R	mov EAX, solution[EDI+4]
				mPlacePeg       75, 9, EAX
 00000358  52		     2	    push        EDX
 00000359  B2 4B	     2	    mov         dl, 75
 0000035B  FE CA	     2	    dec         dl
 0000035D  B6 09	     2	    mov         dh, 9
 0000035F  FE CE	     2	    dec         dh
 00000361  E8 00000000 E     2	    call        Gotoxy
 00000366  5A		     2	    pop         EDX
 00000367  50		     1	    push        EAX
 00000368  E8 FFFFFE57	     1	    call        SetColorFromPalette
 0000036D  52		     2	    push        EDX
 0000036E  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000373  E8 00000000 E     2	    call        WriteString
 00000378  5A		     2	    pop         EDX

 00000379  8B 87 0000036D R	mov EAX, solution[EDI+8]
				mPlacePeg       75, 11, EAX
 0000037F  52		     2	    push        EDX
 00000380  B2 4B	     2	    mov         dl, 75
 00000382  FE CA	     2	    dec         dl
 00000384  B6 0B	     2	    mov         dh, 11
 00000386  FE CE	     2	    dec         dh
 00000388  E8 00000000 E     2	    call        Gotoxy
 0000038D  5A		     2	    pop         EDX
 0000038E  50		     1	    push        EAX
 0000038F  E8 FFFFFE30	     1	    call        SetColorFromPalette
 00000394  52		     2	    push        EDX
 00000395  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000039A  E8 00000000 E     2	    call        WriteString
 0000039F  5A		     2	    pop         EDX

 000003A0  8B 87 00000371 R	mov EAX, solution[EDI+12]
				mPlacePeg       75, 13, EAX
 000003A6  52		     2	    push        EDX
 000003A7  B2 4B	     2	    mov         dl, 75
 000003A9  FE CA	     2	    dec         dl
 000003AB  B6 0D	     2	    mov         dh, 13
 000003AD  FE CE	     2	    dec         dh
 000003AF  E8 00000000 E     2	    call        Gotoxy
 000003B4  5A		     2	    pop         EDX
 000003B5  50		     1	    push        EAX
 000003B6  E8 FFFFFE09	     1	    call        SetColorFromPalette
 000003BB  52		     2	    push        EDX
 000003BC  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003C1  E8 00000000 E     2	    call        WriteString
 000003C6  5A		     2	    pop         EDX
				;
				;movzx EAX, solution[EDI]
				;mPlacePeg       75, 7, EAX
				;
				;movzx EAX, solution[EDI+1]
				;mPlacePeg       75, 9, EAX
				;
				;movzx EAX, solution[EDI+2]
				;mPlacePeg       75, 11, EAX
				;
				;movzx EAX, solution[EDI+3]
				;mPlacePeg       75, 13, EAX


				;Set color back to White
 000003C7  6A 08		push            8
 000003C9  E8 FFFFFDF6		call            SetColorFromPalette


 000003CE  B8 00000000		mov EAX, 0

 000003D3  5F			pop     EDI
 000003D4  58			pop     EAX

 000003D5  C3			ret
 000003D6			PrintSolution ENDP


				; -------------------------------------------------------- -
 000003D6			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into user_guess
				;
				; Helper Variables: currX, currIndex, user_guess
				;
				; Parameters:       push OFFSET array
				;                   call 
				;                   
				; Postconditions:   Updated user_guess
				; -------------------------------------------------------- -
 000003D6  55			push            EBP
 000003D7  8B EC		mov             EBP, ESP

 000003D9  50			push            EAX
 000003DA  53			push            EBX
 000003DB  51			push            ECX
 000003DC  52			push            EDX

 000003DD			_init_variables:
 000003DD  8B 7D 08		    mov             EDI, [EBP + 8]      ; Array offset 
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be displayed.
 000003E0  52		     1	    push        EDX
 000003E1  B2 01	     1	    mov         dl, 1
 000003E3  FE CA	     1	    dec         dl
 000003E5  B6 11	     1	    mov         dh, 17
 000003E7  FE CE	     1	    dec         dh
 000003E9  E8 00000000 E     1	    call        Gotoxy
 000003EE  5A		     1	    pop         EDX
 000003EF  B9 00000000		    mov             ECX, 0
 000003F4  89 0F		    mov             [EDI], ECX
 000003F6  89 4F 04		    mov             [EDI + 4], ECX
 000003F9  89 4F 08		    mov             [EDI + 8], ECX
 000003FC  89 4F 0C		    mov             [EDI + 12], ECX
				    
				    
 000003FF			_string:
				    mPrint          selectColor
 000003FF  52		     1	    push        EDX
 00000400  BA 00000318 R     1	    mov         EDX, OFFSET selectColor
 00000405  E8 00000000 E     1	    call        WriteString
 0000040A  5A		     1	    pop         EDX



				; Initialize the screen and ECX to show a color before the user hits the arrow keys. 
 0000040B			_preloop:

 0000040B  8B 1D 0000041D R	mov             EBX, currY              ; init current y
 00000411  A1 00000419 R	mov             EAX, currX              ; init current x
 00000416  8B 0F		mov             ECX, [EDI] 
				mPlacePeg       al, bl, ECX             ; place peg on coordinate
 00000418  52		     2	    push        EDX
 00000419  8A D0	     2	    mov         dl, al
 0000041B  FE CA	     2	    dec         dl
 0000041D  8A F3	     2	    mov         dh, bl
 0000041F  FE CE	     2	    dec         dh
 00000421  E8 00000000 E     2	    call        Gotoxy
 00000426  5A		     2	    pop         EDX
 00000427  51		     1	    push        ECX
 00000428  E8 FFFFFD97	     1	    call        SetColorFromPalette
 0000042D  52		     2	    push        EDX
 0000042E  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000433  E8 00000000 E     2	    call        WriteString
 00000438  5A		     2	    pop         EDX

				;  loop until user inputs a code

 00000439			_loop:
 00000439  B8 00000032		    mov             EAX, 50
 0000043E  E8 00000000 E	    call            Delay
 00000443  E8 00000000 E	    call            ReadKey
 00000448  74 EF		    jz              _loop

 0000044A  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx
 0000044D  83 FA 25		cmp             EDX, 37                 ; left
 00000450  74 6B		je              _decrease



 00000452  83 FA 27		cmp             EDX, 39                 ; right
 00000455  74 24		je              _increase

 00000457  83 FA 0D		cmp             EDX, 13                 ; enter
 0000045A  0F 84 0000009F	je              _enter

 00000460  83 FA 28		cmp             EDX, 40                 ; down
 00000463  0F 84 00000096	je              _enter

 00000469  83 FA 26		cmp             EDX, 38                 ; up
 0000046C  0F 84 000000C8	je              _up

 00000472  83 FA 08		cmp             EDX, 8                  ; backspace
 00000475  0F 84 000000BF	je              _up

 0000047B			_increase:

 0000047B  83 C1 01		add             ECX, 1                  ; increment color map
 0000047E  83 F9 08		cmp             ECX, 8                  ; check if current index is too high

 00000481  7D 02		jge             _resetHigh
 00000483  EB 05		jmp             _getColorHigh   

 00000485			    _resetHigh: 
 00000485  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 0000048A			    _getColorHigh:
 0000048A  A1 00000419 R	    mov             EAX, currX          ; move the current x index into EAX so mPlacePeg can use AL
 0000048F  8B 1D 0000041D R	    mov             EBX, currY          ; move current y index into EBX so mPlacePeg can use BL
				    mPlacePeg       al, bl, ECX
 00000495  52		     2	    push        EDX
 00000496  8A D0	     2	    mov         dl, al
 00000498  FE CA	     2	    dec         dl
 0000049A  8A F3	     2	    mov         dh, bl
 0000049C  FE CE	     2	    dec         dh
 0000049E  E8 00000000 E     2	    call        Gotoxy
 000004A3  5A		     2	    pop         EDX
 000004A4  51		     1	    push        ECX
 000004A5  E8 FFFFFD1A	     1	    call        SetColorFromPalette
 000004AA  52		     2	    push        EDX
 000004AB  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000004B0  E8 00000000 E     2	    call        WriteString
 000004B5  5A		     2	    pop         EDX
 000004B6  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]
				                                        
 000004B8  E9 FFFFFF7C		jmp             _loop                   ; Loop until a new key press

 000004BD			_decrease:

 000004BD  83 F9 00		cmp             ECX, 0
 000004C0  74 05		je              _resetLow
 000004C2  83 E9 01		sub             ECX, 1
 000004C5  EB 05		jmp             _getColorLow
 000004C7			    _resetLow:
 000004C7  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 000004CC			    _getColorLow:
 000004CC  A1 00000419 R	    mov             EAX, currX          ; move current x index into EAX so it can be used in mPlacePeg
 000004D1  8B 1D 0000041D R	    mov             EBX, currY          ; move current y index to EBX to be used in mPlacePeg
				    mPlacePeg       al, bl, ECX
 000004D7  52		     2	    push        EDX
 000004D8  8A D0	     2	    mov         dl, al
 000004DA  FE CA	     2	    dec         dl
 000004DC  8A F3	     2	    mov         dh, bl
 000004DE  FE CE	     2	    dec         dh
 000004E0  E8 00000000 E     2	    call        Gotoxy
 000004E5  5A		     2	    pop         EDX
 000004E6  51		     1	    push        ECX
 000004E7  E8 FFFFFCD8	     1	    call        SetColorFromPalette
 000004EC  52		     2	    push        EDX
 000004ED  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000004F2  E8 00000000 E     2	    call        WriteString
 000004F7  5A		     2	    pop         EDX
 000004F8  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]
				                                        
 000004FA  E9 FFFFFF3A		jmp             _loop                   ; Loop until a new key press

 000004FF			_enter:

 000004FF  83 3D 00000421 R	cmp             currIndex, 3            ; Check if 4th peg
	   03
 00000506  74 02		je              _onlyEnter              ; jump to check if downkey pressed
 00000508  EB 0C		jmp             _break                  ; else continue on 
 0000050A			_onlyEnter:
 0000050A  83 FA 28		    cmp             EDX, 40             ; Check if downkey was pressed
 0000050D  74 02		    je              downKey             ; if so, jump to downKey
 0000050F  EB 05		    jmp             _break              ; else continue on
 00000511			    downKey:
 00000511  E9 FFFFFEF5		        jmp             _preloop        ; jump to preloop to avoid accidental downkey entering users code
 00000516			_break:

 00000516  83 C7 04		add             EDI, 4                  ; increment current index
 00000519  A1 0000041D R	mov             EAX, currY              ; move current y coordinate into eax
 0000051E  83 C0 02		add             EAX, 2                  ; incease it by 2
 00000521  A3 0000041D R	mov             currY, EAX              ; store updated currY

 00000526  FF 05 00000421 R	inc             currIndex               ; increment current index in user_guess
 0000052C  83 3D 00000421 R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 00000533  7D 30		jge             _end
 00000535  E9 FFFFFED1		jmp             _preloop                ; loop to get a new number

 0000053A			_up:
 0000053A  A1 0000041D R	    mov         EAX, currY
 0000053F  83 F8 07		    cmp         EAX, 7                  ; compare current y coord with 7. If it's 7, just go back to looping.
 00000542  0F 84 FFFFFEF1	    je          _loop
 00000548  83 E8 02		    sub         EAX, 2                  ; subtract 2 from currY to get to peg above currY
 0000054B  A3 0000041D R	    mov         currY, EAX
 00000550  83 EF 04		    sub         EDI, 4                  ; move array pointer back to previous entry
 00000553  A1 00000421 R	    mov         EAX, currIndex
 00000558  83 E8 01		    sub         EAX, 1                  ; subtract 1 from currIndex
 0000055B  A3 00000421 R	    mov         currIndex, EAX
 00000560  E9 FFFFFEA6		    jmp         _preloop                ; go to preloop


 00000565			_end:                                   ; break out of loop and return
 00000565  6A 08		push            8
 00000567  E8 FFFFFC58		call            SetColorFromPalette     ; set color back to white

 0000056C  C7 05 0000041D R	mov             currY, 7                ; reset currY for next round
	   00000007
 00000576  A1 00000419 R	mov             EAX, currX              ; set currX to currX + 8 to get next round x coordinate
 0000057B  83 C0 08		add             EAX, 8

 0000057E  5A			pop             EDX
 0000057F  59			pop             ECX
 00000580  5B			pop             EBX
 00000581  58			pop             EAX
 00000582  5D			pop             EBP
 00000583  C2 0004		ret 4
 00000586			GetUserCode ENDP

				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/10/23 19:49:23
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000425 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000586 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000001A8 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001AE _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 00000275 _TEXT	Length= 000000AF Public STDCALL
  PrintUserGuess . . . . . . . .	L Near	 00000294 _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 000002BF _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 000002C6 _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 000002D1 _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  outOfisThisInArray . . . . . .	L Near	 000002F9 _TEXT	
  outOfPrintUserGuess  . . . . .	L Near	 00000303 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 00000056 _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 0000009D _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 000000DD _TEXT	Length= 000000CB Public STDCALL
  _clearCheckArrays  . . . . . .	L Near	 000000F8 _TEXT	
  _stackFrame  . . . . . . . . .	L Near	 0000011B _TEXT	
  _generateCode  . . . . . . . .	L Near	 00000129 _TEXT	
  _checkCode . . . . . . . . . .	L Near	 0000014F _TEXT	
  _allowDuplicates . . . . . . .	L Near	 00000199 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 000003D6 _TEXT	Length= 000001B0 Public STDCALL
  _init_variables  . . . . . . .	L Near	 000003DD _TEXT	
  _string  . . . . . . . . . . .	L Near	 000003FF _TEXT	
  _preloop . . . . . . . . . . .	L Near	 0000040B _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000439 _TEXT	
  _increase  . . . . . . . . . .	L Near	 0000047B _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 00000485 _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 0000048A _TEXT	
  _decrease  . . . . . . . . . .	L Near	 000004BD _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 000004C7 _TEXT	
  _getColorLow . . . . . . . . .	L Near	 000004CC _TEXT	
  _enter . . . . . . . . . . . .	L Near	 000004FF _TEXT	
  _onlyEnter . . . . . . . . . .	L Near	 0000050A _TEXT	
  downKey  . . . . . . . . . . .	L Near	 00000511 _TEXT	
  _break . . . . . . . . . . . .	L Near	 00000516 _TEXT	
  _up  . . . . . . . . . . . . .	L Near	 0000053A _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000565 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 000001FE _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000205 _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 0000020E _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 0000022E _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 00000243 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 00000258 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 0000026D _TEXT	
PrintSolution  . . . . . . . . .	P Near	 00000324 _TEXT	Length= 000000B2 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000001C4 _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001CA _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000056 Public STDCALL
  ProgramSetup . . . . . . . . .	L Near	 00000000 _TEXT	
  InitialGreeting  . . . . . . .	L Near	 0000000F _TEXT	
  PromptForRules . . . . . . . .	L Near	 0000000F _TEXT	
  DisplayRules . . . . . . . . .	L Near	 0000000F _TEXT	
  PromptForDuplicates  . . . . .	L Near	 0000000F _TEXT	
  NewGamestate . . . . . . . . .	L Near	 0000000F _TEXT	
  GameTurn . . . . . . . . . . .	L Near	 0000002E _TEXT	
  WinnerCelebration  . . . . . .	L Near	 0000004F _TEXT	
  LoserAdmonishment  . . . . . .	L Near	 0000004F _TEXT	
  PromptForPlayAgain . . . . . .	L Near	 0000004F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OUT_OF_RANGE_1 . . . . . . . . .	Number	 00000064h   
OUT_OF_RANGE_2 . . . . . . . . .	Number	 000000C8h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
T_HelperVar  . . . . . . . . . .	DWord	 00000411 _DATA	
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 00000409 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 00000421 _DATA	
currX  . . . . . . . . . . . . .	DWord	 00000419 _DATA	
currY  . . . . . . . . . . . . .	DWord	 0000041D _DATA	
current_round  . . . . . . . . .	Byte	 00000364 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	DWord	 00000375 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000002FF _DATA	
helperVar1 . . . . . . . . . . .	DWord	 0000040D _DATA	
hits . . . . . . . . . . . . . .	DWord	 00000405 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 00000415 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectColor  . . . . . . . . . .	Byte	 00000318 _DATA	
solution . . . . . . . . . . . .	DWord	 00000365 _DATA	
user_guess . . . . . . . . . . .	DWord	 000003F5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
