Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/07/23 13:54:31
Mastermind			(AddTwo.asm		     Page 1 - 1


				 TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses


				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range from Irvine's WriteString,
				;               output is stored in given register
				;
				; Use:          _low and _high may be literals, _target may
				;               be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM





 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00
 00000318 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00

				; (Gamestate)               Variables defining gameplay

 00000364 00			current_round               BYTE        0

 00000365  00000004 [		solution                    BYTE        CODE_LENGTH DUP(?)
	    00
	   ]
 00000369  00000004 [		game_matrix                 BYTE        CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00
	    ]
	   ]

 00000389  00000004 [		userArray                   DWORD       4 DUP(?)
	    00000000
	   ]
 00000399 00000001		currX                       DWORD       1
 0000039D 00000000		currIndex                   DWORD       0
 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			setup:
				;
				; Runs functions that set the environment to expected
				; --------------------------------------------------------
 00000000  9B DB E3		finit
 00000003  E8 00000000 E	call            Randomize

 00000008  6A 08		push            8
 0000000A  E8 000001CB		call            SetColorFromPalette

				; --------------------------------------------------------
 0000000F			gameplay:
				;
				; Runs the gameloop TODO contains test code right now
				; --------------------------------------------------------

 0000000F  E8 000000D9		call            DrawNewGameboard

				mPlacePeg       7, 7, 2
 00000014  B2 07	     2	    mov         dl, 7
 00000016  FE CA	     2	    dec         dl
 00000018  B6 07	     2	    mov         dh, 7
 0000001A  FE CE	     2	    dec         dh
 0000001C  E8 00000000 E     2	    call        Gotoxy
 00000021  5A		     2	    pop         EDX
 00000022  6A 02	     1	    push        2
 00000024  E8 000001B1	     1	    call        SetColorFromPalette
 00000029  52		     2	    push        EDX
 0000002A  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000002F  E8 00000000 E     2	    call        WriteString
 00000034  5A		     2	    pop         EDX
				mPlacePeg       7, 9, 5
 00000035  B2 07	     2	    mov         dl, 7
 00000037  FE CA	     2	    dec         dl
 00000039  B6 09	     2	    mov         dh, 9
 0000003B  FE CE	     2	    dec         dh
 0000003D  E8 00000000 E     2	    call        Gotoxy
 00000042  5A		     2	    pop         EDX
 00000043  6A 05	     1	    push        5
 00000045  E8 00000190	     1	    call        SetColorFromPalette
 0000004A  52		     2	    push        EDX
 0000004B  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000050  E8 00000000 E     2	    call        WriteString
 00000055  5A		     2	    pop         EDX
				mPlacePeg       7, 11, 1
 00000056  B2 07	     2	    mov         dl, 7
 00000058  FE CA	     2	    dec         dl
 0000005A  B6 0B	     2	    mov         dh, 11
 0000005C  FE CE	     2	    dec         dh
 0000005E  E8 00000000 E     2	    call        Gotoxy
 00000063  5A		     2	    pop         EDX
 00000064  6A 01	     1	    push        1
 00000066  E8 0000016F	     1	    call        SetColorFromPalette
 0000006B  52		     2	    push        EDX
 0000006C  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000071  E8 00000000 E     2	    call        WriteString
 00000076  5A		     2	    pop         EDX
				mPlacePeg       7, 13, 4
 00000077  B2 07	     2	    mov         dl, 7
 00000079  FE CA	     2	    dec         dl
 0000007B  B6 0D	     2	    mov         dh, 13
 0000007D  FE CE	     2	    dec         dh
 0000007F  E8 00000000 E     2	    call        Gotoxy
 00000084  5A		     2	    pop         EDX
 00000085  6A 04	     1	    push        4
 00000087  E8 0000014E	     1	    call        SetColorFromPalette
 0000008C  52		     2	    push        EDX
 0000008D  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000092  E8 00000000 E     2	    call        WriteString
 00000097  5A		     2	    pop         EDX

				mPlaceFeedback  7, 4, HIT
 00000098  6A 07	     1	    push        7
 0000009A  6A 04	     1	    push        4
 0000009C  6A 02	     1	    push        HIT
 0000009E  E8 00000190	     1	    call        PlaceFeedback
				mPlaceFeedback  8, 4, BLOW
 000000A3  6A 08	     1	    push        8
 000000A5  6A 04	     1	    push        4
 000000A7  6A 01	     1	    push        BLOW
 000000A9  E8 00000185	     1	    call        PlaceFeedback
				mPlaceFeedback  7, 5, BLOW
 000000AE  6A 07	     1	    push        7
 000000B0  6A 05	     1	    push        5
 000000B2  6A 01	     1	    push        BLOW
 000000B4  E8 0000017A	     1	    call        PlaceFeedback


 000000B9  6A 00		push            FALSE
 000000BB  6A 01		push            TYPE solution
 000000BD  68 00000365 R	push            OFFSET solution
 000000C2  E8 000000AD		call            GenerateCode

				; push            OFFSET userArray
				; call            ListenUser
				; call            CheckSimilar

 000000C7  68 00000389 R	push            OFFSET userArray
 000000CC  E8 000001D9		call            GetUserCode
				; End of program steps
				mGotoXY         1, 20
 000000D1  B2 01	     1	    mov         dl, 1
 000000D3  FE CA	     1	    dec         dl
 000000D5  B6 14	     1	    mov         dh, 20
 000000D7  FE CE	     1	    dec         dh
 000000D9  E8 00000000 E     1	    call        Gotoxy
 000000DE  5A		     1	    pop         EDX

 000000DF  6A 08		push            8
 000000E1  E8 000000F4		call            SetColorFromPalette
				exit                                    ; exit to operating system
 000000E6  6A 00	   *	    push   +000000000h
 000000E8  E8 00000000 E   *	    call   ExitProcess
 000000ED			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 000000ED			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 000000ED  51			push        ECX

 000000EE  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 000000F3  52		     1	    push        EDX
 000000F4  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 000000F9  E8 00000000 E     1	    call        WriteString
 000000FE  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 000000FF  52		     1	    push        EDX
 00000100  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 00000105  E8 00000000 E     1	    call        WriteString
 0000010A  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 0000010B  52		     1	    push        EDX
 0000010C  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 00000111  E8 00000000 E     1	    call        WriteString
 00000116  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000117  52		     1	    push        EDX
 00000118  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 0000011D  E8 00000000 E     1	    call        WriteString
 00000122  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000123  52		     1	    push        EDX
 00000124  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000129  E8 00000000 E     1	    call        WriteString
 0000012E  5A		     1	    pop         EDX

 0000012F  B9 00000004		mov         ECX, ROWS
 00000134			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 00000134  52		     1	    push        EDX
 00000135  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 0000013A  E8 00000000 E     1	    call        WriteString
 0000013F  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 00000140  52		     1	    push        EDX
 00000141  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 00000146  E8 00000000 E     1	    call        WriteString
 0000014B  5A		     1	    pop         EDX

 0000014C  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 0000014E  52		     1	    push        EDX
 0000014F  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 00000154  E8 00000000 E     1	    call        WriteString
 00000159  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 0000015A  52		     1	    push        EDX
 0000015B  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000160  E8 00000000 E     1	    call        WriteString
 00000165  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 00000166  52		     1	    push        EDX
 00000167  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 0000016C  E8 00000000 E     1	    call        WriteString
 00000171  5A		     1	    pop         EDX

 00000172  59			pop         ECX

 00000173  C3			ret
 00000174			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 00000174			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code
				; -------------------------------------------------------- -
 00000174  55			push        EBP
 00000175  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000177  50			push        EAX
 00000178  53			push        EBX
 00000179  51			push        ECX
 0000017A  52			push        EDX

 0000017B			_stackFrame:
 0000017B  B9 00000004		    mov     ECX, CODE_LENGTH
 00000180  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 00000183  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 00000186  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 00000189			_generateCode:
 00000189  51			    push    ECX                     ; Preserve loop counter

				    mArand  1, COLORS, ECX          ; Get a random number and store to EDX
 0000018A  50		     1	    push        EAX
 0000018B  B8 00000008	     1	    mov         EAX, COLORS
 00000190  83 E8 01	     1	    sub         EAX, 1
 00000193  40		     1	    inc         EAX
 00000194  E8 00000000 E     1	    call        RandomRange
 00000199  83 C0 01	     1	    add         EAX, 1
 0000019C  8B C8	     1	    mov         ECX, EAX
 0000019E  58		     1	    pop         EAX

 0000019F  83 FA 01		    cmp     EDX, TRUE
 000001A2  74 0B		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 000001A4  8B D1		    mov     EDX, ECX                ; EDX is now random number
 000001A6  59			    pop     ECX                     ; ECX is loop counter again

				    ; TODO check code, can probably somehow use the code checking proc that needs to be written for gameplay

 000001A7  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 000001A8  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 000001AA  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 000001AF			    _allowDuplicates:
 000001AF  89 08		    mov     [EAX], ECX              ; Store in next index

 000001B1  59			    pop     ECX                     ; restore loop counter

 000001B2  03 C3		    add     EAX, EBX                ; Increment index

 000001B4  E2 D3		    loop    _generateCode

 000001B6  5A			pop         EDX
 000001B7  59			pop         ECX
 000001B8  5B			pop         EBX
 000001B9  58			pop         EAX
 000001BA  5D			pop         EBP

 000001BB  C2 000C		ret         12
 000001BE			GenerateCode ENDP


				; -------------------------------------------------------- -
 000001BE			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000001BE  55			push                EBP
 000001BF  8B EC		mov                 EBP, ESP

 000001C1  53			push                EBX
 000001C2  51			push                ECX
 000001C3  52			push                EDX

 000001C4			_stackFrame:
 000001C4  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000001C7  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000001CA  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000001CD  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000001CF  03 D8		add                 EBX, EAX                ; Get to array[n]
 000001D1  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000001D3  5A			pop                 EDX
 000001D4  59			pop                 ECX
 000001D5  5B			pop                 EBX

 000001D6  5D			pop                 EBP

 000001D7  C2 000C		ret 12
 000001DA			ArrayAt ENDP


				; -------------------------------------------------------- -
 000001DA			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000001DA  55			push                EBP
 000001DB  8B EC		mov                 EBP, ESP

 000001DD  50			push                EAX
 000001DE  53			push                EBX
 000001DF  51			push                ECX

 000001E0			_stackFrame:
 000001E0  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000001E3  51			push                ECX
 000001E4  68 000002A7 R	push                OFFSET MAP_background_color
 000001E9  6A 04		push                TYPE MAP_background_color
 000001EB  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 000001F0  BB 00000010		mov                 EBX, 16
 000001F5  F7 E3		mul                 EBX

				; Preserve background in EBX
 000001F7  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 000001F9  51			push                ECX
 000001FA  68 000002D3 R	push                OFFSET MAP_text_color
 000001FF  6A 04		push                TYPE MAP_text_color
 00000201  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 00000206  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000208  E8 00000000 E	call                SetTextColor

 0000020D  59			pop                 ECX
 0000020E  5B			pop                 EBX
 0000020F  58			pop                 EAX

 00000210  5D			pop                 EBP

 00000211  C2 0004		ret 4
 00000214			SetColorFromPalette ENDP

				; -------------------------------------------------------- -
 00000214			ListenUser PROC
				; Author:           Hla Htun
				; Description:      Takes in 4 user input and stores it in the array
				;
				; Parameters:
				;                   push OFFSET userArray
				;                   push TYPE userArray
				;                   call
				; Preconditions:    An array as a parameter to store the 4 user inputs
				; Postconditions:   None. The array passed will be updated with the user input
				; -------------------------------------------------------- -
				    ; call readDec
				    ; store to array

				    ; loop until 4
 00000214  55			    push EBP
 00000215  8B EC		    mov EBP, ESP
 00000217  60			    pushad


 00000218  8B 7D 08		    mov EDI, [EBP+8]
 0000021B  B9 00000004		    mov ECX, 4
 00000220			    askUser:
 00000220  E8 00000000 E	        call ReadInt
 00000225  89 07		        mov [EDI], EAX
 00000227  83 F9 00		        cmp ECX, 0
				        ;JE outOfAskUser
 0000022A  83 E9 01		        sub ECX, 1
 0000022D  EB F1		        JMP askUser

 0000022F  61			    popad
 00000230  5D			    pop EBP
 00000231  C3			    ret
 00000232			ListenUser ENDP

				; -------------------------------------------------------- -
 00000232			CheckSimilar PROC
				; Author:           Hla Htun
				; Description:      Takes in two arrays. Counts the number of
				;                   indices with identical values between arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;
				; Parameters:
				;                   push OFFSET solArray
				;                   push TYPE solArray
				;                   push OFFSET userArray
				;                   push TYPE userArray
				;                   call
				; Postconditions:   Returns the number of hits and blows, i.e. ret hits, blows
				; -------------------------------------------------------- -
				    ;push    EBP
				    ;push    EBP, ESP



				    ;pop     EBP
 00000232  C3			    ret
 00000233			CheckSimilar ENDP

				; --------------------------------------------------------
 00000233			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 00000233  55			push            EBP
 00000234  8B EC		mov             EBP, ESP

 00000236  50			push            EAX
 00000237  53			push            EBX
 00000238  51			push            ECX
 00000239  52			push            EDX

 0000023A			_stackFrame:
 0000023A  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 0000023D  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 00000240  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 00000243			_moveCursor:
 00000243  50			    push        EAX

 00000244  8B C3		    mov         EAX, EBX                ; insert y
 00000246  48			    dec         EAX                     ; shift back for 1-indexing
 00000247  BB 00000100		    mov         EBX, 256
 0000024C  F7 E3		    mul         EBX                     ; shift y to subregister AH

 0000024E  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 00000250  48			    dec         EAX                     ; shift back for 1-indexing

 00000251  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 00000253  E8 00000000 E	    call        GotoXY
 00000258  58			    pop         EAX

 00000259  83 F8 02		cmp             EAX, HIT
 0000025C  74 2F		je              _hit

 0000025E  83 F8 01		cmp             EAX, BLOW
 00000261  74 15		je              _blow

 00000263			_miss:
 00000263  6A 08		    push        8
 00000265  E8 FFFFFF70		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 0000026A  52		     1	    push        EDX
 0000026B  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 00000270  E8 00000000 E     1	    call        WriteString
 00000275  5A		     1	    pop         EDX
 00000276  EB 2A		    jmp         _done
 00000278			_blow:
 00000278  6A 09		    push        9
 0000027A  E8 FFFFFF5B		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 0000027F  52		     1	    push        EDX
 00000280  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 00000285  E8 00000000 E     1	    call        WriteString
 0000028A  5A		     1	    pop         EDX
 0000028B  EB 15		    jmp         _done
 0000028D			_hit:
 0000028D  6A 0A		    push        10
 0000028F  E8 FFFFFF46		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 00000294  52		     1	    push        EDX
 00000295  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 0000029A  E8 00000000 E     1	    call        WriteString
 0000029F  5A		     1	    pop         EDX
 000002A0  EB 00		    jmp         _done

 000002A2			_done:

 000002A2  5A			pop             EDX
 000002A3  59			pop             ECX
 000002A4  5B			pop             EBX
 000002A5  58			pop             EAX

 000002A6  5D			pop             EBP

 000002A7  C2 000C		ret 12
 000002AA			PlaceFeedback ENDP

				; -------------------------------------------------------- -
 000002AA			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into userArray
				;
				; Parameters:       push OFFSET array
				;                   call
				;                   
				;                   
				;
				; Postconditions:   Updated userArray
				; -------------------------------------------------------- -
 000002AA  55			push            EBP
 000002AB  8B EC		mov             EBP, ESP

 000002AD  50			push            EAX
 000002AE  53			push            EBX
 000002AF  51			push            ECX
 000002B0  52			push            EDX

 000002B1			_init_variables:
 000002B1  8B 7D 04		    mov             EDI, [EBP + 4]      ; Array offset 
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be
 000002B4  B2 01	     1	    mov         dl, 1
 000002B6  FE CA	     1	    dec         dl
 000002B8  B6 11	     1	    mov         dh, 17
 000002BA  FE CE	     1	    dec         dh
 000002BC  E8 00000000 E     1	    call        Gotoxy
 000002C1  5A		     1	    pop         EDX
				                                        ; displayed.
 000002C2			_string:
				    mPrint          selectColor
 000002C2  52		     1	    push        EDX
 000002C3  BA 00000318 R     1	    mov         EDX, OFFSET selectColor
 000002C8  E8 00000000 E     1	    call        WriteString
 000002CD  5A		     1	    pop         EDX

				mGotoXY         1, 19                   ; Move cursor to (1, 19). This is where user will see their current choice
 000002CE  B2 01	     1	    mov         dl, 1
 000002D0  FE CA	     1	    dec         dl
 000002D2  B6 13	     1	    mov         dh, 19
 000002D4  FE CE	     1	    dec         dh
 000002D6  E8 00000000 E     1	    call        Gotoxy
 000002DB  5A		     1	    pop         EDX

				;  loop until user inputs a code
 000002DC			_loop:
 000002DC  B8 00000032		    mov             EAX, 50
 000002E1  E8 00000000 E	    call            Delay
 000002E6  E8 00000000 E	    call            ReadKey
 000002EB  74 EF		    jz              _loop

 000002ED  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx

 000002F0  83 FA 25		cmp             EDX, 37                 ; left
 000002F3  74 4A		je              _decrease
 000002F5  83 FA 28		cmp             EDX, 40                 ; down
 000002F8  74 45		je              _decrease

 000002FA  83 FA 26		cmp             EDX, 38                 ; up
 000002FD  74 0A		je              _increase
 000002FF  83 FA 27		cmp             EDX, 39                 ; right
 00000302  74 05		je              _increase

 00000304  83 FA 0D		cmp             EDX, 13                 ; enter
 00000307  74 6F		je              _enter

 00000309			_increase:

 00000309  83 C1 01		add             ECX, 1                  ; increment color map
 0000030C  83 F9 08		cmp             ECX, 8                  ; check if current index is too high
 0000030F  7D 02		jge             _resetHigh
 00000311  EB 05		jmp             _getColorHigh   

 00000313			    _resetHigh: 
 00000313  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 00000318			    _getColorHigh:
 00000318  A1 00000399 R	    mov             EAX, currX          ; move the current x index into EAX so
				    mPlacePeg       al, 19, ECX         ; mPlacePeg can use AL. Index will not reach AH 
 0000031D  8A D0	     2	    mov         dl, al
 0000031F  FE CA	     2	    dec         dl
 00000321  B6 13	     2	    mov         dh, 19
 00000323  FE CE	     2	    dec         dh
 00000325  E8 00000000 E     2	    call        Gotoxy
 0000032A  5A		     2	    pop         EDX
 0000032B  51		     1	    push        ECX
 0000032C  E8 FFFFFEA9	     1	    call        SetColorFromPalette
 00000331  52		     2	    push        EDX
 00000332  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000337  E8 00000000 E     2	    call        WriteString
 0000033C  5A		     2	    pop         EDX
				                                        ; ^ User's previous choices are displayed (currX, 19)
 0000033D  EB 9D		jmp             _loop                   ; Loop until a new key press

 0000033F			_decrease:

 0000033F  83 F9 00		cmp             ECX, 0
 00000342  74 05		je              _resetLow
 00000344  83 E9 01		sub             ECX, 1
 00000347  EB 05		jmp             _getColorLow
 00000349			    _resetLow:
 00000349  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 0000034E			    _getColorLow:
 0000034E  A1 00000399 R	    mov             EAX, currX          ; move current x index into EAX so it can be used in
				    mPlacePeg       al, 19, ECX         ; mPlacePeg
 00000353  8A D0	     2	    mov         dl, al
 00000355  FE CA	     2	    dec         dl
 00000357  B6 13	     2	    mov         dh, 19
 00000359  FE CE	     2	    dec         dh
 0000035B  E8 00000000 E     2	    call        Gotoxy
 00000360  5A		     2	    pop         EDX
 00000361  51		     1	    push        ECX
 00000362  E8 FFFFFE73	     1	    call        SetColorFromPalette
 00000367  52		     2	    push        EDX
 00000368  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000036D  E8 00000000 E     2	    call        WriteString
 00000372  5A		     2	    pop         EDX
				                                        ; ^ User's previous choices are displayed (currX, 19)
 00000373  E9 FFFFFF64		jmp             _loop                   ; Loop until a new key press

 00000378			_enter:
 00000378  FF 05 0000039D R	inc             currIndex               ; increment current index in userArray
 0000037E  83 3D 0000039D R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 00000385  7D 17		jge             _end
 00000387  89 0F		mov             [EDI], ECX              ; add color number into current index    
 00000389  83 C7 04		add             EDI, 4                  ; increment current index
 0000038C  A1 00000399 R	mov             EAX, currX              ; move current x coordinate into eax
 00000391  83 C0 05		add             EAX, 5                  ; incease it by 5
 00000394  A3 00000399 R	mov             currX, EAX              ; store updated currX
 00000399  E9 FFFFFF3E		jmp             _loop                   ; loop to get a new number


 0000039E			_end:                                   ; break out of loop and return

 0000039E  5A			pop            EDX
 0000039F  59			pop            ECX
 000003A0  5B			pop            EBX
 000003A1  58			pop            EAX
 000003A2  5D			pop            EBP
 000003A3  C2 0004		ret 4
 000003A6			GetUserCode ENDP

				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/07/23 13:54:31
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003A1 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003A6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000001BE _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001C4 _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 00000232 _TEXT	Length= 00000001 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 000000ED _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 00000134 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 00000174 _TEXT	Length= 0000004A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 0000017B _TEXT	
  _generateCode  . . . . . . . .	L Near	 00000189 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 000001AF _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 000002AA _TEXT	Length= 000000FC Public STDCALL
  _init_variables  . . . . . . .	L Near	 000002B1 _TEXT	
  _string  . . . . . . . . . . .	L Near	 000002C2 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 000002DC _TEXT	
  _increase  . . . . . . . . . .	L Near	 00000309 _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 00000313 _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 00000318 _TEXT	
  _decrease  . . . . . . . . . .	L Near	 0000033F _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 00000349 _TEXT	
  _getColorLow . . . . . . . . .	L Near	 0000034E _TEXT	
  _enter . . . . . . . . . . . .	L Near	 00000378 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000039E _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ListenUser . . . . . . . . . . .	P Near	 00000214 _TEXT	Length= 0000001E Public STDCALL
  askUser  . . . . . . . . . . .	L Near	 00000220 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 00000233 _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 0000023A _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 00000243 _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 00000263 _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 00000278 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 0000028D _TEXT	
  _done  . . . . . . . . . . . .	L Near	 000002A2 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000001DA _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001E0 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000ED Public STDCALL
  setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameplay . . . . . . . . . . .	L Near	 0000000F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 0000039D _DATA	
currX  . . . . . . . . . . . . .	DWord	 00000399 _DATA	
current_round  . . . . . . . . .	Byte	 00000364 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	Byte	 00000369 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000002FF _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectColor  . . . . . . . . . .	Byte	 00000318 _DATA	
solution . . . . . . . . . . . .	Byte	 00000365 _DATA	
userArray  . . . . . . . . . . .	DWord	 00000389 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
