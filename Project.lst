Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/07/23 15:56:45
Mastermind			(AddTwo.asm		     Page 1 - 1


				 TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses


				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range from Irvine's WriteString,
				;               output is stored in given register
				;
				; Use:          _low and _high may be literals, _target may
				;               be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM

 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00
 00000318 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00

				; (Gamestate)               Variables defining gameplay

 00000364 00			current_round               BYTE        0

 00000365  00000004 [		solution                    BYTE        CODE_LENGTH DUP(?) ; TODO What's this?
	    00
	   ]
 00000369  00000004 [		game_matrix                 BYTE        CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 00000389  00000004 [		user_guess                  BYTE        CODE_LENGTH DUP(? )
	    00
	   ]

				; Hits and Blows            hits and blows will be stored in these variables
 0000038D 00000000		hits                        DWORD       ?
 00000391 00000000		blows                       DWORD       ?
 00000395 00000003		uArray                      DWORD       3, 3, 1, 3       ; user guesses
	   00000003
	   00000001
	   00000003
 000003A5 00000003		solArray                    DWORD       3, 3, 3, 3       ; peg positions?
	   00000003
	   00000003
	   00000003
 000003B5 00000000		helperVar1                  DWORD       ?
 000003B9 00000000		matches                     DWORD       ?

				; Hits and Blows temporary helper variables   - feel free to delete after
 000003BD 43 6F 6D 70 61	msgHh1                      BYTE        "Comparing arrays", LF, 0
	   72 69 6E 67 20
	   61 72 72 61 79
	   73 0A 00
 000003CF 55 73 65 72 20	msgHh2                      BYTE        "User array: ", 0
	   61 72 72 61 79
	   3A 20 00
 000003DC 0A 53 6F 6C 75	msgHh3                      BYTE        LF, "Solution array: ", 0
	   74 69 6F 6E 20
	   61 72 72 61 79
	   3A 20 00
 000003EE 0A 68 69 74 73	msgHh4                      BYTE        LF, "hits: ", 0
	   3A 20 00
 000003F6 0A 62 6C 6F 77	msgHh5                      BYTE        LF, "blows: ", 0
	   73 3A 20 00
 000003FF 20 00			msgSpace                    BYTE        " ", 0

 00000401			userArray                   DWORD       4 DUP(?)
 00000411 0000000F		currX                       DWORD       15              ; Helper var for GetUserCode. Stores current X coordinate. FOR START OF GAME, SET TO 7
 00000415 00000007		currY                       DWORD       7               ; Helper var for GetUserCode. Stores current Y coordinate. FOR START OF GAME, SET TO 7
 00000419 00000000		currIndex                   DWORD       0               ; Helper var for GetUserCode. Will store current array index.




 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			setup:
				;
				; Runs functions that set the environment to expected
				; --------------------------------------------------------
 00000000  9B DB E3		finit
 00000003  E8 00000000 E	call            Randomize

 00000008  6A 08		push            8
 0000000A  E8 000001E4		call            SetColorFromPalette

				; --------------------------------------------------------
 0000000F			gameplay:
				;
				; Runs the gameloop TODO contains test code right now
				; --------------------------------------------------------

 0000000F  E8 000000F2		call            DrawNewGameboard

				mPlacePeg       7, 7, 2
 00000014  52		     2	    push        EDX
 00000015  B2 07	     2	    mov         dl, 7
 00000017  FE CA	     2	    dec         dl
 00000019  B6 07	     2	    mov         dh, 7
 0000001B  FE CE	     2	    dec         dh
 0000001D  E8 00000000 E     2	    call        Gotoxy
 00000022  5A		     2	    pop         EDX
 00000023  6A 02	     1	    push        2
 00000025  E8 000001C9	     1	    call        SetColorFromPalette
 0000002A  52		     2	    push        EDX
 0000002B  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000030  E8 00000000 E     2	    call        WriteString
 00000035  5A		     2	    pop         EDX
				mPlacePeg       7, 9, 5
 00000036  52		     2	    push        EDX
 00000037  B2 07	     2	    mov         dl, 7
 00000039  FE CA	     2	    dec         dl
 0000003B  B6 09	     2	    mov         dh, 9
 0000003D  FE CE	     2	    dec         dh
 0000003F  E8 00000000 E     2	    call        Gotoxy
 00000044  5A		     2	    pop         EDX
 00000045  6A 05	     1	    push        5
 00000047  E8 000001A7	     1	    call        SetColorFromPalette
 0000004C  52		     2	    push        EDX
 0000004D  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000052  E8 00000000 E     2	    call        WriteString
 00000057  5A		     2	    pop         EDX
				mPlacePeg       7, 11, 1
 00000058  52		     2	    push        EDX
 00000059  B2 07	     2	    mov         dl, 7
 0000005B  FE CA	     2	    dec         dl
 0000005D  B6 0B	     2	    mov         dh, 11
 0000005F  FE CE	     2	    dec         dh
 00000061  E8 00000000 E     2	    call        Gotoxy
 00000066  5A		     2	    pop         EDX
 00000067  6A 01	     1	    push        1
 00000069  E8 00000185	     1	    call        SetColorFromPalette
 0000006E  52		     2	    push        EDX
 0000006F  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000074  E8 00000000 E     2	    call        WriteString
 00000079  5A		     2	    pop         EDX
				mPlacePeg       7, 13, 4
 0000007A  52		     2	    push        EDX
 0000007B  B2 07	     2	    mov         dl, 7
 0000007D  FE CA	     2	    dec         dl
 0000007F  B6 0D	     2	    mov         dh, 13
 00000081  FE CE	     2	    dec         dh
 00000083  E8 00000000 E     2	    call        Gotoxy
 00000088  5A		     2	    pop         EDX
 00000089  6A 04	     1	    push        4
 0000008B  E8 00000163	     1	    call        SetColorFromPalette
 00000090  52		     2	    push        EDX
 00000091  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000096  E8 00000000 E     2	    call        WriteString
 0000009B  5A		     2	    pop         EDX

				mPlaceFeedback  7, 4, HIT
 0000009C  6A 07	     1	    push        7
 0000009E  6A 04	     1	    push        4
 000000A0  6A 02	     1	    push        HIT
 000000A2  E8 00000186	     1	    call        PlaceFeedback
				mPlaceFeedback  8, 4, BLOW
 000000A7  6A 08	     1	    push        8
 000000A9  6A 04	     1	    push        4
 000000AB  6A 01	     1	    push        BLOW
 000000AD  E8 0000017B	     1	    call        PlaceFeedback
				mPlaceFeedback  7, 5, BLOW
 000000B2  6A 07	     1	    push        7
 000000B4  6A 05	     1	    push        5
 000000B6  6A 01	     1	    push        BLOW
 000000B8  E8 00000170	     1	    call        PlaceFeedback

 000000BD  E8 00000277		call            PrintSolution

 000000C2  6A 00		push            FALSE
 000000C4  6A 01		push            TYPE solution
 000000C6  68 00000365 R	push            OFFSET solution
 000000CB  E8 000000BD		call            GenerateCode



 000000D0  68 00000401 R	push            OFFSET userArray
 000000D5  E8 00000311		call            GetUserCode


				; End of program steps
				mGotoXY         1, 20
 000000DA  52		     1	    push        EDX
 000000DB  B2 01	     1	    mov         dl, 1
 000000DD  FE CA	     1	    dec         dl
 000000DF  B6 14	     1	    mov         dh, 20
 000000E1  FE CE	     1	    dec         dh
 000000E3  E8 00000000 E     1	    call        Gotoxy
 000000E8  5A		     1	    pop         EDX

 000000E9  6A 08		push            8
 000000EB  E8 00000103		call            SetColorFromPalette

				; comparing uArray and solArray elements - updates hits and blows
 000000F0  68 00000391 R	push            OFFSET blows
 000000F5  68 0000038D R	push            OFFSET hits
 000000FA  E8 000001A5		call            CheckSimilar

				invoke EXITProcess, 0		; exit to operating system
 000000FF  6A 00	   *	    push   +000000000h
 00000101  E8 00000000 E   *	    call   ExitProcess
 00000106			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 00000106			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 00000106  51			push        ECX

 00000107  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 0000010C  52		     1	    push        EDX
 0000010D  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 00000112  E8 00000000 E     1	    call        WriteString
 00000117  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 00000118  52		     1	    push        EDX
 00000119  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 0000011E  E8 00000000 E     1	    call        WriteString
 00000123  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 00000124  52		     1	    push        EDX
 00000125  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 0000012A  E8 00000000 E     1	    call        WriteString
 0000012F  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000130  52		     1	    push        EDX
 00000131  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000136  E8 00000000 E     1	    call        WriteString
 0000013B  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 0000013C  52		     1	    push        EDX
 0000013D  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000142  E8 00000000 E     1	    call        WriteString
 00000147  5A		     1	    pop         EDX

 00000148  B9 00000004		mov         ECX, ROWS
 0000014D			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 0000014D  52		     1	    push        EDX
 0000014E  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000153  E8 00000000 E     1	    call        WriteString
 00000158  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 00000159  52		     1	    push        EDX
 0000015A  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 0000015F  E8 00000000 E     1	    call        WriteString
 00000164  5A		     1	    pop         EDX

 00000165  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 00000167  52		     1	    push        EDX
 00000168  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 0000016D  E8 00000000 E     1	    call        WriteString
 00000172  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 00000173  52		     1	    push        EDX
 00000174  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000179  E8 00000000 E     1	    call        WriteString
 0000017E  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 0000017F  52		     1	    push        EDX
 00000180  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 00000185  E8 00000000 E     1	    call        WriteString
 0000018A  5A		     1	    pop         EDX

 0000018B  59			pop         ECX

 0000018C  C3			ret
 0000018D			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 0000018D			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code
				; -------------------------------------------------------- -
 0000018D  55			push        EBP
 0000018E  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000190  50			push        EAX
 00000191  53			push        EBX
 00000192  51			push        ECX
 00000193  52			push        EDX

 00000194			_stackFrame:
 00000194  B9 00000004		    mov     ECX, CODE_LENGTH
 00000199  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 0000019C  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 0000019F  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 000001A2			_generateCode:
 000001A2  51			    push    ECX                     ; Preserve loop counter

				    mArand  1, COLORS, ECX          ; Get a random number and store to EDX
 000001A3  50		     1	    push        EAX
 000001A4  B8 00000008	     1	    mov         EAX, COLORS
 000001A9  83 E8 01	     1	    sub         EAX, 1
 000001AC  40		     1	    inc         EAX
 000001AD  E8 00000000 E     1	    call        RandomRange
 000001B2  83 C0 01	     1	    add         EAX, 1
 000001B5  8B C8	     1	    mov         ECX, EAX
 000001B7  58		     1	    pop         EAX

 000001B8  83 FA 01		    cmp     EDX, TRUE
 000001BB  74 0B		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 000001BD  8B D1		    mov     EDX, ECX                ; EDX is now random number
 000001BF  59			    pop     ECX                     ; ECX is loop counter again

				    ; TODO check code, can probably somehow use the code checking proc that needs to be written for gameplay

 000001C0  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 000001C1  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 000001C3  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 000001C8			    _allowDuplicates:
 000001C8  89 08		    mov     [EAX], ECX              ; Store in next index

 000001CA  59			    pop     ECX                     ; restore loop counter

 000001CB  03 C3		    add     EAX, EBX                ; Increment index

 000001CD  E2 D3		    loop    _generateCode

 000001CF  5A			pop         EDX
 000001D0  59			pop         ECX
 000001D1  5B			pop         EBX
 000001D2  58			pop         EAX
 000001D3  5D			pop         EBP

 000001D4  C2 000C		ret         12
 000001D7			GenerateCode ENDP


				; -------------------------------------------------------- -
 000001D7			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000001D7  55			push                EBP
 000001D8  8B EC		mov                 EBP, ESP

 000001DA  53			push                EBX
 000001DB  51			push                ECX
 000001DC  52			push                EDX

 000001DD			_stackFrame:
 000001DD  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000001E0  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000001E3  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000001E6  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000001E8  03 D8		add                 EBX, EAX                ; Get to array[n]
 000001EA  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000001EC  5A			pop                 EDX
 000001ED  59			pop                 ECX
 000001EE  5B			pop                 EBX

 000001EF  5D			pop                 EBP

 000001F0  C2 000C		ret 12
 000001F3			ArrayAt ENDP

				; -------------------------------------------------------- -
 000001F3			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000001F3  55			push                EBP
 000001F4  8B EC		mov                 EBP, ESP

 000001F6  50			push                EAX
 000001F7  53			push                EBX
 000001F8  51			push                ECX

 000001F9			_stackFrame:
 000001F9  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000001FC  51			push                ECX
 000001FD  68 000002A7 R	push                OFFSET MAP_background_color
 00000202  6A 04		push                TYPE MAP_background_color
 00000204  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 00000209  BB 00000010		mov                 EBX, 16
 0000020E  F7 E3		mul                 EBX

				; Preserve background in EBX
 00000210  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 00000212  51			push                ECX
 00000213  68 000002D3 R	push                OFFSET MAP_text_color
 00000218  6A 04		push                TYPE MAP_text_color
 0000021A  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 0000021F  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000221  E8 00000000 E	call                SetTextColor

 00000226  59			pop                 ECX
 00000227  5B			pop                 EBX
 00000228  58			pop                 EAX

 00000229  5D			pop                 EBP

 0000022A  C2 0004		ret 4
 0000022D			SetColorFromPalette ENDP

				; --------------------------------------------------------
 0000022D			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
;               call
				;
				; --------------------------------------------------------
 0000022D  55			push            EBP
 0000022E  8B EC		mov             EBP, ESP

 00000230  50			push            EAX
 00000231  53			push            EBX
 00000232  51			push            ECX
 00000233  52			push            EDX

 00000234			_stackFrame:
 00000234  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 00000237  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 0000023A  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 0000023D			_moveCursor:
 0000023D  50			    push        EAX

 0000023E  8B C3		    mov         EAX, EBX                ; insert y
 00000240  48			    dec         EAX                     ; shift back for 1-indexing
 00000241  BB 00000100		    mov         EBX, 256
 00000246  F7 E3		    mul         EBX                     ; shift y to subregister AH

 00000248  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 0000024A  48			    dec         EAX                     ; shift back for 1-indexing

 0000024B  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 0000024D  E8 00000000 E	    call        GotoXY
 00000252  58			    pop         EAX

 00000253  83 F8 02		cmp             EAX, HIT
 00000256  74 2F		je              _hit

 00000258  83 F8 01		cmp             EAX, BLOW
 0000025B  74 15		je              _blow

 0000025D			_miss:
 0000025D  6A 08		    push        8
 0000025F  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 00000264  52		     1	    push        EDX
 00000265  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 0000026A  E8 00000000 E     1	    call        WriteString
 0000026F  5A		     1	    pop         EDX
 00000270  EB 2A		    jmp         _done
 00000272			_blow:
 00000272  6A 09		    push        9
 00000274  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 00000279  52		     1	    push        EDX
 0000027A  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 0000027F  E8 00000000 E     1	    call        WriteString
 00000284  5A		     1	    pop         EDX
 00000285  EB 15		    jmp         _done
 00000287			_hit:
 00000287  6A 0A		    push        10
 00000289  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 0000028E  52		     1	    push        EDX
 0000028F  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 00000294  E8 00000000 E     1	    call        WriteString
 00000299  5A		     1	    pop         EDX
 0000029A  EB 00		    jmp         _done

 0000029C			_done:

 0000029C  5A			pop             EDX
 0000029D  59			pop             ECX
 0000029E  5B			pop             EBX
 0000029F  58			pop             EAX

 000002A0  5D			pop             EBP

 000002A1  C2 000C		ret 12
 000002A4			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 000002A4			CheckSimilar PROC
				; Author:           Hla Htun
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have uArray and solArray as global variables
				;                   Both of the arrays must have a size of 4
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 000002A4  55			    push    EBP
 000002A5  8B EC		    mov     EBP, ESP

 000002A7  B9 00000000		    mov     ECX, 0
 000002AC			    PrintuArray:
 000002AC  51			        push    ECX
 000002AD  68 00000395 R	        push    OFFSET uArray
 000002B2  6A 04		        push    TYPE uArray
 000002B4  E8 FFFFFF1E		        call    ArrayAt
 000002B9  A3 000003B5 R	        mov     helperVar1, EAX

 000002BE  51			        push    ECX
 000002BF  68 000003A5 R	        push    OFFSET solArray
 000002C4  6A 04		        push    TYPE solArray
 000002C6  E8 FFFFFF0C		        call    ArrayAt
 000002CB  8B 1D 000003B5 R	        mov     EBX, helperVar1
 000002D1  3B D8		        cmp     EBX, EAX
 000002D3  74 02		        JE      isAHit
 000002D5  EB 07		        JMP     notAHit
 000002D7			        isAHit:
 000002D7  83 05 0000038D R	            add hits, 1
	   01

 000002DE			        notAHit:
				            ; ECX => i
				            ; EBX => j
 000002DE  A3 000003B5 R	            mov     helperVar1, EAX
 000002E3  8B 1D 0000038D R	            mov     EBX, hits
 000002E9			            loop2ndArray:
 000002E9  53			                push    EBX
 000002EA  68 00000395 R	                push    OFFSET uArray
 000002EF  6A 04		                push    TYPE uArray
 000002F1  E8 FFFFFEE1		                call    ArrayAt
 000002F6  3B 05 000003B5 R	                cmp     EAX, helperVar1
 000002FC  74 0A		                JE      isAMatch
 000002FE  83 FB 03		                cmp     EBX, 3
 00000301  74 0E		                JE      outOfisThisInArray
 00000303  83 C3 01		                add     EBX, 1
 00000306  EB E1		                JMP     loop2ndArray

 00000308			            isAMatch:
 00000308  83 05 000003B9 R	                add     matches, 1
	   01
 0000030F  EB 00		                JMP     outOfisThisInArray


 00000311			        outOfisThisInArray:
 00000311  83 F9 03		            cmp     ECX, 3
 00000314  74 05		            JE      outOfPrintuArray
 00000316  83 C1 01		            add     ECX, 1
 00000319  EB 91		            JMP     PrintuArray

 0000031B			outOfPrintuArray:
 0000031B  8B 5D 08		    mov     EBX, [EBP + 8]
 0000031E  A1 0000038D R	    mov     EAX, hits
 00000323  89 03		    mov     [EBX], EAX      ; saving to hits variable

 00000325  A1 000003B9 R	    mov     EAX, matches
 0000032A  2B 05 0000038D R	    sub     EAX, hits
 00000330  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000333  89 03		    mov     [EBX], EAX      ; saving to blows variable

 00000335  5D			    pop     EBP
 00000336  C2 0008		    ret     8
 00000339			CheckSimilar ENDP


				; -------------------------------------------------------- -
 00000339			PrintSolution PROC
				; Author:           Cameron Kroeker
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -

 00000339  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 0000033E  0F B6 87		movzx EAX, solution[EDI]
	   00000365 R
				mPlacePeg       75, 7, EAX
 00000345  52		     2	    push        EDX
 00000346  B2 4B	     2	    mov         dl, 75
 00000348  FE CA	     2	    dec         dl
 0000034A  B6 07	     2	    mov         dh, 7
 0000034C  FE CE	     2	    dec         dh
 0000034E  E8 00000000 E     2	    call        Gotoxy
 00000353  5A		     2	    pop         EDX
 00000354  50		     1	    push        EAX
 00000355  E8 FFFFFE99	     1	    call        SetColorFromPalette
 0000035A  52		     2	    push        EDX
 0000035B  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000360  E8 00000000 E     2	    call        WriteString
 00000365  5A		     2	    pop         EDX

 00000366  0F B6 87		movzx EAX, solution[EDI+1]
	   00000366 R
				mPlacePeg       75, 9, EAX
 0000036D  52		     2	    push        EDX
 0000036E  B2 4B	     2	    mov         dl, 75
 00000370  FE CA	     2	    dec         dl
 00000372  B6 09	     2	    mov         dh, 9
 00000374  FE CE	     2	    dec         dh
 00000376  E8 00000000 E     2	    call        Gotoxy
 0000037B  5A		     2	    pop         EDX
 0000037C  50		     1	    push        EAX
 0000037D  E8 FFFFFE71	     1	    call        SetColorFromPalette
 00000382  52		     2	    push        EDX
 00000383  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000388  E8 00000000 E     2	    call        WriteString
 0000038D  5A		     2	    pop         EDX

 0000038E  0F B6 87		movzx EAX, solution[EDI+2]
	   00000367 R
				mPlacePeg       75, 11, EAX
 00000395  52		     2	    push        EDX
 00000396  B2 4B	     2	    mov         dl, 75
 00000398  FE CA	     2	    dec         dl
 0000039A  B6 0B	     2	    mov         dh, 11
 0000039C  FE CE	     2	    dec         dh
 0000039E  E8 00000000 E     2	    call        Gotoxy
 000003A3  5A		     2	    pop         EDX
 000003A4  50		     1	    push        EAX
 000003A5  E8 FFFFFE49	     1	    call        SetColorFromPalette
 000003AA  52		     2	    push        EDX
 000003AB  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003B0  E8 00000000 E     2	    call        WriteString
 000003B5  5A		     2	    pop         EDX

 000003B6  0F B6 87		movzx EAX, solution[EDI+3]
	   00000368 R
				mPlacePeg       75, 13, EAX
 000003BD  52		     2	    push        EDX
 000003BE  B2 4B	     2	    mov         dl, 75
 000003C0  FE CA	     2	    dec         dl
 000003C2  B6 0D	     2	    mov         dh, 13
 000003C4  FE CE	     2	    dec         dh
 000003C6  E8 00000000 E     2	    call        Gotoxy
 000003CB  5A		     2	    pop         EDX
 000003CC  50		     1	    push        EAX
 000003CD  E8 FFFFFE21	     1	    call        SetColorFromPalette
 000003D2  52		     2	    push        EDX
 000003D3  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003D8  E8 00000000 E     2	    call        WriteString
 000003DD  5A		     2	    pop         EDX


				;Set color back to White
 000003DE  6A 08		push            8
 000003E0  E8 FFFFFE0E		call            SetColorFromPalette


 000003E5  B8 00000000		mov EAX, 0
 000003EA  C3			ret
 000003EB			PrintSolution ENDP


				; -------------------------------------------------------- -
 000003EB			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into userArray
				;
				; Helper Variables: currX, currIndex, userArray
				;
				; Parameters:       push OFFSET array
				;                   call 
				;                   
				; Postconditions:   Updated userArray
				; -------------------------------------------------------- -
 000003EB  55			push            EBP
 000003EC  8B EC		mov             EBP, ESP

 000003EE  50			push            EAX
 000003EF  53			push            EBX
 000003F0  51			push            ECX
 000003F1  52			push            EDX

 000003F2			_init_variables:
 000003F2  8B 7D 08		    mov             EDI, [EBP + 8]      ; Array offset 
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be
 000003F5  52		     1	    push        EDX
 000003F6  B2 01	     1	    mov         dl, 1
 000003F8  FE CA	     1	    dec         dl
 000003FA  B6 11	     1	    mov         dh, 17
 000003FC  FE CE	     1	    dec         dh
 000003FE  E8 00000000 E     1	    call        Gotoxy
 00000403  5A		     1	    pop         EDX
				                                        ; displayed.
 00000404			_string:
				    mPrint          selectColor
 00000404  52		     1	    push        EDX
 00000405  BA 00000318 R     1	    mov         EDX, OFFSET selectColor
 0000040A  E8 00000000 E     1	    call        WriteString
 0000040F  5A		     1	    pop         EDX

				                  

				; Initialize the screen and ECX to show a color before the user hits the arrow keys. 
 00000410			_preloop:
 00000410  A1 00000411 R	mov             EAX, currX              ; init current x
 00000415  8B 1D 00000415 R	mov             EBX, currY              ; init current y
 0000041B  B9 00000000		mov             ECX, 0                  ; init red color
				mPlacePeg       al, bl, 0               ; place peg on coordinate
 00000420  52		     2	    push        EDX
 00000421  8A D0	     2	    mov         dl, al
 00000423  FE CA	     2	    dec         dl
 00000425  8A F3	     2	    mov         dh, bl
 00000427  FE CE	     2	    dec         dh
 00000429  E8 00000000 E     2	    call        Gotoxy
 0000042E  5A		     2	    pop         EDX
 0000042F  6A 00	     1	    push        0
 00000431  E8 FFFFFDBD	     1	    call        SetColorFromPalette
 00000436  52		     2	    push        EDX
 00000437  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000043C  E8 00000000 E     2	    call        WriteString
 00000441  5A		     2	    pop         EDX

				;  loop until user inputs a code
 00000442			_loop:
 00000442  B8 00000032		    mov             EAX, 50
 00000447  E8 00000000 E	    call            Delay
 0000044C  E8 00000000 E	    call            ReadKey
 00000451  74 EF		    jz              _loop

 00000453  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx
 00000456  83 FA 25		cmp             EDX, 37                 ; left
 00000459  74 66		je              _decrease



 0000045B  83 FA 27		cmp             EDX, 39                 ; right
 0000045E  74 24		je              _increase

 00000460  83 FA 0D		cmp             EDX, 13                 ; enter
 00000463  0F 84 00000098	je              _enter

 00000469  83 FA 28		cmp             EDX, 40                 ; down
 0000046C  0F 84 0000008F	je              _enter

 00000472  83 FA 26		cmp             EDX, 38                 ; up
 00000475  0F 84 000000AC	je              _up

 0000047B  83 FA 08		cmp             EDX, 8                  ; backspace
 0000047E  0F 84 000000A3	je              _up

 00000484			_increase:

 00000484  83 C1 01		add             ECX, 1                  ; increment color map
 00000487  83 F9 08		cmp             ECX, 8                  ; check if current index is too high
 0000048A  7D 02		jge             _resetHigh
 0000048C  EB 05		jmp             _getColorHigh   

 0000048E			    _resetHigh: 
 0000048E  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 00000493			    _getColorHigh:
 00000493  A1 00000411 R	    mov             EAX, currX          ; move the current x index into EAX so mPlacePeg can use AL 
 00000498  8B 1D 00000415 R	    mov             EBX, currY          ; move current y index into EBX so mPlacePeg can use BL
				    mPlacePeg       al, bl, ECX         
 0000049E  52		     2	    push        EDX
 0000049F  8A D0	     2	    mov         dl, al
 000004A1  FE CA	     2	    dec         dl
 000004A3  8A F3	     2	    mov         dh, bl
 000004A5  FE CE	     2	    dec         dh
 000004A7  E8 00000000 E     2	    call        Gotoxy
 000004AC  5A		     2	    pop         EDX
 000004AD  51		     1	    push        ECX
 000004AE  E8 FFFFFD40	     1	    call        SetColorFromPalette
 000004B3  52		     2	    push        EDX
 000004B4  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000004B9  E8 00000000 E     2	    call        WriteString
 000004BE  5A		     2	    pop         EDX
				                                        ; ^ User's previous choices are displayed (currX, 19)
 000004BF  EB 81		jmp             _loop                   ; Loop until a new key press

 000004C1			_decrease:

 000004C1  83 F9 00		cmp             ECX, 0
 000004C4  74 05		je              _resetLow
 000004C6  83 E9 01		sub             ECX, 1
 000004C9  EB 05		jmp             _getColorLow
 000004CB			    _resetLow:
 000004CB  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 000004D0			    _getColorLow:
 000004D0  A1 00000411 R	    mov             EAX, currX          ; move current x index into EAX so it can be used in mPlacePeg
 000004D5  8B 1D 00000415 R	    mov             EBX, currY          ; move current y index to EBX to be used in mPlacePeg
				    mPlacePeg       al, bl, ECX         
 000004DB  52		     2	    push        EDX
 000004DC  8A D0	     2	    mov         dl, al
 000004DE  FE CA	     2	    dec         dl
 000004E0  8A F3	     2	    mov         dh, bl
 000004E2  FE CE	     2	    dec         dh
 000004E4  E8 00000000 E     2	    call        Gotoxy
 000004E9  5A		     2	    pop         EDX
 000004EA  51		     1	    push        ECX
 000004EB  E8 FFFFFD03	     1	    call        SetColorFromPalette
 000004F0  52		     2	    push        EDX
 000004F1  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000004F6  E8 00000000 E     2	    call        WriteString
 000004FB  5A		     2	    pop         EDX
				                                        ; ^ User's previous choices are displayed (currX, 19)
 000004FC  E9 FFFFFF41		jmp             _loop                   ; Loop until a new key press

 00000501			_enter:
 00000501  89 0F		mov             [EDI], ECX              ; add color number into current index         
 00000503  83 C7 04		add             EDI, 4                  ; increment current index
 00000506  A1 00000415 R	mov             EAX, currY              ; move current y coordinate into eax
 0000050B  83 C0 02		add             EAX, 2                  ; incease it by 2
 0000050E  A3 00000415 R	mov             currY, EAX              ; store updated currY
 00000513  FF 05 00000419 R	inc             currIndex               ; increment current index in userArray
 00000519  83 3D 00000419 R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 00000520  7D 30		jge             _end
 00000522  E9 FFFFFEE9		jmp             _preloop                ; loop to get a new number

 00000527			_up:
 00000527  A1 00000415 R	    mov         EAX, currY              
 0000052C  83 F8 07		    cmp         EAX, 7                  ; compare current y coord with 7. If it's 7, just go back to looping.
 0000052F  0F 84 FFFFFF0D	    je          _loop                   
 00000535  83 E8 02		    sub         EAX, 2                  ; subtract 2 from currY to get to peg above currY
 00000538  A3 00000415 R	    mov         currY, EAX
 0000053D  83 EF 04		    sub         EDI, 4                  ; move array pointer back to previous entry
 00000540  A1 00000419 R	    mov         EAX, currIndex          
 00000545  83 E8 01		    sub         EAX, 1                  ; subtract 1 from currIndex
 00000548  A3 00000419 R	    mov         currIndex, EAX          
 0000054D  E9 FFFFFEBE		    jmp         _preloop                ; go to preloop


 00000552			_end:                                   ; break out of loop and return
 00000552  6A 08		push            8
 00000554  E8 FFFFFC9A		call            SetColorFromPalette     ; set color back to white

 00000559  C7 05 00000415 R	mov             currY, 7                ; reset currY for next round
	   00000007
 00000563  A1 00000411 R	mov             EAX, currX              ; set currX to currX + 8 to get next round x coordinate
 00000568  83 C0 08		add             EAX, 8

 0000056B  5A			pop             EDX
 0000056C  59			pop             ECX
 0000056D  5B			pop             EBX
 0000056E  58			pop             EAX
 0000056F  5D			pop             EBP
 00000570  C2 0004		ret 4
 00000573			GetUserCode ENDP


				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/07/23 15:56:45
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000041D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000573 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000001D7 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001DD _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 000002A4 _TEXT	Length= 00000095 Public STDCALL
  PrintuArray  . . . . . . . . .	L Near	 000002AC _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 000002D7 _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 000002DE _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 000002E9 _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 00000308 _TEXT	
  outOfisThisInArray . . . . . .	L Near	 00000311 _TEXT	
  outOfPrintuArray . . . . . . .	L Near	 0000031B _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 00000106 _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 0000014D _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 0000018D _TEXT	Length= 0000004A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000194 _TEXT	
  _generateCode  . . . . . . . .	L Near	 000001A2 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 000001C8 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 000003EB _TEXT	Length= 00000188 Public STDCALL
  _init_variables  . . . . . . .	L Near	 000003F2 _TEXT	
  _string  . . . . . . . . . . .	L Near	 00000404 _TEXT	
  _preloop . . . . . . . . . . .	L Near	 00000410 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000442 _TEXT	
  _increase  . . . . . . . . . .	L Near	 00000484 _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 0000048E _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 00000493 _TEXT	
  _decrease  . . . . . . . . . .	L Near	 000004C1 _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 000004CB _TEXT	
  _getColorLow . . . . . . . . .	L Near	 000004D0 _TEXT	
  _enter . . . . . . . . . . . .	L Near	 00000501 _TEXT	
  _up  . . . . . . . . . . . . .	L Near	 00000527 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000552 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 0000022D _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000234 _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 0000023D _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 0000025D _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 00000272 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 00000287 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 0000029C _TEXT	
PrintSolution  . . . . . . . . .	P Near	 00000339 _TEXT	Length= 000000B2 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000001F3 _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001F9 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000106 Public STDCALL
  setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameplay . . . . . . . . . . .	L Near	 0000000F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 00000391 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 00000419 _DATA	
currX  . . . . . . . . . . . . .	DWord	 00000411 _DATA	
currY  . . . . . . . . . . . . .	DWord	 00000415 _DATA	
current_round  . . . . . . . . .	Byte	 00000364 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	Byte	 00000369 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000002FF _DATA	
helperVar1 . . . . . . . . . . .	DWord	 000003B5 _DATA	
hits . . . . . . . . . . . . . .	DWord	 0000038D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 000003B9 _DATA	
msgHh1 . . . . . . . . . . . . .	Byte	 000003BD _DATA	
msgHh2 . . . . . . . . . . . . .	Byte	 000003CF _DATA	
msgHh3 . . . . . . . . . . . . .	Byte	 000003DC _DATA	
msgHh4 . . . . . . . . . . . . .	Byte	 000003EE _DATA	
msgHh5 . . . . . . . . . . . . .	Byte	 000003F6 _DATA	
msgSpace . . . . . . . . . . . .	Byte	 000003FF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectColor  . . . . . . . . . .	Byte	 00000318 _DATA	
solArray . . . . . . . . . . . .	DWord	 000003A5 _DATA	
solution . . . . . . . . . . . .	Byte	 00000365 _DATA	
uArray . . . . . . . . . . . . .	DWord	 00000395 _DATA	
userArray  . . . . . . . . . . .	DWord	 00000401 _DATA	
user_guess . . . . . . . . . . .	Byte	 00000389 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
