Microsoft (R) Macro Assembler Version 14.36.32532.0	    06/11/23 16:30:39
Mastermind			(finalProject.asm	     Page 1 - 1


				 TITLE Mastermind			(finalProject.asm)

				; Author(s) : Trenton Young, Hla Htun, Brayden, Cameron Kroeker
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE    = 1
 = 00000000			FALSE   = 0

 = 00000002			HIT     = 2
 = 00000001			BLOW    = 1
 = 00000000			MISS    = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS      = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses

 = 00000064			OUT_OF_RANGE_1 = 100
 = 000000C8			OUT_OF_RANGE_2 = 200

				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range [_low.._high] from Irvine's lib,
				;               output is stored in given register
				;
				; Use:          _low (inclusive) and _high  (inclusive) may be
				;               literals, _target may be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM


 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 79			YES                         BYTE        "y"
 00000300 6E			NO                          BYTE        "n"
 00000301 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND, ", 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 2C 20 00
 00000319 21 0A 0A 00		exclamation                 BYTE        "!", LF, LF, 0
 0000031D 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00
 00000369 49 6E 76 61 6C	invalidCharMsg              BYTE        "Invalid input, try again.", LF, 0
	   69 64 20 69 6E
	   70 75 74 2C 20
	   74 72 79 20 61
	   67 61 69 6E 2E
	   0A 00

 00000384 54 68 65 6D 27	rules_placeholder           BYTE        "Them's the rules.", CR, LF, 0
	   73 20 74 68 65
	   20 72 75 6C 65
	   73 2E 0D 0A 00

 00000398 57 6F 75 6C 64	prompt_rules                BYTE        "Would you like me to tell you the rules of MASTERMIND? (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   6D 65 20 74 6F
	   20 74 65 6C 6C
	   20 79 6F 75 20
	   74 68 65 20 72
	   75 6C 65 73 20
	   6F 66 20 4D 41
	   53 54 45 52 4D
	   49 4E 44 3F 20
	   28 79 2F 6E 29
	   00
 000003D5 57 6F 75 6C 64	prompt_duplicates           BYTE        "Would you like to allow duplicates in the solution code?", CR, LF, "   WARNING: This significantly increases the challenge of the game. (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 61 6C
	   6C 6F 77 20 64
	   75 70 6C 69 63
	   61 74 65 73 20
	   69 6E 20 74 68
	   65 20 73 6F 6C
	   75 74 69 6F 6E
	   20 63 6F 64 65
	   3F 0D 0A 20 20
	   20 57 41 52 4E
	   49 4E 47 3A 20
	   54 68 69 73 20
	   73 69 67 6E 69
	   66 69 63 61 6E
	   74 6C 79 20 69
	   6E 63 72 65 61
	   73 65 73 20 74
	   68 65 20 63 68
	   61 6C 6C 65 6E
	   67 65 20 6F 66
	   20 74 68 65 20
	   67 61 6D 65 2E
	   20 28 79 2F 6E
	   29 00

				; (Gamestate)               Variables defining gameplay

 00000459 00000000		current_round               DWORD        0

 0000045D  00000004 [		solution                    DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_2)
	    000000C8
	   ]
 0000046D  00000004 [		game_matrix                 DWORD       CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00000000
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 000004ED  00000004 [		user_guess                  DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_1)
	    00000064
	   ]

 000004FD 00000000		userHasWon                  DWORD       FALSE
 00000501 00000000		allowDuplicates             DWORD       FALSE

				; Hits and Blows            hits and blows will be stored in these variables
 00000505 00000000		hits                        DWORD       0
 00000509 00000000		blows                       DWORD       0
 0000050D 00000000		helperVar1                  DWORD       ?
 00000511 00000000		T_HelperVar                 DWORD       ?
 00000515 00000000		matches                     DWORD       ?

 00000519 00000007		currX                       DWORD       7               ; Helper var for GetUserCode. Stores current X coordinate. FOR START OF GAME, SET TO 7 ; TODO can probably be calculated on the fly (from test phase) - Trenton Young
 0000051D 00000007		currY                       DWORD       7               ; Helper var for GetUserCode. Stores current Y coordinate. FOR START OF GAME, SET TO 7
 00000521 00000000		currIndex                   DWORD       0               ; Helper var for GetUserCode. Will store current array index.

				; Game Rules
 00000525 0D 0A 52 75 6C	RULES_1                     BYTE        CR, LF, "Rules:", CR, LF, 0
	   65 73 3A 0D 0A
	   00
 00000530 20 20 20 20 2D	RULES_GAP                   BYTE        "    - ", 0
	   20 00
 00000537 54 68 65 20 70	RULES_2                     BYTE        "The program randomly places 4 pegs in a certain order", CR, LF, 0
	   72 6F 67 72 61
	   6D 20 72 61 6E
	   64 6F 6D 6C 79
	   20 70 6C 61 63
	   65 73 20 34 20
	   70 65 67 73 20
	   69 6E 20 61 20
	   63 65 72 74 61
	   69 6E 20 6F 72
	   64 65 72 0D 0A
	   00
 0000056F 59 6F 75 72 20	RULES_3                     BYTE        "Your goal is to guess the exact positions and colors of each of those pegs before you run out of attempts!", CR, LF, 0
	   67 6F 61 6C 20
	   69 73 20 74 6F
	   20 67 75 65 73
	   73 20 74 68 65
	   20 65 78 61 63
	   74 20 70 6F 73
	   69 74 69 6F 6E
	   73 20 61 6E 64
	   20 63 6F 6C 6F
	   72 73 20 6F 66
	   20 65 61 63 68
	   20 6F 66 20 74
	   68 6F 73 65 20
	   70 65 67 73 20
	   62 65 66 6F 72
	   65 20 79 6F 75
	   20 72 75 6E 20
	   6F 75 74 20 6F
	   66 20 61 74 74
	   65 6D 70 74 73
	   21 0D 0A 00
 000005DC 59 6F 75 27 6C	RULES_4                     BYTE        "You'll make guesses by selecting colors from a choice of 8 (red, gray, green, blue, yellow, cyan, magenta, brown)", CR, LF, 0
	   6C 20 6D 61 6B
	   65 20 67 75 65
	   73 73 65 73 20
	   62 79 20 73 65
	   6C 65 63 74 69
	   6E 67 20 63 6F
	   6C 6F 72 73 20
	   66 72 6F 6D 20
	   61 20 63 68 6F
	   69 63 65 20 6F
	   66 20 38 20 28
	   72 65 64 2C 20
	   67 72 61 79 2C
	   20 67 72 65 65
	   6E 2C 20 62 6C
	   75 65 2C 20 79
	   65 6C 6C 6F 77
	   2C 20 63 79 61
	   6E 2C 20 6D 61
	   67 65 6E 74 61
	   2C 20 62 72 6F
	   77 6E 29 0D 0A
	   00
 00000650 55 73 65 20 28	RULES_5                     BYTE        "Use ( <- ) left or ( -> ) right arrow keys to switch between different color choices", CR, LF, 0
	   20 3C 2D 20 29
	   20 6C 65 66 74
	   20 6F 72 20 28
	   20 2D 3E 20 29
	   20 72 69 67 68
	   74 20 61 72 72
	   6F 77 20 6B 65
	   79 73 20 74 6F
	   20 73 77 69 74
	   63 68 20 62 65
	   74 77 65 65 6E
	   20 64 69 66 66
	   65 72 65 6E 74
	   20 63 6F 6C 6F
	   72 20 63 68 6F
	   69 63 65 73 0D
	   0A 00
 000006A7 55 73 65 20 45	RULES_6                     BYTE        "Use Enter/Return key to confirm your choice", CR, LF, 0
	   6E 74 65 72 2F
	   52 65 74 75 72
	   6E 20 6B 65 79
	   20 74 6F 20 63
	   6F 6E 66 69 72
	   6D 20 79 6F 75
	   72 20 63 68 6F
	   69 63 65 0D 0A
	   00
 000006D5 59 6F 75 20 63	RULES_7                     BYTE        "You can also ( ", 24, " ) up or ( " , 25, " ) down arrow keys to go back and forth between input fields", CR, LF, 0
	   61 6E 20 61 6C
	   73 6F 20 28 20
	   18 20 29 20 75
	   70 20 6F 72 20
	   28 20 19 20 29
	   20 64 6F 77 6E
	   20 61 72 72 6F
	   77 20 6B 65 79
	   73 20 74 6F 20
	   67 6F 20 62 61
	   63 6B 20 61 6E
	   64 20 66 6F 72
	   74 68 20 62 65
	   74 77 65 65 6E
	   20 69 6E 70 75
	   74 20 66 69 65
	   6C 64 73 0D 0A
	   00
 00000730 43 6F 72 72 65	RULES_8                     BYTE        "Correct guess (right color and position) also known as a 'hit' will be displayed as 'o'", CR, LF, 0
	   63 74 20 67 75
	   65 73 73 20 28
	   72 69 67 68 74
	   20 63 6F 6C 6F
	   72 20 61 6E 64
	   20 70 6F 73 69
	   74 69 6F 6E 29
	   20 61 6C 73 6F
	   20 6B 6E 6F 77
	   6E 20 61 73 20
	   61 20 27 68 69
	   74 27 20 77 69
	   6C 6C 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   20 61 73 20 27
	   6F 27 0D 0A 00
 0000078A 53 65 6D 69 2D	RULES_9                     BYTE        "Semi-correct guess (right color but not position) also known as a 'blow' will be displayed as '*'", CR, LF, 0
	   63 6F 72 72 65
	   63 74 20 67 75
	   65 73 73 20 28
	   72 69 67 68 74
	   20 63 6F 6C 6F
	   72 20 62 75 74
	   20 6E 6F 74 20
	   70 6F 73 69 74
	   69 6F 6E 29 20
	   61 6C 73 6F 20
	   6B 6E 6F 77 6E
	   20 61 73 20 61
	   20 27 62 6C 6F
	   77 27 20 77 69
	   6C 6C 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   20 61 73 20 27
	   2A 27 0D 0A 00
 000007EE 57 72 6F 6E 67	RULES_10                    BYTE        "Wrong guess also known as a 'miss' will be displayed as '.'", CR, LF, LF, 0
	   20 67 75 65 73
	   73 20 61 6C 73
	   6F 20 6B 6E 6F
	   77 6E 20 61 73
	   20 61 20 27 6D
	   69 73 73 27 20
	   77 69 6C 6C 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 20 61 73
	   20 27 2E 27 0D
	   0A 0A 00

 0000082D 00000000		H_HelperVar1                DWORD       ?               ; Helper var for GameTurn (Place feedback loop counter)
 00000831 00000000		H_HelperVar2                DWORD       ?               ; Helper var for GameTurn (Place feedback loop counter)
 00000835 00000000		H_HelperVarX                DWORD       ?               ; Helper var for GameTurn - Holds the x coordinate for placing the feedback
 00000839 00000000		H_HelperVarY                DWORD       ?               ; Helper var for GameTurn - Holds the y coordinate for placing the feedback
 0000083D 00000000		H_HelperVarMovY             DWORD       ?               ; Helper var for GameTurn - Helps decide whether to reset X to original position or not and increment Y by 1

 00000841 00000000		hasWon                      DWORD       ?

 00000845 20 20 20 47 72	Celebration                 BYTE        "   Great job! You correctly guessed the color and position of each of the pegs!", CR, LF, 0
	   65 61 74 20 6A
	   6F 62 21 20 59
	   6F 75 20 63 6F
	   72 72 65 63 74
	   6C 79 20 67 75
	   65 73 73 65 64
	   20 74 68 65 20
	   63 6F 6C 6F 72
	   20 61 6E 64 20
	   70 6F 73 69 74
	   69 6F 6E 20 6F
	   66 20 65 61 63
	   68 20 6F 66 20
	   74 68 65 20 70
	   65 67 73 21 0D
	   0A 00

 00000897 20 20 20 55 68	Loser                       BYTE        "   Uh..oh! You've ran out of attempts :(", CR, LF, 0
	   2E 2E 6F 68 21
	   20 59 6F 75 27
	   76 65 20 72 61
	   6E 20 6F 75 74
	   20 6F 66 20 61
	   74 74 65 6D 70
	   74 73 20 3A 28
	   0D 0A 00

 000008C2 20 20 20 57 6F	prompt_tryAgain             BYTE        "   Would you like to try again? (y/n)", CR, LF, 0
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 74 72 79 20
	   61 67 61 69 6E
	   3F 20 28 79 2F
	   6E 29 0D 0A 00

 000008EA 0A 54 68 61 6E	farewell                    BYTE        LF, "Thank you for playing our game!" , LF, "Programmed by Trenton Young, Brayden, Hla Htun and Cameron Kroeker", LF, LF, 0
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   70 6C 61 79 69
	   6E 67 20 6F 75
	   72 20 67 61 6D
	   65 21 0A 50 72
	   6F 67 72 61 6D
	   6D 65 64 20 62
	   79 20 54 72 65
	   6E 74 6F 6E 20
	   59 6F 75 6E 67
	   2C 20 42 72 61
	   79 64 65 6E 2C
	   20 48 6C 61 20
	   48 74 75 6E 20
	   61 6E 64 20 43
	   61 6D 65 72 6F
	   6E 20 4B 72 6F
	   65 6B 65 72 0A
	   0A 00

 00000950 50 6C 65 61 73	prompt_userName             BYTE        "Please type your name: ", 0
	   65 20 74 79 70
	   65 20 79 6F 75
	   72 20 6E 61 6D
	   65 3A 20 00
 00000968 00			userName                    BYTE        ?

 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			ProgramSetup:
				;
				; Runs functions that set the environment to expected parameters,
				; seeds the random number generator, initiates the FPU, sets the
				; text and background color
				; --------------------------------------------------------
 00000000  9B DB E3		    finit
 00000003  E8 00000000 E	    call            Randomize

 00000008  6A 08		    push            8
 0000000A  E8 000003C3		    call            SetColorFromPalette


				; --------------------------------------------------------
 0000000F			InitialGreeting:
				;
				; Prompts the user for their name then greets them
				; --------------------------------------------------------
 0000000F  E8 000009FC		    call            getName
				; --------------------------------------------------------
 00000014			PromptForRules:
				;
				; Prompts the user asking if they would like the rules of the
				; game to be displayed
				; --------------------------------------------------------

 00000014  68 00000398 R	    push            OFFSET prompt_rules
 00000019  E8 00000772		    call            PromptMsg

				;   If the user does not want the rules displayed
 0000001E  E8 00000000 E	    call            Crlf
 00000023  83 F8 00		    cmp             EAX, FALSE
 00000026  0F 84 000000F0	    je              NewGamestate
 0000002C  EB 00		    JMP             DisplayRules

				; --------------------------------------------------------
 0000002E			DisplayRules:
				; Author: Hla Htun
				; Prints the rules of the game and then waits for the user to
				; press a key before continuing, to give them a chance to read
				; --------------------------------------------------------

				    ; TODO EXTRA: file IO the rules
				    ; TODO EXTRA: we could have two different messages, the initial
				    ;           print which goes into detail and a subsequent version
				    ;           which is less verbose
				    mPrint      OFFSET RULES_1
 0000002E  52		     1	    push        EDX
 0000002F  BA 00000525 R     1	    mov         EDX, OFFSET OFFSET RULES_1
 00000034  E8 00000000 E     1	    call        WriteString
 00000039  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 0000003A  52		     1	    push        EDX
 0000003B  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000040  E8 00000000 E     1	    call        WriteString
 00000045  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_2
 00000046  52		     1	    push        EDX
 00000047  BA 00000537 R     1	    mov         EDX, OFFSET OFFSET RULES_2
 0000004C  E8 00000000 E     1	    call        WriteString
 00000051  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 00000052  52		     1	    push        EDX
 00000053  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000058  E8 00000000 E     1	    call        WriteString
 0000005D  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_3
 0000005E  52		     1	    push        EDX
 0000005F  BA 0000056F R     1	    mov         EDX, OFFSET OFFSET RULES_3
 00000064  E8 00000000 E     1	    call        WriteString
 00000069  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 0000006A  52		     1	    push        EDX
 0000006B  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000070  E8 00000000 E     1	    call        WriteString
 00000075  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_4
 00000076  52		     1	    push        EDX
 00000077  BA 000005DC R     1	    mov         EDX, OFFSET OFFSET RULES_4
 0000007C  E8 00000000 E     1	    call        WriteString
 00000081  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 00000082  52		     1	    push        EDX
 00000083  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000088  E8 00000000 E     1	    call        WriteString
 0000008D  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_5
 0000008E  52		     1	    push        EDX
 0000008F  BA 00000650 R     1	    mov         EDX, OFFSET OFFSET RULES_5
 00000094  E8 00000000 E     1	    call        WriteString
 00000099  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 0000009A  52		     1	    push        EDX
 0000009B  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 000000A0  E8 00000000 E     1	    call        WriteString
 000000A5  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_6
 000000A6  52		     1	    push        EDX
 000000A7  BA 000006A7 R     1	    mov         EDX, OFFSET OFFSET RULES_6
 000000AC  E8 00000000 E     1	    call        WriteString
 000000B1  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000000B2  52		     1	    push        EDX
 000000B3  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 000000B8  E8 00000000 E     1	    call        WriteString
 000000BD  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_7
 000000BE  52		     1	    push        EDX
 000000BF  BA 000006D5 R     1	    mov         EDX, OFFSET OFFSET RULES_7
 000000C4  E8 00000000 E     1	    call        WriteString
 000000C9  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000000CA  52		     1	    push        EDX
 000000CB  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 000000D0  E8 00000000 E     1	    call        WriteString
 000000D5  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_8
 000000D6  52		     1	    push        EDX
 000000D7  BA 00000730 R     1	    mov         EDX, OFFSET OFFSET RULES_8
 000000DC  E8 00000000 E     1	    call        WriteString
 000000E1  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000000E2  52		     1	    push        EDX
 000000E3  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 000000E8  E8 00000000 E     1	    call        WriteString
 000000ED  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_9
 000000EE  52		     1	    push        EDX
 000000EF  BA 0000078A R     1	    mov         EDX, OFFSET OFFSET RULES_9
 000000F4  E8 00000000 E     1	    call        WriteString
 000000F9  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000000FA  52		     1	    push        EDX
 000000FB  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000100  E8 00000000 E     1	    call        WriteString
 00000105  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_10
 00000106  52		     1	    push        EDX
 00000107  BA 000007EE R     1	    mov         EDX, OFFSET OFFSET RULES_10
 0000010C  E8 00000000 E     1	    call        WriteString
 00000111  5A		     1	    pop         EDX

 00000112  E8 00000000 E	    call        WaitMsg
 00000117  E8 00000000 E	    call        Clrscr
				; --------------------------------------------------------
				; If the user has won the game, then they may allow for duplicates
				; in the solution code
 0000011C			NewGameState:
				;cmp                 userHasWon, TRUE
				;jne                 NewGameState
				;PromptForDuplicates:
				;
				; Allow the user to choose if they want to allow duplicate
				; colors in the code, let user know that there may be more
				; than two of any given color if they agree.
				    ; reset all variables to its initial state
 0000011C  C7 05 0000082D R	    mov             H_HelperVar1, 0
	   00000000
 00000126  C7 05 00000831 R	    mov             H_HelperVar2, 0
	   00000000
 00000130  C7 05 00000835 R	    mov             H_HelperVarX, 7
	   00000007
 0000013A  C7 05 00000839 R	    mov             H_HelperVarY, 4
	   00000004
 00000144  C7 05 0000083D R	    mov             H_HelperVarMovY, 0
	   00000000
 0000014E  C7 05 00000841 R	    mov             hasWon, 0
	   00000000
 00000158  C7 05 00000519 R	    mov             currX, 7
	   00000007
 00000162  C7 05 0000051D R	    mov             currY, 7
	   00000007
 0000016C  C7 05 00000521 R	    mov             currIndex, 0
	   00000000

 00000176  68 000003D5 R	    push            OFFSET prompt_duplicates
 0000017B  E8 00000610		    call            PromptMsg

				    ; Store the user's decision
 00000180  A3 00000501 R	    mov             allowDuplicates, EAX

				; --------------------------------------------------------
 00000185			GenerateGamestate:
				;
				; Print a new gameboard, set the round to zero, and generate a new
				; solution code
				; --------------------------------------------------------

 00000185  E8 000000DA		    call            DrawNewGameboard
 0000018A  C7 05 00000459 R	    mov             current_round, 0
	   00000000

 00000194  FF 35 00000501 R	    push            allowDuplicates
 0000019A  6A 04		    push            TYPE solution
 0000019C  68 0000045D R	    push            OFFSET solution
 000001A1  E8 00000145		    call            GenerateCode


				; --------------------------------------------------------
 000001A6  B9 00000008		mov                 ECX, ROUNDS
 000001AB			GameTurn:
				;
				; Get the user's input, check against the solution, give the
				; user feedback, and repeat until the user is out of turns or
				; guesses the solution
				; --------------------------------------------------------

				    ; Get input from the user
 000001AB  68 000004ED R	    push            OFFSET user_guess
 000001B0  E8 0000042B		    call            GetUserCode

				    ; Check the user's move against solution
 000001B5  68 00000509 R	    push            OFFSET blows
 000001BA  68 00000505 R	    push            OFFSET hits
 000001BF  E8 000002BF		    call            CheckSimilar

				    ; TODO store the guess in the game_matrix


				    ; Draws feedbacks
 000001C4  51			    push            ECX
 000001C5  E8 0000062C		    call            PlaceFeedbackGameTurn

				    ; Debug for PlaceFeedbackGameTurn and CheckSimilar
				    ;mGotoXY         1, 25
				    ;call            debugHH

 000001CA  83 3D 00000505 R	    cmp             hits, 4
	   04
 000001D1  74 22		    JE              WinnerCelebration

 000001D3  83 3D 00000459 R	    cmp             current_round, 7
	   07
 000001DA  74 40		    JE              LoserAdmonishment

				    ; If no endgame conditions are met, the user takes another turn
 000001DC  FF 05 00000459 R	    inc             current_round
 000001E2  83 05 00000519 R	    add             currX, 8
	   08
 000001E9  C7 05 00000521 R	    mov             currIndex, 0
	   00000000
 000001F3  E2 B6		    loop            GameTurn


				; --------------------------------------------------------
 000001F5			WinnerCelebration:
				; Author: Hla Htun
				; Notify the user that they have won
				; --------------------------------------------------------
				    mGotoXY     1, 19
 000001F5  52		     1	    push        EDX
 000001F6  B2 01	     1	    mov         dl, 1
 000001F8  FE CA	     1	    dec         dl
 000001FA  B6 13	     1	    mov         dh, 19
 000001FC  FE CE	     1	    dec         dh
 000001FE  E8 00000000 E     1	    call        Gotoxy
 00000203  5A		     1	    pop         EDX
				    mPrint      Celebration
 00000204  52		     1	    push        EDX
 00000205  BA 00000845 R     1	    mov         EDX, OFFSET Celebration
 0000020A  E8 00000000 E     1	    call        WriteString
 0000020F  5A		     1	    pop         EDX
 00000210  C7 05 00000841 R	    mov         hasWon, TRUE
	   00000001
 0000021A  EB 22		    JMP         PromptForPlayAgain
				; --------------------------------------------------------
 0000021C			LoserAdmonishment:
				; Author: Hla Htun
				; Notify the user that they are a loser
				; --------------------------------------------------------
 0000021C  E8 0000030D		    call PrintSolution
				    mGotoXY     1, 19
 00000221  52		     1	    push        EDX
 00000222  B2 01	     1	    mov         dl, 1
 00000224  FE CA	     1	    dec         dl
 00000226  B6 13	     1	    mov         dh, 19
 00000228  FE CE	     1	    dec         dh
 0000022A  E8 00000000 E     1	    call        Gotoxy
 0000022F  5A		     1	    pop         EDX
				    mPrint      Loser
 00000230  52		     1	    push        EDX
 00000231  BA 00000897 R     1	    mov         EDX, OFFSET Loser
 00000236  E8 00000000 E     1	    call        WriteString
 0000023B  5A		     1	    pop         EDX
 0000023C  EB 00		    JMP         PromptForPlayAgain

				; --------------------------------------------------------
 0000023E			PromptForPlayAgain:
				; Author: Hla Htun
				; Prompt the user to play the game again
				; --------------------------------------------------------
 0000023E  68 000008C2 R	    push        OFFSET prompt_tryAgain
 00000243  E8 00000548		    call        PromptMsg

 00000248  83 F8 01		    cmp         EAX, TRUE
 0000024B  0F 84 FFFFFDAF	    JE          ProgramSetup

 00000251			_Farewell:
				    mPrint      farewell
 00000251  52		     1	    push        EDX
 00000252  BA 000008EA R     1	    mov         EDX, OFFSET farewell
 00000257  E8 00000000 E     1	    call        WriteString
 0000025C  5A		     1	    pop         EDX

				invoke EXITProcess, 0		; exit to operating system
 0000025D  6A 00	   *	    push   +000000000h
 0000025F  E8 00000000 E   *	    call   ExitProcess
 00000264			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 00000264			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 00000264  51			push        ECX

 00000265  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 0000026A  52		     1	    push        EDX
 0000026B  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 00000270  E8 00000000 E     1	    call        WriteString
 00000275  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 00000276  52		     1	    push        EDX
 00000277  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 0000027C  E8 00000000 E     1	    call        WriteString
 00000281  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 00000282  52		     1	    push        EDX
 00000283  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 00000288  E8 00000000 E     1	    call        WriteString
 0000028D  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 0000028E  52		     1	    push        EDX
 0000028F  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000294  E8 00000000 E     1	    call        WriteString
 00000299  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 0000029A  52		     1	    push        EDX
 0000029B  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 000002A0  E8 00000000 E     1	    call        WriteString
 000002A5  5A		     1	    pop         EDX

 000002A6  B9 00000004		mov         ECX, ROWS
 000002AB			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 000002AB  52		     1	    push        EDX
 000002AC  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 000002B1  E8 00000000 E     1	    call        WriteString
 000002B6  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 000002B7  52		     1	    push        EDX
 000002B8  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 000002BD  E8 00000000 E     1	    call        WriteString
 000002C2  5A		     1	    pop         EDX

 000002C3  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 000002C5  52		     1	    push        EDX
 000002C6  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 000002CB  E8 00000000 E     1	    call        WriteString
 000002D0  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 000002D1  52		     1	    push        EDX
 000002D2  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 000002D7  E8 00000000 E     1	    call        WriteString
 000002DC  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 000002DD  52		     1	    push        EDX
 000002DE  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 000002E3  E8 00000000 E     1	    call        WriteString
 000002E8  5A		     1	    pop         EDX

 000002E9  59			pop         ECX

 000002EA  C3			ret
 000002EB			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 000002EB			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code,
				;                   user_guess and solution will be mutated
				; -------------------------------------------------------- -
 000002EB  55			push        EBP
 000002EC  8B EC		mov         EBP, ESP    ; register-indirect initialization

 000002EE  50			push        EAX
 000002EF  53			push        EBX
 000002F0  51			push        ECX
 000002F1  52			push        EDX

 000002F2  B8 00000000		mov         EAX, 0
 000002F7  B9 00000004		mov         ECX, CODE_LENGTH
 000002FC  C7 05 00000511 R	mov         T_HelperVar, 0
	   00000000
				;inc         ECX

 00000306			_clearCheckArrays:
 00000306  C7 80 000004ED R	    mov     user_guess[EAX], OUT_OF_RANGE_1
	   00000064
 00000310  C7 80 0000045D R	    mov     solution[EAX], OUT_OF_RANGE_2
	   000000C8

 0000031A  83 C0 04		    add     EAX, TYPE user_guess
 0000031D  E2 E7		    loop    _clearCheckArrays

 0000031F  C7 05 00000511 R	    mov     T_HelperVar, 0            ; initialize index accumulator
	   00000000

 00000329			_stackFrame:
 00000329  B9 00000004		    mov     ECX, CODE_LENGTH
 0000032E  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 00000331  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 00000334  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 00000337			_generateCode:
 00000337  8B 55 10		    mov     EDX, [EBP + 16]         ; Reclaim the duplicate flag
 0000033A  51			    push    ECX                     ; Preserve loop counter

 0000033B  50			    push    EAX
 0000033C  B8 00000008		    mov     EAX, COLORS
 00000341  48			    dec     EAX
				    mArand  0, EAX, ECX             ; Get a random number and store to ECX
 00000342  50		     1	    push        EAX
 00000343  8B C0	     1	    mov         EAX, EAX
 00000345  83 E8 00	     1	    sub         EAX, 0
 00000348  40		     1	    inc         EAX
 00000349  E8 00000000 E     1	    call        RandomRange
 0000034E  83 C0 00	     1	    add         EAX, 0
 00000351  8B C8	     1	    mov         ECX, EAX
 00000353  58		     1	    pop         EAX
 00000354  58			    pop     EAX

 00000355  83 FA 01		    cmp     EDX, TRUE
 00000358  74 4D		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 0000035A  8B D1		    mov     EDX, ECX                ; EDX is now random number
 0000035C  59			    pop     ECX                     ; ECX is loop counter again

 0000035D			    _checkCode:
 0000035D  89 15 000004ED R	        mov             user_guess[0], EDX      ; Store the current candidate in user_guess[0]

				        ; comparing user_guess(candidate, index, ?, ?) and solution(accepted codes) elements - updates hits and blows
 00000363  68 00000509 R	        push            OFFSET blows
 00000368  68 00000505 R	        push            OFFSET hits
 0000036D  E8 00000111		        call            CheckSimilar

 00000372  83 3D 00000505 R	        cmp             hits, 0
	   00
 00000379  7F BC		        jg              _generateCode
 0000037B  83 3D 00000509 R	        cmp             blows, 0
	   00
 00000382  7F B3		        jg              _generateCode       ; check if the candidate has already been selected, run generate code over if so

 00000384  53			        push            EBX
 00000385  8B 1D 00000511 R	        mov             EBX, T_HelperVar
 0000038B  89 93 0000045D R	        mov             solution[EBX], EDX  ; store the accepted candidate in the next slot of the solution array
 00000391  5B			        pop             EBX

 00000392  50			        push            EAX
 00000393  B8 00000004		        mov             EAX, TYPE user_guess
 00000398  01 05 00000511 R	        add             T_HelperVar, EAX    ; increment index accumulator
 0000039E  58			        pop             EAX


 0000039F  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 000003A0  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 000003A2  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 000003A7			    _allowDuplicates:
 000003A7  89 08		    mov     [EAX], ECX              ; Store in next index

 000003A9  59			    pop     ECX                     ; restore loop counter

 000003AA  03 C3		    add     EAX, EBX                ; Increment index

 000003AC  E2 89		    loop    _generateCode

 000003AE  5A			pop         EDX
 000003AF  59			pop         ECX
 000003B0  5B			pop         EBX
 000003B1  58			pop         EAX
 000003B2  5D			pop         EBP

 000003B3  C2 000C		ret         12
 000003B6			GenerateCode ENDP


				; -------------------------------------------------------- -
 000003B6			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000003B6  55			push                EBP
 000003B7  8B EC		mov                 EBP, ESP

 000003B9  53			push                EBX
 000003BA  51			push                ECX
 000003BB  52			push                EDX

 000003BC			_stackFrame:
 000003BC  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000003BF  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000003C2  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000003C5  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000003C7  03 D8		add                 EBX, EAX                ; Get to array[n]
 000003C9  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000003CB  5A			pop                 EDX
 000003CC  59			pop                 ECX
 000003CD  5B			pop                 EBX

 000003CE  5D			pop                 EBP

 000003CF  C2 000C		ret 12
 000003D2			ArrayAt ENDP

				; -------------------------------------------------------- -
 000003D2			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000003D2  55			push                EBP
 000003D3  8B EC		mov                 EBP, ESP

 000003D5  50			push                EAX
 000003D6  53			push                EBX
 000003D7  51			push                ECX

 000003D8			_stackFrame:
 000003D8  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000003DB  51			push                ECX
 000003DC  68 000002A7 R	push                OFFSET MAP_background_color
 000003E1  6A 04		push                TYPE MAP_background_color
 000003E3  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 000003E8  BB 00000010		mov                 EBX, 16
 000003ED  F7 E3		mul                 EBX

				; Preserve background in EBX
 000003EF  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 000003F1  51			push                ECX
 000003F2  68 000002D3 R	push                OFFSET MAP_text_color
 000003F7  6A 04		push                TYPE MAP_text_color
 000003F9  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 000003FE  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000400  E8 00000000 E	call                SetTextColor

 00000405  59			pop                 ECX
 00000406  5B			pop                 EBX
 00000407  58			pop                 EAX

 00000408  5D			pop                 EBP

 00000409  C2 0004		ret 4
 0000040C			SetColorFromPalette ENDP

				; --------------------------------------------------------
 0000040C			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 0000040C  55			push            EBP
 0000040D  8B EC		mov             EBP, ESP

 0000040F  50			push            EAX
 00000410  53			push            EBX
 00000411  51			push            ECX
 00000412  52			push            EDX

 00000413			_stackFrame:
 00000413  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 00000416  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 00000419  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 0000041C			_moveCursor:
 0000041C  50			    push        EAX

 0000041D  8B C3		    mov         EAX, EBX                ; insert y
 0000041F  48			    dec         EAX                     ; shift back for 1-indexing
 00000420  BB 00000100		    mov         EBX, 256
 00000425  F7 E3		    mul         EBX                     ; shift y to subregister AH

 00000427  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 00000429  48			    dec         EAX                     ; shift back for 1-indexing

 0000042A  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 0000042C  E8 00000000 E	    call        GotoXY
 00000431  58			    pop         EAX

 00000432  83 F8 02		cmp             EAX, HIT
 00000435  74 2F		je              _hit

 00000437  83 F8 01		cmp             EAX, BLOW
 0000043A  74 15		je              _blow

 0000043C			_miss:
 0000043C  6A 08		    push        8
 0000043E  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 00000443  52		     1	    push        EDX
 00000444  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 00000449  E8 00000000 E     1	    call        WriteString
 0000044E  5A		     1	    pop         EDX
 0000044F  EB 2A		    jmp         _done
 00000451			_blow:
 00000451  6A 09		    push        9
 00000453  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 00000458  52		     1	    push        EDX
 00000459  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 0000045E  E8 00000000 E     1	    call        WriteString
 00000463  5A		     1	    pop         EDX
 00000464  EB 15		    jmp         _done
 00000466			_hit:
 00000466  6A 0A		    push        10
 00000468  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 0000046D  52		     1	    push        EDX
 0000046E  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 00000473  E8 00000000 E     1	    call        WriteString
 00000478  5A		     1	    pop         EDX
 00000479  EB 00		    jmp         _done

 0000047B			_done:

 0000047B  5A			pop             EDX
 0000047C  59			pop             ECX
 0000047D  5B			pop             EBX
 0000047E  58			pop             EAX

 0000047F  5D			pop             EBP

 00000480  C2 000C		ret 12
 00000483			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 00000483			CheckSimilar PROC
				; Author:           Hla Htun (Trenton Young made small contribution)
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have user_guess and solution as global variables
				;                   Both of the arrays must have a size of 4
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 00000483  55			    push    EBP
 00000484  8B EC		    mov     EBP, ESP

 00000486  50			    push    EAX
 00000487  53			    push    EBX
 00000488  51			    push    ECX

 00000489  B8 00000000		    mov     EAX, 0
 0000048E  8B 5D 08		    mov     EBX, [EBP + 8]
 00000491  89 03		    mov     [EBX], EAX      ; initializing hits variable
 00000493  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000496  89 03		    mov     [EBX], EAX      ; initializing blows variable
 00000498  A3 00000515 R	    mov     matches, EAX

				    ; two loop counters
				    ; ECX => i
				    ; EBX => j
 0000049D  B9 00000000		    mov     ECX, 0
 000004A2			    PrintUserGuess:
 000004A2  51			        push    ECX
 000004A3  68 000004ED R	        push    OFFSET user_guess
 000004A8  6A 04		        push    TYPE user_guess
 000004AA  E8 FFFFFF07		        call    ArrayAt
 000004AF  A3 0000050D R	        mov     helperVar1, EAX

 000004B4  51			        push    ECX
 000004B5  68 0000045D R	        push    OFFSET solution
 000004BA  6A 04		        push    TYPE solution
 000004BC  E8 FFFFFEF5		        call    ArrayAt
 000004C1  8B 1D 0000050D R	        mov     EBX, helperVar1
 000004C7  3B D8		        cmp     EBX, EAX
 000004C9  74 02		        JE      isAHit
 000004CB  EB 09		        JMP     notAHit
 000004CD			        isAHit:
 000004CD  83 05 00000505 R	            add hits, 1
	   01
 000004D4  EB 33		            JMP outOfisThisInArray

 000004D6			        notAHit:
 000004D6  A3 0000050D R	            mov     helperVar1, EAX
 000004DB  8B 1D 00000505 R	            mov     EBX, hits
 000004E1			            loop2ndArray:
 000004E1  53			                push    EBX
 000004E2  68 000004ED R	                push    OFFSET user_guess
 000004E7  6A 04		                push    TYPE user_guess
 000004E9  E8 FFFFFEC8		                call    ArrayAt
 000004EE  3B 05 0000050D R	                cmp     EAX, helperVar1
 000004F4  74 0A		                JE      isAMatch
 000004F6  83 FB 03		                cmp     EBX, 3
 000004F9  74 0E		                JE      outOfisThisInArray
 000004FB  83 C3 01		                add     EBX, 1
 000004FE  EB E1		                JMP     loop2ndArray

 00000500			            isAMatch:
 00000500  83 05 00000515 R	                add     matches, 1
	   01
 00000507  EB 00		                JMP     outOfisThisInArray


 00000509			        outOfisThisInArray:
 00000509  83 F9 03		            cmp     ECX, 3
 0000050C  74 05		            JE      outOfPrintUserGuess
 0000050E  83 C1 01		            add     ECX, 1
 00000511  EB 8F		            JMP     PrintUserGuess

 00000513			outOfPrintUserGuess:
 00000513  8B 5D 08		    mov     EBX, [EBP + 8]
 00000516  A1 00000505 R	    mov     EAX, hits
 0000051B  89 03		    mov     [EBX], EAX      ; saving to hits variable

 0000051D  A1 00000515 R	    mov     EAX, matches

 00000522  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000525  89 03		    mov     [EBX], EAX      ; saving to blows variable

 00000527  59			    pop     ECX
 00000528  5B			    pop     EBX
 00000529  58			    pop     EAX

 0000052A  5D			    pop     EBP
 0000052B  C2 0008		    ret     8
 0000052E			CheckSimilar ENDP


				; -------------------------------------------------------- -
 0000052E			PrintSolution PROC
				; Author:           Cameron Kroeker (Trenton Young made small contribution)
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -
 0000052E  50			push    EAX
 0000052F  57			push    EDI

 00000530  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 00000535  8B 87 0000045D R	mov EAX, solution[EDI]
				mPlacePeg       75, 7, EAX
 0000053B  52		     2	    push        EDX
 0000053C  B2 4B	     2	    mov         dl, 75
 0000053E  FE CA	     2	    dec         dl
 00000540  B6 07	     2	    mov         dh, 7
 00000542  FE CE	     2	    dec         dh
 00000544  E8 00000000 E     2	    call        Gotoxy
 00000549  5A		     2	    pop         EDX
 0000054A  50		     1	    push        EAX
 0000054B  E8 FFFFFE82	     1	    call        SetColorFromPalette
 00000550  52		     2	    push        EDX
 00000551  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000556  E8 00000000 E     2	    call        WriteString
 0000055B  5A		     2	    pop         EDX

 0000055C  8B 87 00000461 R	mov EAX, solution[EDI+4]
				mPlacePeg       75, 9, EAX
 00000562  52		     2	    push        EDX
 00000563  B2 4B	     2	    mov         dl, 75
 00000565  FE CA	     2	    dec         dl
 00000567  B6 09	     2	    mov         dh, 9
 00000569  FE CE	     2	    dec         dh
 0000056B  E8 00000000 E     2	    call        Gotoxy
 00000570  5A		     2	    pop         EDX
 00000571  50		     1	    push        EAX
 00000572  E8 FFFFFE5B	     1	    call        SetColorFromPalette
 00000577  52		     2	    push        EDX
 00000578  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000057D  E8 00000000 E     2	    call        WriteString
 00000582  5A		     2	    pop         EDX

 00000583  8B 87 00000465 R	mov EAX, solution[EDI+8]
				mPlacePeg       75, 11, EAX
 00000589  52		     2	    push        EDX
 0000058A  B2 4B	     2	    mov         dl, 75
 0000058C  FE CA	     2	    dec         dl
 0000058E  B6 0B	     2	    mov         dh, 11
 00000590  FE CE	     2	    dec         dh
 00000592  E8 00000000 E     2	    call        Gotoxy
 00000597  5A		     2	    pop         EDX
 00000598  50		     1	    push        EAX
 00000599  E8 FFFFFE34	     1	    call        SetColorFromPalette
 0000059E  52		     2	    push        EDX
 0000059F  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000005A4  E8 00000000 E     2	    call        WriteString
 000005A9  5A		     2	    pop         EDX

 000005AA  8B 87 00000469 R	mov EAX, solution[EDI+12]
				mPlacePeg       75, 13, EAX
 000005B0  52		     2	    push        EDX
 000005B1  B2 4B	     2	    mov         dl, 75
 000005B3  FE CA	     2	    dec         dl
 000005B5  B6 0D	     2	    mov         dh, 13
 000005B7  FE CE	     2	    dec         dh
 000005B9  E8 00000000 E     2	    call        Gotoxy
 000005BE  5A		     2	    pop         EDX
 000005BF  50		     1	    push        EAX
 000005C0  E8 FFFFFE0D	     1	    call        SetColorFromPalette
 000005C5  52		     2	    push        EDX
 000005C6  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000005CB  E8 00000000 E     2	    call        WriteString
 000005D0  5A		     2	    pop         EDX
				;
				;movzx EAX, solution[EDI]
				;mPlacePeg       75, 7, EAX
				;
				;movzx EAX, solution[EDI+1]
				;mPlacePeg       75, 9, EAX
				;
				;movzx EAX, solution[EDI+2]
				;mPlacePeg       75, 11, EAX
				;
				;movzx EAX, solution[EDI+3]
				;mPlacePeg       75, 13, EAX


				;Set color back to White
 000005D1  6A 08		push            8
 000005D3  E8 FFFFFDFA		call            SetColorFromPalette


 000005D8  B8 00000000		mov EAX, 0

 000005DD  5F			pop     EDI
 000005DE  58			pop     EAX

 000005DF  C3			ret
 000005E0			PrintSolution ENDP


				; -------------------------------------------------------- -
 000005E0			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into user_guess
				;
				; Helper Variables: currX, currIndex, user_guess
				;
				; Parameters:       push OFFSET array
				;                   call
				;
				; Postconditions:   Updated user_guess
				; -------------------------------------------------------- -
 000005E0  55			push            EBP
 000005E1  8B EC		mov             EBP, ESP

 000005E3  50			push            EAX
 000005E4  53			push            EBX
 000005E5  51			push            ECX
 000005E6  52			push            EDX

 000005E7			_init_variables:
 000005E7  8B 7D 08		    mov             EDI, [EBP + 8]      ; Array offset
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be displayed.
 000005EA  52		     1	    push        EDX
 000005EB  B2 01	     1	    mov         dl, 1
 000005ED  FE CA	     1	    dec         dl
 000005EF  B6 11	     1	    mov         dh, 17
 000005F1  FE CE	     1	    dec         dh
 000005F3  E8 00000000 E     1	    call        Gotoxy
 000005F8  5A		     1	    pop         EDX
 000005F9  B9 00000000		    mov             ECX, 0
 000005FE  89 0F		    mov             [EDI], ECX
 00000600  89 4F 04		    mov             [EDI + 4], ECX
 00000603  89 4F 08		    mov             [EDI + 8], ECX
 00000606  89 4F 0C		    mov             [EDI + 12], ECX


 00000609			_string:
				    mPrint          selectColor
 00000609  52		     1	    push        EDX
 0000060A  BA 0000031D R     1	    mov         EDX, OFFSET selectColor
 0000060F  E8 00000000 E     1	    call        WriteString
 00000614  5A		     1	    pop         EDX



				; Initialize the screen and ECX to show a color before the user hits the arrow keys.
 00000615			_preloop:

 00000615  8B 1D 0000051D R	mov             EBX, currY              ; init current y
 0000061B  A1 00000519 R	mov             EAX, currX              ; init current x
 00000620  8B 0F		mov             ECX, [EDI]
				mPlacePeg       al, bl, ECX             ; place peg on coordinate
 00000622  52		     2	    push        EDX
 00000623  8A D0	     2	    mov         dl, al
 00000625  FE CA	     2	    dec         dl
 00000627  8A F3	     2	    mov         dh, bl
 00000629  FE CE	     2	    dec         dh
 0000062B  E8 00000000 E     2	    call        Gotoxy
 00000630  5A		     2	    pop         EDX
 00000631  51		     1	    push        ECX
 00000632  E8 FFFFFD9B	     1	    call        SetColorFromPalette
 00000637  52		     2	    push        EDX
 00000638  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000063D  E8 00000000 E     2	    call        WriteString
 00000642  5A		     2	    pop         EDX

				;  loop until user inputs a code

 00000643			_loop:
 00000643  B8 00000032		    mov             EAX, 50
 00000648  E8 00000000 E	    call            Delay
 0000064D  E8 00000000 E	    call            ReadKey
 00000652  74 EF		    jz              _loop

 00000654  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx
 00000657  83 FA 25		cmp             EDX, 37                 ; left
 0000065A  74 6B		je              _decrease



 0000065C  83 FA 27		cmp             EDX, 39                 ; right
 0000065F  74 24		je              _increase

 00000661  83 FA 0D		cmp             EDX, 13                 ; enter
 00000664  0F 84 0000009F	je              _enter

 0000066A  83 FA 28		cmp             EDX, 40                 ; down
 0000066D  0F 84 00000096	je              _enter

 00000673  83 FA 26		cmp             EDX, 38                 ; up
 00000676  0F 84 000000C8	je              _up

 0000067C  83 FA 08		cmp             EDX, 8                  ; backspace
 0000067F  0F 84 000000BF	je              _up

 00000685			_increase:

 00000685  83 C1 01		add             ECX, 1                  ; increment color map
 00000688  83 F9 08		cmp             ECX, 8                  ; check if current index is too high

 0000068B  7D 02		jge             _resetHigh
 0000068D  EB 05		jmp             _getColorHigh

 0000068F			    _resetHigh:
 0000068F  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 00000694			    _getColorHigh:
 00000694  A1 00000519 R	    mov             EAX, currX          ; move the current x index into EAX so mPlacePeg can use AL
 00000699  8B 1D 0000051D R	    mov             EBX, currY          ; move current y index into EBX so mPlacePeg can use BL
				    mPlacePeg       al, bl, ECX
 0000069F  52		     2	    push        EDX
 000006A0  8A D0	     2	    mov         dl, al
 000006A2  FE CA	     2	    dec         dl
 000006A4  8A F3	     2	    mov         dh, bl
 000006A6  FE CE	     2	    dec         dh
 000006A8  E8 00000000 E     2	    call        Gotoxy
 000006AD  5A		     2	    pop         EDX
 000006AE  51		     1	    push        ECX
 000006AF  E8 FFFFFD1E	     1	    call        SetColorFromPalette
 000006B4  52		     2	    push        EDX
 000006B5  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000006BA  E8 00000000 E     2	    call        WriteString
 000006BF  5A		     2	    pop         EDX
 000006C0  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]

 000006C2  E9 FFFFFF7C		jmp             _loop                   ; Loop until a new key press

 000006C7			_decrease:

 000006C7  83 F9 00		cmp             ECX, 0
 000006CA  74 05		je              _resetLow
 000006CC  83 E9 01		sub             ECX, 1
 000006CF  EB 05		jmp             _getColorLow
 000006D1			    _resetLow:
 000006D1  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 000006D6			    _getColorLow:
 000006D6  A1 00000519 R	    mov             EAX, currX          ; move current x index into EAX so it can be used in mPlacePeg
 000006DB  8B 1D 0000051D R	    mov             EBX, currY          ; move current y index to EBX to be used in mPlacePeg
				    mPlacePeg       al, bl, ECX
 000006E1  52		     2	    push        EDX
 000006E2  8A D0	     2	    mov         dl, al
 000006E4  FE CA	     2	    dec         dl
 000006E6  8A F3	     2	    mov         dh, bl
 000006E8  FE CE	     2	    dec         dh
 000006EA  E8 00000000 E     2	    call        Gotoxy
 000006EF  5A		     2	    pop         EDX
 000006F0  51		     1	    push        ECX
 000006F1  E8 FFFFFCDC	     1	    call        SetColorFromPalette
 000006F6  52		     2	    push        EDX
 000006F7  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000006FC  E8 00000000 E     2	    call        WriteString
 00000701  5A		     2	    pop         EDX
 00000702  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]

 00000704  E9 FFFFFF3A		jmp             _loop                   ; Loop until a new key press

 00000709			_enter:

 00000709  83 3D 00000521 R	cmp             currIndex, 3            ; Check if 4th peg
	   03
 00000710  74 02		je              _onlyEnter              ; jump to check if downkey pressed
 00000712  EB 0C		jmp             _break                  ; else continue on
 00000714			_onlyEnter:
 00000714  83 FA 28		    cmp             EDX, 40             ; Check if downkey was pressed
 00000717  74 02		    je              downKey             ; if so, jump to downKey
 00000719  EB 05		    jmp             _break              ; else continue on
 0000071B			    downKey:
 0000071B  E9 FFFFFEF5		        jmp             _preloop        ; jump to preloop to avoid accidental downkey entering users code
 00000720			_break:

 00000720  83 C7 04		add             EDI, 4                  ; increment current index
 00000723  A1 0000051D R	mov             EAX, currY              ; move current y coordinate into eax
 00000728  83 C0 02		add             EAX, 2                  ; incease it by 2
 0000072B  A3 0000051D R	mov             currY, EAX              ; store updated currY

 00000730  FF 05 00000521 R	inc             currIndex               ; increment current index in user_guess
 00000736  83 3D 00000521 R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 0000073D  7D 30		jge             _end
 0000073F  E9 FFFFFED1		jmp             _preloop                ; loop to get a new number

 00000744			_up:
 00000744  A1 0000051D R	    mov         EAX, currY
 00000749  83 F8 07		    cmp         EAX, 7                  ; compare current y coord with 7. If it's 7, just go back to looping.
 0000074C  0F 84 FFFFFEF1	    je          _loop
 00000752  83 E8 02		    sub         EAX, 2                  ; subtract 2 from currY to get to peg above currY
 00000755  A3 0000051D R	    mov         currY, EAX
 0000075A  83 EF 04		    sub         EDI, 4                  ; move array pointer back to previous entry
 0000075D  A1 00000521 R	    mov         EAX, currIndex
 00000762  83 E8 01		    sub         EAX, 1                  ; subtract 1 from currIndex
 00000765  A3 00000521 R	    mov         currIndex, EAX
 0000076A  E9 FFFFFEA6		    jmp         _preloop                ; go to preloop


 0000076F			_end:                                   ; break out of loop and return
 0000076F  6A 08		push            8
 00000771  E8 FFFFFC5C		call            SetColorFromPalette     ; set color back to white

 00000776  C7 05 0000051D R	mov             currY, 7                ; reset currY for next round
	   00000007
 00000780  A1 00000519 R	mov             EAX, currX              ; set currX to currX + 8 to get next round x coordinate
 00000785  83 C0 08		add             EAX, 8

 00000788  5A			pop             EDX
 00000789  59			pop             ECX
 0000078A  5B			pop             EBX
 0000078B  58			pop             EAX
 0000078C  5D			pop             EBP
 0000078D  C2 0004		ret 4
 00000790			GetUserCode ENDP


				; -------------------------------------------------------- -
 00000790			PromptMsg PROC
				; Author:           Trenton Young
				; Description:      Gets the user's input in the form of text
				;                   input and then stores the corresponding
				;                   boolean value in EAX
				;
				; Parameters:       push OFFSET message
				;                   call
				;
				; Postconditions:   EAX will contain the TRUE or FALSE
				; -------------------------------------------------------- -
 00000790  55			push                EBP
 00000791  8B EC		mov                 EBP, ESP

 00000793  51			push                ECX
 00000794  52			push                EDX

				; Set text color to default
				;push                8
				;call                SetColorFromPalette

 00000795			_stackFrame:
 00000795  8B 55 08		    mov             EDX, [EBP + 8]          ; OFFSET message

 00000798  E8 00000000 E	call                WriteString
 0000079D  E8 00000000 E	call                Crlf

 000007A2  EB 1D		jmp _endInvalid
 000007A4			_invalid:
				    ; Set to error message color
 000007A4  6A 0A		    push            10
 000007A6  E8 FFFFFC27		    call            SetColorFromPalette

 000007AB  BA 00000369 R	    mov             EDX, OFFSET invalidCharMsg
 000007B0  E8 00000000 E	    call            WriteString
 000007B5  E8 00000000 E	    call            Crlf

 000007BA  6A 08		    push            8
 000007BC  E8 FFFFFC11		    call            SetColorFromPalette
 000007C1			_endInvalid:

 000007C1  E8 00000000 E	call                ReadChar

 000007C6  0F B6 15		movzx               EDX, YES
	   000002FF R
 000007CD  0F B6 C8		movzx               ECX, AL
 000007D0  3B D1		cmp                 EDX, ECX
 000007D2  74 10		je                  _true

 000007D4  0F B6 15		movzx               EDX, NO
	   00000300 R
 000007DB  0F B6 C8		movzx               ECX, AL
 000007DE  3B D1		cmp                 EDX, ECX
 000007E0  74 09		je                  _false

 000007E2  EB C0		jmp                 _invalid

 000007E4			_true:
 000007E4  B8 00000001		    mov             EAX, TRUE
 000007E9  EB 05		    jmp             _end

 000007EB			_false:
 000007EB  B8 00000000		    mov             EAX, FALSE

 000007F0			_end:

 000007F0  5A			pop                 EDX
 000007F1  59			pop                 ECX

 000007F2  5D			pop                 EBP

 000007F3  C2 0004		ret 4
 000007F6			PromptMsg ENDP

				; -------------------------------------------------------- -
 000007F6			PlaceFeedbackGameTurn PROC
				; Author:           Hla Htun
				; Description:      Places the feedback for specific round
				;
				; Parameters:       push    current_round    ; this is the nth round
				;                   call
				;
				; Postconditions:   Feedbacks will be displayed on the GameBoard
				;                   for that specific round
				; -------------------------------------------------------- -
 000007F6  55			    push        EBP
 000007F7  8B EC		    mov         EBP, ESP
 000007F9  51			    push        ECX
 000007FA  53			    push        EBX
 000007FB  50			    push        EAX

 000007FC  8B 45 08		    mov         EAX, [EBP + 8]          ; current round number

 000007FF  83 F8 08		    cmp         EAX, 8
 00000802  74 20		    JE          _roundOne
 00000804  83 F8 07		    cmp         EAX, 7
 00000807  74 27		    JE          _roundTwo
 00000809  83 F8 06		    cmp         EAX, 6
 0000080C  74 2E		    JE          _roundThree
 0000080E  83 F8 05		    cmp         EAX, 5
 00000811  74 35		    JE          _roundFour
 00000813  83 F8 04		    cmp         EAX, 4
 00000816  74 3C		    JE          _roundFive
 00000818  83 F8 03		    cmp         EAX, 3
 0000081B  74 43		    JE          _roundSix
 0000081D  83 F8 02		    cmp         EAX, 2
 00000820  74 4A		    JE          _roundSeven
 00000822  EB 54		    JMP         _roundEight

 00000824			    _roundOne:
 00000824  C7 05 00000835 R	        mov     H_HelperVarX, 7         ; move cursor
	   00000007
 0000082E  EB 54		        JMP     _printDraft
 00000830			    _roundTwo:
 00000830  C7 05 00000835 R	        mov     H_HelperVarX, 15        ; move cursor
	   0000000F
 0000083A  EB 48		        JMP     _printDraft
 0000083C			    _roundThree:
 0000083C  C7 05 00000835 R	        mov     H_HelperVarX, 23        ; move cursor
	   00000017
 00000846  EB 3C		        JMP     _printDraft
 00000848			    _roundFour:
 00000848  C7 05 00000835 R	        mov     H_HelperVarX, 31        ; move cursor
	   0000001F
 00000852  EB 30		        JMP     _printDraft
 00000854			    _roundFive:
 00000854  C7 05 00000835 R	        mov     H_HelperVarX, 39        ; move cursor
	   00000027
 0000085E  EB 24		        JMP     _printDraft
 00000860			    _roundSix:
 00000860  C7 05 00000835 R	        mov     H_HelperVarX, 47        ; move cursor
	   0000002F
 0000086A  EB 18		        JMP     _printDraft
 0000086C			    _roundSeven:
 0000086C  C7 05 00000835 R	        mov     H_HelperVarX, 55        ; move cursor
	   00000037
 00000876  EB 0C		        JMP     _printDraft
 00000878			    _roundEight:
 00000878  C7 05 00000835 R	        mov     H_HelperVarX, 63            ; move cursor
	   0000003F
 00000882  EB 00		        JMP     _printDraft

 00000884			    _printDraft:
 00000884  C7 05 00000839 R	        mov     H_HelperVarY, 4
	   00000004
 0000088E  C7 05 0000083D R	        mov     H_HelperVarMovY, 0
	   00000000
 00000898  83 3D 00000505 R	        cmp     hits, 0                     ; if no hits, don't draw
	   00
 0000089F  74 4F		        JE      _outofPrintHitsHH

 000008A1  BB 00000000		        mov     EBX, 0
 000008A6			        _printHitsHH:
 000008A6  83 3D 0000083D R	            cmp     H_HelperVarMovY, 2      ; see if Y needs to be incremented
	   02
 000008AD  7C 17		            JL      _continue1HH
 000008AF  FF 05 00000839 R	            inc     H_HelperVarY
 000008B5  83 2D 00000835 R	            sub     H_HelperVarX, 2
	   02
 000008BC  C7 05 0000083D R	            mov     H_HelperVarMovY, 0
	   00000000
 000008C6			            _continue1HH:
				                mPlaceFeedback H_HelperVarX, H_HelperVarY, HIT      ; draw hit
 000008C6  FF 35 00000835 R  1	    push        H_HelperVarX
 000008CC  FF 35 00000839 R  1	    push        H_HelperVarY
 000008D2  6A 02	     1	    push        HIT
 000008D4  E8 FFFFFB33	     1	    call        PlaceFeedback
 000008D9  FF 05 00000835 R	                inc     H_HelperVarX                                ; move X
 000008DF  FF 05 0000083D R	                inc     H_HelperVarMovY                             ; increment MovY counter

 000008E5  43			            inc EBX
 000008E6  3B 1D 00000505 R	            cmp EBX, hits
 000008EC  7D 02		            JGE _outofPrintHitsHH
 000008EE  EB B6		            JMP _printHitsHH
 000008F0			        _outofPrintHitsHH:

 000008F0  C7 05 00000839 R	        mov     H_HelperVarY, 4
	   00000004
 000008FA  83 3D 00000509 R	        cmp     blows, 0                ; if no blows, don't draw
	   00
 00000901  74 4F		        JE      _outofPrintBlowsHH
 00000903  BB 00000000		        mov     EBX, 0
 00000908			        _printBlowsHH:
 00000908  83 3D 0000083D R	            cmp     H_HelperVarMovY, 2  ; see if Y needs to be incremented
	   02
 0000090F  7C 17		            JL      _continue2HH
 00000911  FF 05 00000839 R	            inc     H_HelperVarY
 00000917  83 2D 00000835 R	            sub     H_HelperVarX, 2
	   02
 0000091E  C7 05 0000083D R	            mov     H_HelperVarMovY, 0
	   00000000
 00000928			            _continue2HH:
				                mPlaceFeedback H_HelperVarX, H_HelperVarY, BLOW     ; draw blow
 00000928  FF 35 00000835 R  1	    push        H_HelperVarX
 0000092E  FF 35 00000839 R  1	    push        H_HelperVarY
 00000934  6A 01	     1	    push        BLOW
 00000936  E8 FFFFFAD1	     1	    call        PlaceFeedback
 0000093B  FF 05 00000835 R	                inc     H_HelperVarX                                ; move X
 00000941  FF 05 0000083D R	                inc     H_HelperVarMovY                             ; increment MovY counter

 00000947  43			            inc EBX
 00000948  3B 1D 00000509 R	            cmp EBX, blows
 0000094E  7D 02		            JGE _outofPrintBlowsHH
 00000950  EB B6		            JMP _printBlowsHH
 00000952			        _outofPrintBlowsHH:


 00000952			    _outofPrintDraft:
 00000952  C7 05 00000839 R	        mov H_HelperVarY, 4
	   00000004

 0000095C  58			    pop         EAX
 0000095D  5B			    pop         EBX
 0000095E  59			    pop         ECX
 0000095F  5D			    pop         EBP
 00000960  C3			ret
 00000961			PlaceFeedbackGameTurn ENDP

				; -------------------------------------------------------- -
 00000961			debugHH     PROC
				; Author:           Hla Htun
				; Description:      Prints out user_guess and solution arrays
				;                   along with the round number, hits and blows
				;
				; Parameters:       mGotoXY   1, 25     ; needs to move cursor
				;                   call                ; below the GameBoard
				;
				; -------------------------------------------------------- -
 00000961  51			    push    ECX
 00000962  50			    push    EAX

 00000963  B0 52		    mov     AL, 'R'
 00000965  E8 00000000 E	    call    WriteChar
 0000096A  A1 00000459 R	    mov     EAX, current_round
 0000096F  83 C0 01		    add     EAX, 1
 00000972  E8 00000000 E	    call    WriteDec
 00000977  E8 00000000 E	    call    Crlf
 0000097C  B9 00000000		    mov     ECX, 0
 00000981			    _printHH:
 00000981  51			         push       ECX
 00000982  68 000004ED R	         push       OFFSET user_guess
 00000987  6A 04		         push       TYPE user_guess
 00000989  E8 FFFFFA28		         call       ArrayAt
 0000098E  E8 00000000 E	         call       WriteDec
 00000993  B0 2D		         mov        AL, '-'
 00000995  E8 00000000 E	         call       WriteChar
 0000099A  83 F9 03		         cmp        ECX, 3
 0000099D  74 03		         JE         _outofPrintHH
 0000099F  41			         inc        ECX
 000009A0  EB DF		         JMP        _printHH
 000009A2			    _outofPrintHH:
 000009A2  E8 00000000 E	        call        Crlf


 000009A7  B9 00000000		    mov     ECX, 0
 000009AC			    _printHH2:
 000009AC  51			         push       ECX
 000009AD  68 0000045D R	         push       OFFSET solution
 000009B2  6A 04		         push       TYPE solution
 000009B4  E8 FFFFF9FD		         call       ArrayAt
 000009B9  E8 00000000 E	         call       WriteDec
 000009BE  B0 2D		         mov        AL, '-'
 000009C0  E8 00000000 E	         call       WriteChar
 000009C5  83 F9 03		         cmp        ECX, 3
 000009C8  74 03		         JE         _outofPrintHH2
 000009CA  41			         inc        ECX
 000009CB  EB DF		         JMP        _printHH2
 000009CD			    _outofPrintHH2:
 000009CD  E8 00000000 E	        call        Crlf


				    mGotoXY         1, 22
 000009D2  52		     1	    push        EDX
 000009D3  B2 01	     1	    mov         dl, 1
 000009D5  FE CA	     1	    dec         dl
 000009D7  B6 16	     1	    mov         dh, 22
 000009D9  FE CE	     1	    dec         dh
 000009DB  E8 00000000 E     1	    call        Gotoxy
 000009E0  5A		     1	    pop         EDX
 000009E1			    _printHH3:
 000009E1  B0 48		        mov     AL, 'H'
 000009E3  E8 00000000 E	        call    WriteChar
 000009E8  A1 00000505 R	        mov     EAX, hits
 000009ED  E8 00000000 E	        call    WriteDec
 000009F2  E8 00000000 E	        call    Crlf

 000009F7  B0 42		        mov     AL, 'B'
 000009F9  E8 00000000 E	        call    WriteChar
 000009FE  A1 00000509 R	        mov     EAX, blows
 00000A03  E8 00000000 E	        call    WriteDec
 00000A08  E8 00000000 E	        call    Crlf

 00000A0D			    _outofPrintHH3:

 00000A0D			    _printHH4:

 00000A0D			    _outofPrintHH4:
 00000A0D  58			    pop     EAX
 00000A0E  59			    pop     ECX
 00000A0F  C3			ret
 00000A10			debugHH     ENDP

				; -------------------------------------------------------- -
 00000A10			getName PROC
				; Author:           Cameron Kroeker
				; Description:      Gets the user's input in the form of string
				;                   and stores in DWORD Uname
				;
				; Parameters:       needs a variable DWORD named userName,
				;                   needs variables BYTE prompt_userName,
				;                   and BYTE greeting
				;                   
				;
				; Postconditions:   Prompts the screen and set's userName to userinput, then greets user with custom input.
				; -------------------------------------------------------- -

				     ;Uname DWORD ?
				     ;namePrompt BYTE "Please enter your name: ",0
				     ;greeting BYTE "Hello, "
 00000A10  6A 08		    push            8
 00000A12  E8 FFFFF9BB		    call            SetColorFromPalette

 00000A17			    _getName:
					    mPrint  prompt_userName
 00000A17  52		     1	    push        EDX
 00000A18  BA 00000950 R     1	    mov         EDX, OFFSET prompt_userName
 00000A1D  E8 00000000 E     1	    call        WriteString
 00000A22  5A		     1	    pop         EDX
 00000A23  BA 00000968 R	        mov     EDX, OFFSET userName
 00000A28  B9 00000014		        mov     ECX, 20             ; allowed size
 00000A2D  E8 00000000 E	        call    ReadString          ; stores user name in userName
 00000A32  E8 00000000 E	        call    Clrscr

 00000A37			    _greetUser:
				        mPrint     greeting
 00000A37  52		     1	    push        EDX
 00000A38  BA 00000301 R     1	    mov         EDX, OFFSET greeting
 00000A3D  E8 00000000 E     1	    call        WriteString
 00000A42  5A		     1	    pop         EDX
				        mPrint     userName
 00000A43  52		     1	    push        EDX
 00000A44  BA 00000968 R     1	    mov         EDX, OFFSET userName
 00000A49  E8 00000000 E     1	    call        WriteString
 00000A4E  5A		     1	    pop         EDX
				        mPrint     exclamation

 00000A4F  52		     1	    push        EDX
 00000A50  BA 00000319 R     1	    mov         EDX, OFFSET exclamation
 00000A55  E8 00000000 E     1	    call        WriteString
 00000A5A  5A		     1	    pop         EDX

 00000A5B  C3			ret
 00000A5C			getName ENDP

				END main
Microsoft (R) Macro Assembler Version 14.36.32532.0	    06/11/23 16:30:39
Mastermind			(finalProject.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000969 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A5C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000003B6 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000003BC _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 00000483 _TEXT	Length= 000000AB Public STDCALL
  PrintUserGuess . . . . . . . .	L Near	 000004A2 _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 000004CD _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 000004D6 _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 000004E1 _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 00000500 _TEXT	
  outOfisThisInArray . . . . . .	L Near	 00000509 _TEXT	
  outOfPrintUserGuess  . . . . .	L Near	 00000513 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 00000264 _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 000002AB _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 000002EB _TEXT	Length= 000000CB Public STDCALL
  _clearCheckArrays  . . . . . .	L Near	 00000306 _TEXT	
  _stackFrame  . . . . . . . . .	L Near	 00000329 _TEXT	
  _generateCode  . . . . . . . .	L Near	 00000337 _TEXT	
  _checkCode . . . . . . . . . .	L Near	 0000035D _TEXT	
  _allowDuplicates . . . . . . .	L Near	 000003A7 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 000005E0 _TEXT	Length= 000001B0 Public STDCALL
  _init_variables  . . . . . . .	L Near	 000005E7 _TEXT	
  _string  . . . . . . . . . . .	L Near	 00000609 _TEXT	
  _preloop . . . . . . . . . . .	L Near	 00000615 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000643 _TEXT	
  _increase  . . . . . . . . . .	L Near	 00000685 _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 0000068F _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 00000694 _TEXT	
  _decrease  . . . . . . . . . .	L Near	 000006C7 _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 000006D1 _TEXT	
  _getColorLow . . . . . . . . .	L Near	 000006D6 _TEXT	
  _enter . . . . . . . . . . . .	L Near	 00000709 _TEXT	
  _onlyEnter . . . . . . . . . .	L Near	 00000714 _TEXT	
  downKey  . . . . . . . . . . .	L Near	 0000071B _TEXT	
  _break . . . . . . . . . . . .	L Near	 00000720 _TEXT	
  _up  . . . . . . . . . . . . .	L Near	 00000744 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000076F _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedbackGameTurn  . . . . .	P Near	 000007F6 _TEXT	Length= 0000016B Public STDCALL
  _roundOne  . . . . . . . . . .	L Near	 00000824 _TEXT	
  _roundTwo  . . . . . . . . . .	L Near	 00000830 _TEXT	
  _roundThree  . . . . . . . . .	L Near	 0000083C _TEXT	
  _roundFour . . . . . . . . . .	L Near	 00000848 _TEXT	
  _roundFive . . . . . . . . . .	L Near	 00000854 _TEXT	
  _roundSix  . . . . . . . . . .	L Near	 00000860 _TEXT	
  _roundSeven  . . . . . . . . .	L Near	 0000086C _TEXT	
  _roundEight  . . . . . . . . .	L Near	 00000878 _TEXT	
  _printDraft  . . . . . . . . .	L Near	 00000884 _TEXT	
  _printHitsHH . . . . . . . . .	L Near	 000008A6 _TEXT	
  _continue1HH . . . . . . . . .	L Near	 000008C6 _TEXT	
  _outofPrintHitsHH  . . . . . .	L Near	 000008F0 _TEXT	
  _printBlowsHH  . . . . . . . .	L Near	 00000908 _TEXT	
  _continue2HH . . . . . . . . .	L Near	 00000928 _TEXT	
  _outofPrintBlowsHH . . . . . .	L Near	 00000952 _TEXT	
  _outofPrintDraft . . . . . . .	L Near	 00000952 _TEXT	
PlaceFeedback  . . . . . . . . .	P Near	 0000040C _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000413 _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 0000041C _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 0000043C _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 00000451 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 00000466 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 0000047B _TEXT	
PrintSolution  . . . . . . . . .	P Near	 0000052E _TEXT	Length= 000000B2 Public STDCALL
PromptMsg  . . . . . . . . . . .	P Near	 00000790 _TEXT	Length= 00000066 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000795 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 000007A4 _TEXT	
  _endInvalid  . . . . . . . . .	L Near	 000007C1 _TEXT	
  _true  . . . . . . . . . . . .	L Near	 000007E4 _TEXT	
  _false . . . . . . . . . . . .	L Near	 000007EB _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000007F0 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000003D2 _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000003D8 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
debugHH  . . . . . . . . . . . .	P Near	 00000961 _TEXT	Length= 000000AF Public STDCALL
  _printHH . . . . . . . . . . .	L Near	 00000981 _TEXT	
  _outofPrintHH  . . . . . . . .	L Near	 000009A2 _TEXT	
  _printHH2  . . . . . . . . . .	L Near	 000009AC _TEXT	
  _outofPrintHH2 . . . . . . . .	L Near	 000009CD _TEXT	
  _printHH3  . . . . . . . . . .	L Near	 000009E1 _TEXT	
  _outofPrintHH3 . . . . . . . .	L Near	 00000A0D _TEXT	
  _printHH4  . . . . . . . . . .	L Near	 00000A0D _TEXT	
  _outofPrintHH4 . . . . . . . .	L Near	 00000A0D _TEXT	
getName  . . . . . . . . . . . .	P Near	 00000A10 _TEXT	Length= 0000004C Public STDCALL
  _getName . . . . . . . . . . .	L Near	 00000A17 _TEXT	
  _greetUser . . . . . . . . . .	L Near	 00000A37 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000264 Public STDCALL
  ProgramSetup . . . . . . . . .	L Near	 00000000 _TEXT	
  InitialGreeting  . . . . . . .	L Near	 0000000F _TEXT	
  PromptForRules . . . . . . . .	L Near	 00000014 _TEXT	
  DisplayRules . . . . . . . . .	L Near	 0000002E _TEXT	
  NewGameState . . . . . . . . .	L Near	 0000011C _TEXT	
  GenerateGamestate  . . . . . .	L Near	 00000185 _TEXT	
  GameTurn . . . . . . . . . . .	L Near	 000001AB _TEXT	
  WinnerCelebration  . . . . . .	L Near	 000001F5 _TEXT	
  LoserAdmonishment  . . . . . .	L Near	 0000021C _TEXT	
  PromptForPlayAgain . . . . . .	L Near	 0000023E _TEXT	
  _Farewell  . . . . . . . . . .	L Near	 00000251 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
Celebration  . . . . . . . . . .	Byte	 00000845 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
H_HelperVar1 . . . . . . . . . .	DWord	 0000082D _DATA	
H_HelperVar2 . . . . . . . . . .	DWord	 00000831 _DATA	
H_HelperVarMovY  . . . . . . . .	DWord	 0000083D _DATA	
H_HelperVarX . . . . . . . . . .	DWord	 00000835 _DATA	
H_HelperVarY . . . . . . . . . .	DWord	 00000839 _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
Loser  . . . . . . . . . . . . .	Byte	 00000897 _DATA	
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NO . . . . . . . . . . . . . . .	Byte	 00000300 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OUT_OF_RANGE_1 . . . . . . . . .	Number	 00000064h   
OUT_OF_RANGE_2 . . . . . . . . .	Number	 000000C8h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
RULES_10 . . . . . . . . . . . .	Byte	 000007EE _DATA	
RULES_1  . . . . . . . . . . . .	Byte	 00000525 _DATA	
RULES_2  . . . . . . . . . . . .	Byte	 00000537 _DATA	
RULES_3  . . . . . . . . . . . .	Byte	 0000056F _DATA	
RULES_4  . . . . . . . . . . . .	Byte	 000005DC _DATA	
RULES_5  . . . . . . . . . . . .	Byte	 00000650 _DATA	
RULES_6  . . . . . . . . . . . .	Byte	 000006A7 _DATA	
RULES_7  . . . . . . . . . . . .	Byte	 000006D5 _DATA	
RULES_8  . . . . . . . . . . . .	Byte	 00000730 _DATA	
RULES_9  . . . . . . . . . . . .	Byte	 0000078A _DATA	
RULES_GAP  . . . . . . . . . . .	Byte	 00000530 _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
T_HelperVar  . . . . . . . . . .	DWord	 00000511 _DATA	
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
YES  . . . . . . . . . . . . . .	Byte	 000002FF _DATA	
allowDuplicates  . . . . . . . .	DWord	 00000501 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 00000509 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 00000521 _DATA	
currX  . . . . . . . . . . . . .	DWord	 00000519 _DATA	
currY  . . . . . . . . . . . . .	DWord	 0000051D _DATA	
current_round  . . . . . . . . .	DWord	 00000459 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exclamation  . . . . . . . . . .	Byte	 00000319 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 000008EA _DATA	
game_matrix  . . . . . . . . . .	DWord	 0000046D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000301 _DATA	
hasWon . . . . . . . . . . . . .	DWord	 00000841 _DATA	
helperVar1 . . . . . . . . . . .	DWord	 0000050D _DATA	
hits . . . . . . . . . . . . . .	DWord	 00000505 _DATA	
invalidCharMsg . . . . . . . . .	Byte	 00000369 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 00000515 _DATA	
prompt_duplicates  . . . . . . .	Byte	 000003D5 _DATA	
prompt_rules . . . . . . . . . .	Byte	 00000398 _DATA	
prompt_tryAgain  . . . . . . . .	Byte	 000008C2 _DATA	
prompt_userName  . . . . . . . .	Byte	 00000950 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rules_placeholder  . . . . . . .	Byte	 00000384 _DATA	
selectColor  . . . . . . . . . .	Byte	 0000031D _DATA	
solution . . . . . . . . . . . .	DWord	 0000045D _DATA	
userHasWon . . . . . . . . . . .	DWord	 000004FD _DATA	
userName . . . . . . . . . . . .	Byte	 00000968 _DATA	
user_guess . . . . . . . . . . .	DWord	 000004ED _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
