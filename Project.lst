Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/10/23 20:25:46
Mastermind			(AddTwo.asm		     Page 1 - 1


				 TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses

 = 00000064			OUT_OF_RANGE_1 = 100
 = 000000C8			OUT_OF_RANGE_2 = 200

				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range [_low.._high] from Irvine's lib,
				;               output is stored in given register
				;
				; Use:          _low (inclusive) and _high  (inclusive) may be
				;               literals, _target may be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM


 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 79			YES                         BYTE        "y"
 00000300 6E			NO                          BYTE        "n"

 00000301 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00
 0000031A 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00
 00000366 49 6E 76 61 6C	invalidCharMsg              BYTE        "Invalid input, try again.", 0
	   69 64 20 69 6E
	   70 75 74 2C 20
	   74 72 79 20 61
	   67 61 69 6E 2E
	   00

 00000380 57 6F 75 6C 64	prompt_rules                BYTE        "Would you like me to tell you the rules of MASTERMIND? (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   6D 65 20 74 6F
	   20 74 65 6C 6C
	   20 79 6F 75 20
	   74 68 65 20 72
	   75 6C 65 73 20
	   6F 66 20 4D 41
	   53 54 45 52 4D
	   49 4E 44 3F 20
	   28 79 2F 6E 29
	   00
 000003BD 57 6F 75 6C 64	prompt_duplicates           BYTE        "Would you like to allow duplicates in the solution code?", CR, LF, "WARNING: This significantly increases the challenge of the game. (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 61 6C
	   6C 6F 77 20 64
	   75 70 6C 69 63
	   61 74 65 73 20
	   69 6E 20 74 68
	   65 20 73 6F 6C
	   75 74 69 6F 6E
	   20 63 6F 64 65
	   3F 0D 0A 57 41
	   52 4E 49 4E 47
	   3A 20 54 68 69
	   73 20 73 69 67
	   6E 69 66 69 63
	   61 6E 74 6C 79
	   20 69 6E 63 72
	   65 61 73 65 73
	   20 74 68 65 20
	   63 68 61 6C 6C
	   65 6E 67 65 20
	   6F 66 20 74 68
	   65 20 67 61 6D
	   65 2E 20 28 79
	   2F 6E 29 00

				; (Gamestate)               Variables defining gameplay

 0000043E 00			current_round               BYTE        0

 0000043F  00000004 [		solution                    DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_2)
	    000000C8
	   ]
 0000044F  00000004 [		game_matrix                 DWORD       CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00000000
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 000004CF  00000004 [		user_guess                  DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_1)
	    00000064
	   ]

 000004DF 00000000		userHasWon                  DWORD       FALSE
 000004E3 00000000		allowDuplicates             DWORD       FALSE

				; Hits and Blows            hits and blows will be stored in these variables
 000004E7 00000000		hits                        DWORD       0
 000004EB 00000000		blows                       DWORD       0
 000004EF 00000000		helperVar1                  DWORD       ?
 000004F3 00000000		T_HelperVar                 DWORD       ?
 000004F7 00000000		matches                     DWORD       ?

 000004FB 0000000F		currX                       DWORD       15              ; Helper var for GetUserCode. Stores current X coordinate. FOR START OF GAME, SET TO 7 ; TODO can probably be calculated on the fly (from test phase) - Trenton Young
 000004FF 00000007		currY                       DWORD       7               ; Helper var for GetUserCode. Stores current Y coordinate. FOR START OF GAME, SET TO 7
 00000503 00000000		currIndex                   DWORD       0               ; Helper var for GetUserCode. Will store current array index.


 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			ProgramSetup:
				;
				; Runs functions that set the environment to expected parameters,
				; seeds the random number generator, initiates the FPU, sets the
				; text and background color
				; --------------------------------------------------------
 00000000  9B DB E3		    finit
 00000003  E8 00000000 E	    call            Randomize

 00000008  6A 08		    push            8
 0000000A  E8 000001DC		    call            SetColorFromPalette


				; --------------------------------------------------------
 0000000F			InitialGreeting:
				;
				; Prompts the user for their name then greets them
				; --------------------------------------------------------

				    ; TODO PROC get user's name
				    ; TODO PROC greet user


				; --------------------------------------------------------
 0000000F			PromptForRules:
				;
				; Prompts the user asking if they would like the rules of the
				; game to be displayed
				; --------------------------------------------------------

 0000000F  68 00000380 R	    push            OFFSET prompt_rules
 00000014  E8 00000594		    call            PromptMsg

				    ; If the user does not want the rules displayed
 00000019  83 F8 00		    cmp             EAX, FALSE
 0000001C  74 18		    je              NewGamestate

				; --------------------------------------------------------
 0000001E			DisplayRules:
				;
				; Prints the rules of the game and then waits for the user to
				; press a key before continuing, to give them a chance to read
				; --------------------------------------------------------

				    ; TODO write up rules strings (extra cool: file IO)
				    ; TODO use Irvine lib WaitMsg (or something) after printing
				    ; TODO EXTRA we could have two different messages, the initial
				    ;           print which goes into detail and a subsequent version
				    ;           which is less verbose


				; --------------------------------------------------------
				; If the user has won the game, then they may allow for duplicates
				; in the solution code
 0000001E  83 3D 000004DF R	cmp             userHasWon, TRUE
	   01
 00000025  75 0F		jne             NewGameState
 00000027			PromptForDuplicates:
				;
				; Allow the user to choose if they want to allow duplicate
				; colors in the code, let user know that there may be more
				; than two of any given color if they agree.

 00000027  68 000003BD R	    push        OFFSET prompt_duplicates
 0000002C  E8 0000057C		    call        PromptMsg

				    ; Store the user's decision
 00000031  A3 000004E3 R	    mov         allowDuplicates, EAX

				; --------------------------------------------------------
 00000036			NewGamestate:
				;
				; Print a new gameboard, set the round to zero, and generate a new
				; solution code
				; --------------------------------------------------------

 00000036  E8 00000042		    call            DrawNewGameboard
 0000003B  C6 05 0000043E R	    mov             current_round, 0
	   00

 00000042  6A 00		    push            FALSE
 00000044  6A 04		    push            TYPE solution
 00000046  68 0000043F R	    push            OFFSET solution
 0000004B  E8 000000B4		    call            GenerateCode

				; --------------------------------------------------------
 00000050  B9 00000008		mov                 ECX, ROUNDS
 00000055			GameTurn:
				;
				; Get the user's input, check against the solution, give the
				; user feedback, and repeat until the user is out of turns or
				; guesses the solution
				; --------------------------------------------------------

				    ; Get input from the user
 00000055  68 000004CF R	    push            OFFSET user_guess
 0000005A  E8 0000039E		    call            GetUserCode

				    ; TODO store the guess in the game_matrix

				    ; Check the user's move against solution
 0000005F  68 000004EB R	    push            OFFSET blows
 00000064  68 000004E7 R	    push            OFFSET hits
 00000069  E8 0000022E		    call            CheckSimilar

				    ; TODO draw user feedback

				    ; TODO IF HITS == 4, jmp to WinnerCelebration

				    ; TODO IF ROUND > ROUNDS, jmp to LoserAdmonishment

				    ; If no endgame conditions are met, the user takes another turn
 0000006E  FE 05 0000043E R	    inc             current_round
 00000074  E2 DF		    loop            GameTurn


				; --------------------------------------------------------
 00000076			WinnerCelebration:
				;
				; Notify the user that they have won
				; --------------------------------------------------------

				    ; TODO write a celebration
				    ; TODO create a variable 'hasWon'
				    ; TODO set hasWon to TRUE


				; --------------------------------------------------------
 00000076			LoserAdmonishment:
				;
				; Notify the user that they are a loser
				; --------------------------------------------------------

				    ; TODO write an admonishment


				; --------------------------------------------------------
 00000076			PromptForPlayAgain:
				;
				; Prompt the user to play the game again
				; --------------------------------------------------------

				    ; TODO prompt
				    ; TODO if yes, jmp to NewGamestate
				    ; TODO else, farewell



				;   jmp noTesting
				;   --------------------------------------------------------
				;   testing:
				;   ;
				;   ; contains test code
				;   ; --------------------------------------------------------
				;
				;   mov ECX, 10
				;   _debug:
				;       mArand 1, 3, EBX
				;       loop _debug
				;
				;   call            DrawNewGameboard
				;
				;   mPlacePeg       7, 7, 2
				;   mPlacePeg       7, 9, 5
				;   mPlacePeg       7, 11, 1
				;   mPlacePeg       7, 13, 4
				;
				;   mPlaceFeedback  7, 4, HIT
				;   mPlaceFeedback  8, 4, BLOW
				;   mPlaceFeedback  7, 5, BLOW
				;
				;   push            FALSE
				;   push            TYPE solution
				;   push            OFFSET solution
				;   call            GenerateCode
				;
				;   call            PrintSolution
				;
				;
				;   push            OFFSET user_guess
				;   call            GetUserCode
				;
				;
				;   ; End of program steps
				;   mGotoXY         1, 20
				;
				;   push            8
				;   call            SetColorFromPalette
				;
				;   ; comparing user_guess and solution elements - updates hits and blows
				;   push            OFFSET blows
				;   push            OFFSET hits
				;   call            CheckSimilar
				;   noTesting:

				invoke EXITProcess, 0		; exit to operating system
 00000076  6A 00	   *	    push   +000000000h
 00000078  E8 00000000 E   *	    call   ExitProcess
 0000007D			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 0000007D			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 0000007D  51			push        ECX

 0000007E  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 00000083  52		     1	    push        EDX
 00000084  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 00000089  E8 00000000 E     1	    call        WriteString
 0000008E  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 0000008F  52		     1	    push        EDX
 00000090  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 00000095  E8 00000000 E     1	    call        WriteString
 0000009A  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 0000009B  52		     1	    push        EDX
 0000009C  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 000000A1  E8 00000000 E     1	    call        WriteString
 000000A6  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 000000A7  52		     1	    push        EDX
 000000A8  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 000000AD  E8 00000000 E     1	    call        WriteString
 000000B2  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 000000B3  52		     1	    push        EDX
 000000B4  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 000000B9  E8 00000000 E     1	    call        WriteString
 000000BE  5A		     1	    pop         EDX

 000000BF  B9 00000004		mov         ECX, ROWS
 000000C4			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 000000C4  52		     1	    push        EDX
 000000C5  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 000000CA  E8 00000000 E     1	    call        WriteString
 000000CF  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 000000D0  52		     1	    push        EDX
 000000D1  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 000000D6  E8 00000000 E     1	    call        WriteString
 000000DB  5A		     1	    pop         EDX

 000000DC  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 000000DE  52		     1	    push        EDX
 000000DF  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 000000E4  E8 00000000 E     1	    call        WriteString
 000000E9  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 000000EA  52		     1	    push        EDX
 000000EB  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 000000F0  E8 00000000 E     1	    call        WriteString
 000000F5  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 000000F6  52		     1	    push        EDX
 000000F7  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 000000FC  E8 00000000 E     1	    call        WriteString
 00000101  5A		     1	    pop         EDX

 00000102  59			pop         ECX

 00000103  C3			ret
 00000104			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 00000104			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code,
				;                   user_guess and solution will be mutated
				; -------------------------------------------------------- -
 00000104  55			push        EBP
 00000105  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000107  50			push        EAX
 00000108  53			push        EBX
 00000109  51			push        ECX
 0000010A  52			push        EDX

 0000010B  B8 00000000		mov         EAX, 0
 00000110  B9 00000004		mov         ECX, CODE_LENGTH
 00000115  C7 05 000004F3 R	mov         T_HelperVar, 0
	   00000000
				;inc         ECX

 0000011F			_clearCheckArrays:
 0000011F  C7 80 000004CF R	    mov     user_guess[EAX], OUT_OF_RANGE_1
	   00000064
 00000129  C7 80 0000043F R	    mov     solution[EAX], OUT_OF_RANGE_2
	   000000C8

 00000133  83 C0 04		    add     EAX, TYPE user_guess
 00000136  E2 E7		    loop    _clearCheckArrays

 00000138  C7 05 000004F3 R	    mov     T_HelperVar, 0            ; initialize index accumulator
	   00000000

 00000142			_stackFrame:
 00000142  B9 00000004		    mov     ECX, CODE_LENGTH
 00000147  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 0000014A  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 0000014D  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 00000150			_generateCode:
 00000150  8B 55 10		    mov     EDX, [EBP + 16]         ; Reclaim the duplicate flag
 00000153  51			    push    ECX                     ; Preserve loop counter

 00000154  50			    push    EAX
 00000155  B8 00000008		    mov     EAX, COLORS
 0000015A  48			    dec     EAX
				    mArand  0, EAX, ECX             ; Get a random number and store to ECX
 0000015B  50		     1	    push        EAX
 0000015C  8B C0	     1	    mov         EAX, EAX
 0000015E  83 E8 00	     1	    sub         EAX, 0
 00000161  40		     1	    inc         EAX
 00000162  E8 00000000 E     1	    call        RandomRange
 00000167  83 C0 00	     1	    add         EAX, 0
 0000016A  8B C8	     1	    mov         ECX, EAX
 0000016C  58		     1	    pop         EAX
 0000016D  58			    pop     EAX

 0000016E  83 FA 01		    cmp     EDX, TRUE
 00000171  74 4D		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 00000173  8B D1		    mov     EDX, ECX                ; EDX is now random number
 00000175  59			    pop     ECX                     ; ECX is loop counter again

 00000176			    _checkCode:
 00000176  89 15 000004CF R	        mov             user_guess[0], EDX      ; Store the current candidate in user_guess[0]

				        ; comparing user_guess(candidate, index, ?, ?) and solution(accepted codes) elements - updates hits and blows
 0000017C  68 000004EB R	        push            OFFSET blows
 00000181  68 000004E7 R	        push            OFFSET hits
 00000186  E8 00000111		        call            CheckSimilar

 0000018B  83 3D 000004E7 R	        cmp             hits, 0
	   00
 00000192  7F BC		        jg              _generateCode
 00000194  83 3D 000004EB R	        cmp             blows, 0
	   00
 0000019B  7F B3		        jg              _generateCode       ; check if the candidate has already been selected, run generate code over if so

 0000019D  53			        push            EBX
 0000019E  8B 1D 000004F3 R	        mov             EBX, T_HelperVar
 000001A4  89 93 0000043F R	        mov             solution[EBX], EDX  ; store the accepted candidate in the next slot of the solution array
 000001AA  5B			        pop             EBX

 000001AB  50			        push            EAX
 000001AC  B8 00000004		        mov             EAX, TYPE user_guess
 000001B1  01 05 000004F3 R	        add             T_HelperVar, EAX    ; increment index accumulator
 000001B7  58			        pop             EAX


 000001B8  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 000001B9  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 000001BB  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 000001C0			    _allowDuplicates:
 000001C0  89 08		    mov     [EAX], ECX              ; Store in next index

 000001C2  59			    pop     ECX                     ; restore loop counter

 000001C3  03 C3		    add     EAX, EBX                ; Increment index

 000001C5  E2 89		    loop    _generateCode

 000001C7  5A			pop         EDX
 000001C8  59			pop         ECX
 000001C9  5B			pop         EBX
 000001CA  58			pop         EAX
 000001CB  5D			pop         EBP

 000001CC  C2 000C		ret         12
 000001CF			GenerateCode ENDP


				; -------------------------------------------------------- -
 000001CF			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 000001CF  55			push                EBP
 000001D0  8B EC		mov                 EBP, ESP

 000001D2  53			push                EBX
 000001D3  51			push                ECX
 000001D4  52			push                EDX

 000001D5			_stackFrame:
 000001D5  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 000001D8  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 000001DB  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 000001DE  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 000001E0  03 D8		add                 EBX, EAX                ; Get to array[n]
 000001E2  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 000001E4  5A			pop                 EDX
 000001E5  59			pop                 ECX
 000001E6  5B			pop                 EBX

 000001E7  5D			pop                 EBP

 000001E8  C2 000C		ret 12
 000001EB			ArrayAt ENDP

				; -------------------------------------------------------- -
 000001EB			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 000001EB  55			push                EBP
 000001EC  8B EC		mov                 EBP, ESP

 000001EE  50			push                EAX
 000001EF  53			push                EBX
 000001F0  51			push                ECX

 000001F1			_stackFrame:
 000001F1  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 000001F4  51			push                ECX
 000001F5  68 000002A7 R	push                OFFSET MAP_background_color
 000001FA  6A 04		push                TYPE MAP_background_color
 000001FC  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 00000201  BB 00000010		mov                 EBX, 16
 00000206  F7 E3		mul                 EBX

				; Preserve background in EBX
 00000208  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 0000020A  51			push                ECX
 0000020B  68 000002D3 R	push                OFFSET MAP_text_color
 00000210  6A 04		push                TYPE MAP_text_color
 00000212  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 00000217  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000219  E8 00000000 E	call                SetTextColor

 0000021E  59			pop                 ECX
 0000021F  5B			pop                 EBX
 00000220  58			pop                 EAX

 00000221  5D			pop                 EBP

 00000222  C2 0004		ret 4
 00000225			SetColorFromPalette ENDP

				; --------------------------------------------------------
 00000225			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 00000225  55			push            EBP
 00000226  8B EC		mov             EBP, ESP

 00000228  50			push            EAX
 00000229  53			push            EBX
 0000022A  51			push            ECX
 0000022B  52			push            EDX

 0000022C			_stackFrame:
 0000022C  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 0000022F  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 00000232  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 00000235			_moveCursor:
 00000235  50			    push        EAX

 00000236  8B C3		    mov         EAX, EBX                ; insert y
 00000238  48			    dec         EAX                     ; shift back for 1-indexing
 00000239  BB 00000100		    mov         EBX, 256
 0000023E  F7 E3		    mul         EBX                     ; shift y to subregister AH

 00000240  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 00000242  48			    dec         EAX                     ; shift back for 1-indexing

 00000243  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 00000245  E8 00000000 E	    call        GotoXY
 0000024A  58			    pop         EAX

 0000024B  83 F8 02		cmp             EAX, HIT
 0000024E  74 2F		je              _hit

 00000250  83 F8 01		cmp             EAX, BLOW
 00000253  74 15		je              _blow

 00000255			_miss:
 00000255  6A 08		    push        8
 00000257  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 0000025C  52		     1	    push        EDX
 0000025D  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 00000262  E8 00000000 E     1	    call        WriteString
 00000267  5A		     1	    pop         EDX
 00000268  EB 2A		    jmp         _done
 0000026A			_blow:
 0000026A  6A 09		    push        9
 0000026C  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 00000271  52		     1	    push        EDX
 00000272  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 00000277  E8 00000000 E     1	    call        WriteString
 0000027C  5A		     1	    pop         EDX
 0000027D  EB 15		    jmp         _done
 0000027F			_hit:
 0000027F  6A 0A		    push        10
 00000281  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 00000286  52		     1	    push        EDX
 00000287  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 0000028C  E8 00000000 E     1	    call        WriteString
 00000291  5A		     1	    pop         EDX
 00000292  EB 00		    jmp         _done

 00000294			_done:

 00000294  5A			pop             EDX
 00000295  59			pop             ECX
 00000296  5B			pop             EBX
 00000297  58			pop             EAX

 00000298  5D			pop             EBP

 00000299  C2 000C		ret 12
 0000029C			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 0000029C			CheckSimilar PROC
				; Author:           Hla Htun (Trenton Young made small contribution)
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have user_guess and solution as global variables
				;                   Both of the arrays must have a size of 4
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 0000029C  55			    push    EBP
 0000029D  8B EC		    mov     EBP, ESP

 0000029F  50			    push    EAX
 000002A0  53			    push    EBX
 000002A1  51			    push    ECX

 000002A2  B8 00000000		    mov     EAX, 0
 000002A7  8B 5D 08		    mov     EBX, [EBP + 8]
 000002AA  89 03		    mov     [EBX], EAX      ; initializing hits variable
 000002AC  8B 5D 0C		    mov     EBX, [EBP + 12]
 000002AF  89 03		    mov     [EBX], EAX      ; initializing blows variable
 000002B1  A3 000004F7 R	    mov     matches, EAX

 000002B6  B9 00000000		    mov     ECX, 0
 000002BB			    PrintUserGuess:
 000002BB  51			        push    ECX
 000002BC  68 000004CF R	        push    OFFSET user_guess
 000002C1  6A 04		        push    TYPE user_guess
 000002C3  E8 FFFFFF07		        call    ArrayAt
 000002C8  A3 000004EF R	        mov     helperVar1, EAX

 000002CD  51			        push    ECX
 000002CE  68 0000043F R	        push    OFFSET solution
 000002D3  6A 04		        push    TYPE solution
 000002D5  E8 FFFFFEF5		        call    ArrayAt
 000002DA  8B 1D 000004EF R	        mov     EBX, helperVar1
 000002E0  3B D8		        cmp     EBX, EAX
 000002E2  74 02		        JE      isAHit
 000002E4  EB 07		        JMP     notAHit
 000002E6			        isAHit:
 000002E6  83 05 000004E7 R	            add hits, 1
	   01

 000002ED			        notAHit:
				            ; ECX => i
				            ; EBX => j
 000002ED  A3 000004EF R	            mov     helperVar1, EAX
 000002F2  8B 1D 000004E7 R	            mov     EBX, hits
 000002F8			            loop2ndArray:
 000002F8  53			                push    EBX
 000002F9  68 000004CF R	                push    OFFSET user_guess
 000002FE  6A 04		                push    TYPE user_guess
 00000300  E8 FFFFFECA		                call    ArrayAt
 00000305  3B 05 000004EF R	                cmp     EAX, helperVar1
 0000030B  74 0A		                JE      isAMatch
 0000030D  83 FB 03		                cmp     EBX, 3
 00000310  74 0E		                JE      outOfisThisInArray
 00000312  83 C3 01		                add     EBX, 1
 00000315  EB E1		                JMP     loop2ndArray

 00000317			            isAMatch:
 00000317  83 05 000004F7 R	                add     matches, 1
	   01
 0000031E  EB 00		                JMP     outOfisThisInArray


 00000320			        outOfisThisInArray:
 00000320  83 F9 03		            cmp     ECX, 3
 00000323  74 05		            JE      outOfPrintUserGuess
 00000325  83 C1 01		            add     ECX, 1
 00000328  EB 91		            JMP     PrintUserGuess

 0000032A			outOfPrintUserGuess:
 0000032A  8B 5D 08		    mov     EBX, [EBP + 8]
 0000032D  A1 000004E7 R	    mov     EAX, hits
 00000332  89 03		    mov     [EBX], EAX      ; saving to hits variable

 00000334  A1 000004F7 R	    mov     EAX, matches
 00000339  2B 05 000004E7 R	    sub     EAX, hits
 0000033F  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000342  89 03		    mov     [EBX], EAX      ; saving to blows variable

 00000344  59			    pop     ECX
 00000345  5B			    pop     EBX
 00000346  58			    pop     EAX

 00000347  5D			    pop     EBP
 00000348  C2 0008		    ret     8
 0000034B			CheckSimilar ENDP


				; -------------------------------------------------------- -
 0000034B			PrintSolution PROC
				; Author:           Cameron Kroeker (Trenton Young made small contribution)
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -
 0000034B  50			push    EAX
 0000034C  57			push    EDI

 0000034D  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 00000352  8B 87 0000043F R	mov EAX, solution[EDI]
				mPlacePeg       75, 7, EAX
 00000358  52		     2	    push        EDX
 00000359  B2 4B	     2	    mov         dl, 75
 0000035B  FE CA	     2	    dec         dl
 0000035D  B6 07	     2	    mov         dh, 7
 0000035F  FE CE	     2	    dec         dh
 00000361  E8 00000000 E     2	    call        Gotoxy
 00000366  5A		     2	    pop         EDX
 00000367  50		     1	    push        EAX
 00000368  E8 FFFFFE7E	     1	    call        SetColorFromPalette
 0000036D  52		     2	    push        EDX
 0000036E  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000373  E8 00000000 E     2	    call        WriteString
 00000378  5A		     2	    pop         EDX

 00000379  8B 87 00000443 R	mov EAX, solution[EDI+4]
				mPlacePeg       75, 9, EAX
 0000037F  52		     2	    push        EDX
 00000380  B2 4B	     2	    mov         dl, 75
 00000382  FE CA	     2	    dec         dl
 00000384  B6 09	     2	    mov         dh, 9
 00000386  FE CE	     2	    dec         dh
 00000388  E8 00000000 E     2	    call        Gotoxy
 0000038D  5A		     2	    pop         EDX
 0000038E  50		     1	    push        EAX
 0000038F  E8 FFFFFE57	     1	    call        SetColorFromPalette
 00000394  52		     2	    push        EDX
 00000395  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000039A  E8 00000000 E     2	    call        WriteString
 0000039F  5A		     2	    pop         EDX

 000003A0  8B 87 00000447 R	mov EAX, solution[EDI+8]
				mPlacePeg       75, 11, EAX
 000003A6  52		     2	    push        EDX
 000003A7  B2 4B	     2	    mov         dl, 75
 000003A9  FE CA	     2	    dec         dl
 000003AB  B6 0B	     2	    mov         dh, 11
 000003AD  FE CE	     2	    dec         dh
 000003AF  E8 00000000 E     2	    call        Gotoxy
 000003B4  5A		     2	    pop         EDX
 000003B5  50		     1	    push        EAX
 000003B6  E8 FFFFFE30	     1	    call        SetColorFromPalette
 000003BB  52		     2	    push        EDX
 000003BC  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003C1  E8 00000000 E     2	    call        WriteString
 000003C6  5A		     2	    pop         EDX

 000003C7  8B 87 0000044B R	mov EAX, solution[EDI+12]
				mPlacePeg       75, 13, EAX
 000003CD  52		     2	    push        EDX
 000003CE  B2 4B	     2	    mov         dl, 75
 000003D0  FE CA	     2	    dec         dl
 000003D2  B6 0D	     2	    mov         dh, 13
 000003D4  FE CE	     2	    dec         dh
 000003D6  E8 00000000 E     2	    call        Gotoxy
 000003DB  5A		     2	    pop         EDX
 000003DC  50		     1	    push        EAX
 000003DD  E8 FFFFFE09	     1	    call        SetColorFromPalette
 000003E2  52		     2	    push        EDX
 000003E3  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003E8  E8 00000000 E     2	    call        WriteString
 000003ED  5A		     2	    pop         EDX
				;
				;movzx EAX, solution[EDI]
				;mPlacePeg       75, 7, EAX
				;
				;movzx EAX, solution[EDI+1]
				;mPlacePeg       75, 9, EAX
				;
				;movzx EAX, solution[EDI+2]
				;mPlacePeg       75, 11, EAX
				;
				;movzx EAX, solution[EDI+3]
				;mPlacePeg       75, 13, EAX


				;Set color back to White
 000003EE  6A 08		push            8
 000003F0  E8 FFFFFDF6		call            SetColorFromPalette


 000003F5  B8 00000000		mov EAX, 0

 000003FA  5F			pop     EDI
 000003FB  58			pop     EAX

 000003FC  C3			ret
 000003FD			PrintSolution ENDP


				; -------------------------------------------------------- -
 000003FD			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into user_guess
				;
				; Helper Variables: currX, currIndex, user_guess
				;
				; Parameters:       push OFFSET array
				;                   call 
				;                   
				; Postconditions:   Updated user_guess
				; -------------------------------------------------------- -
 000003FD  55			push            EBP
 000003FE  8B EC		mov             EBP, ESP

 00000400  50			push            EAX
 00000401  53			push            EBX
 00000402  51			push            ECX
 00000403  52			push            EDX

 00000404			_init_variables:
 00000404  8B 7D 08		    mov             EDI, [EBP + 8]      ; Array offset 
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be displayed.

 00000407  52		     1	    push        EDX
 00000408  B2 01	     1	    mov         dl, 1
 0000040A  FE CA	     1	    dec         dl
 0000040C  B6 11	     1	    mov         dh, 17
 0000040E  FE CE	     1	    dec         dh
 00000410  E8 00000000 E     1	    call        Gotoxy
 00000415  5A		     1	    pop         EDX
 00000416  B9 00000000		    mov             ECX, 0
 0000041B  89 0F		    mov             [EDI], ECX
 0000041D  89 4F 04		    mov             [EDI + 4], ECX
 00000420  89 4F 08		    mov             [EDI + 8], ECX
 00000423  89 4F 0C		    mov             [EDI + 12], ECX
				    
				    
 00000426			_string:
				    mPrint          selectColor
 00000426  52		     1	    push        EDX
 00000427  BA 0000031A R     1	    mov         EDX, OFFSET selectColor
 0000042C  E8 00000000 E     1	    call        WriteString
 00000431  5A		     1	    pop         EDX



				; Initialize the screen and ECX to show a color before the user hits the arrow keys. 
 00000432			_preloop:

 00000432  8B 1D 000004FF R	mov             EBX, currY              ; init current y
 00000438  A1 000004FB R	mov             EAX, currX              ; init current x
 0000043D  8B 0F		mov             ECX, [EDI] 
				mPlacePeg       al, bl, ECX             ; place peg on coordinate
 0000043F  52		     2	    push        EDX
 00000440  8A D0	     2	    mov         dl, al
 00000442  FE CA	     2	    dec         dl
 00000444  8A F3	     2	    mov         dh, bl
 00000446  FE CE	     2	    dec         dh
 00000448  E8 00000000 E     2	    call        Gotoxy
 0000044D  5A		     2	    pop         EDX
 0000044E  51		     1	    push        ECX
 0000044F  E8 FFFFFD97	     1	    call        SetColorFromPalette
 00000454  52		     2	    push        EDX
 00000455  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000045A  E8 00000000 E     2	    call        WriteString
 0000045F  5A		     2	    pop         EDX

				;  loop until user inputs a code

 00000460			_loop:
 00000460  B8 00000032		    mov             EAX, 50
 00000465  E8 00000000 E	    call            Delay
 0000046A  E8 00000000 E	    call            ReadKey
 0000046F  74 EF		    jz              _loop

 00000471  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx
 00000474  83 FA 25		cmp             EDX, 37                 ; left
 00000477  74 6B		je              _decrease



 00000479  83 FA 27		cmp             EDX, 39                 ; right
 0000047C  74 24		je              _increase

 0000047E  83 FA 0D		cmp             EDX, 13                 ; enter
 00000481  0F 84 0000009F	je              _enter

 00000487  83 FA 28		cmp             EDX, 40                 ; down
 0000048A  0F 84 00000096	je              _enter

 00000490  83 FA 26		cmp             EDX, 38                 ; up
 00000493  0F 84 000000C8	je              _up

 00000499  83 FA 08		cmp             EDX, 8                  ; backspace
 0000049C  0F 84 000000BF	je              _up

 000004A2			_increase:

 000004A2  83 C1 01		add             ECX, 1                  ; increment color map
 000004A5  83 F9 08		cmp             ECX, 8                  ; check if current index is too high

 000004A8  7D 02		jge             _resetHigh
 000004AA  EB 05		jmp             _getColorHigh   

 000004AC			    _resetHigh: 
 000004AC  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 000004B1			    _getColorHigh:
 000004B1  A1 000004FB R	    mov             EAX, currX          ; move the current x index into EAX so mPlacePeg can use AL
 000004B6  8B 1D 000004FF R	    mov             EBX, currY          ; move current y index into EBX so mPlacePeg can use BL
				    mPlacePeg       al, bl, ECX
 000004BC  52		     2	    push        EDX
 000004BD  8A D0	     2	    mov         dl, al
 000004BF  FE CA	     2	    dec         dl
 000004C1  8A F3	     2	    mov         dh, bl
 000004C3  FE CE	     2	    dec         dh
 000004C5  E8 00000000 E     2	    call        Gotoxy
 000004CA  5A		     2	    pop         EDX
 000004CB  51		     1	    push        ECX
 000004CC  E8 FFFFFD1A	     1	    call        SetColorFromPalette
 000004D1  52		     2	    push        EDX
 000004D2  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000004D7  E8 00000000 E     2	    call        WriteString
 000004DC  5A		     2	    pop         EDX
 000004DD  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]
				                                        
 000004DF  E9 FFFFFF7C		jmp             _loop                   ; Loop until a new key press

 000004E4			_decrease:

 000004E4  83 F9 00		cmp             ECX, 0
 000004E7  74 05		je              _resetLow
 000004E9  83 E9 01		sub             ECX, 1
 000004EC  EB 05		jmp             _getColorLow
 000004EE			    _resetLow:
 000004EE  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 000004F3			    _getColorLow:
 000004F3  A1 000004FB R	    mov             EAX, currX          ; move current x index into EAX so it can be used in mPlacePeg
 000004F8  8B 1D 000004FF R	    mov             EBX, currY          ; move current y index to EBX to be used in mPlacePeg
				    mPlacePeg       al, bl, ECX
 000004FE  52		     2	    push        EDX
 000004FF  8A D0	     2	    mov         dl, al
 00000501  FE CA	     2	    dec         dl
 00000503  8A F3	     2	    mov         dh, bl
 00000505  FE CE	     2	    dec         dh
 00000507  E8 00000000 E     2	    call        Gotoxy
 0000050C  5A		     2	    pop         EDX
 0000050D  51		     1	    push        ECX
 0000050E  E8 FFFFFCD8	     1	    call        SetColorFromPalette
 00000513  52		     2	    push        EDX
 00000514  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000519  E8 00000000 E     2	    call        WriteString
 0000051E  5A		     2	    pop         EDX
 0000051F  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]
				                                        
 00000521  E9 FFFFFF3A		jmp             _loop                   ; Loop until a new key press

 00000526			_enter:

 00000526  83 3D 00000503 R	cmp             currIndex, 3            ; Check if 4th peg
	   03
 0000052D  74 02		je              _onlyEnter              ; jump to check if downkey pressed
 0000052F  EB 0C		jmp             _break                  ; else continue on 
 00000531			_onlyEnter:
 00000531  83 FA 28		    cmp             EDX, 40             ; Check if downkey was pressed
 00000534  74 02		    je              downKey             ; if so, jump to downKey
 00000536  EB 05		    jmp             _break              ; else continue on
 00000538			    downKey:
 00000538  E9 FFFFFEF5		        jmp             _preloop        ; jump to preloop to avoid accidental downkey entering users code
 0000053D			_break:

 0000053D  83 C7 04		add             EDI, 4                  ; increment current index
 00000540  A1 000004FF R	mov             EAX, currY              ; move current y coordinate into eax
 00000545  83 C0 02		add             EAX, 2                  ; incease it by 2
 00000548  A3 000004FF R	mov             currY, EAX              ; store updated currY

 0000054D  FF 05 00000503 R	inc             currIndex               ; increment current index in user_guess
 00000553  83 3D 00000503 R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 0000055A  7D 30		jge             _end
 0000055C  E9 FFFFFED1		jmp             _preloop                ; loop to get a new number

 00000561			_up:
 00000561  A1 000004FF R	    mov         EAX, currY
 00000566  83 F8 07		    cmp         EAX, 7                  ; compare current y coord with 7. If it's 7, just go back to looping.
 00000569  0F 84 FFFFFEF1	    je          _loop
 0000056F  83 E8 02		    sub         EAX, 2                  ; subtract 2 from currY to get to peg above currY
 00000572  A3 000004FF R	    mov         currY, EAX
 00000577  83 EF 04		    sub         EDI, 4                  ; move array pointer back to previous entry
 0000057A  A1 00000503 R	    mov         EAX, currIndex
 0000057F  83 E8 01		    sub         EAX, 1                  ; subtract 1 from currIndex
 00000582  A3 00000503 R	    mov         currIndex, EAX
 00000587  E9 FFFFFEA6		    jmp         _preloop                ; go to preloop


 0000058C			_end:                                   ; break out of loop and return
 0000058C  6A 08		push            8
 0000058E  E8 FFFFFC58		call            SetColorFromPalette     ; set color back to white

 00000593  C7 05 000004FF R	mov             currY, 7                ; reset currY for next round
	   00000007
 0000059D  A1 000004FB R	mov             EAX, currX              ; set currX to currX + 8 to get next round x coordinate
 000005A2  83 C0 08		add             EAX, 8

 000005A5  5A			pop             EDX
 000005A6  59			pop             ECX
 000005A7  5B			pop             EBX
 000005A8  58			pop             EAX
 000005A9  5D			pop             EBP
 000005AA  C2 0004		ret 4
 000005AD			GetUserCode ENDP


				; -------------------------------------------------------- -
 000005AD			PromptMsg PROC
				; Author:           Trenton Young
				; Description:      Gets the user's input in the form of text
				;                   input and then stores the corresponding
				;                   boolean value in EAX
				;
				; Parameters:       push OFFSET message
				;                   call
				;
				; Postconditions:   EAX will contain the TRUE or FALSE
				; -------------------------------------------------------- -
 000005AD  55			push                EBP
 000005AE  8B EC		mov                 EBP, ESP

 000005B0  51			push                ECX
 000005B1  52			push                EDX

				; Set text color to default
 000005B2  6A 08		push                8
 000005B4  E8 FFFFFC32		call                SetColorFromPalette

 000005B9			_stackFrame:
 000005B9  8B 55 08		    mov             EDX, [EBP + 8]          ; OFFSET message

 000005BC  E8 00000000 E	call                WriteString
 000005C1  E8 00000000 E	call                Crlf

 000005C6  EB 1D		jmp _endInvalid
 000005C8			_invalid:
				    ; Set to error message color
 000005C8  6A 0A		    push            10
 000005CA  E8 FFFFFC1C		    call            SetColorFromPalette

 000005CF  BA 00000366 R	    mov             EDX, OFFSET invalidCharMsg
 000005D4  E8 00000000 E	    call            WriteString
 000005D9  E8 00000000 E	    call            Crlf

 000005DE  6A 08		    push            8
 000005E0  E8 FFFFFC06		    call            SetColorFromPalette
 000005E5			_endInvalid:

 000005E5  E8 00000000 E	call                ReadChar

 000005EA  0F B6 15		movzx               EDX, YES
	   000002FF R
 000005F1  0F B6 C8		movzx               ECX, AL
 000005F4  3B D1		cmp                 EDX, ECX
 000005F6  74 10		je                  _true

 000005F8  0F B6 15		movzx               EDX, NO
	   00000300 R
 000005FF  0F B6 C8		movzx               ECX, AL
 00000602  3B D1		cmp                 EDX, ECX
 00000604  74 09		je                  _false

 00000606  EB C0		jmp                 _invalid

 00000608			_true:
 00000608  B8 00000001		    mov             EAX, TRUE
 0000060D  EB 05		    jmp             _end

 0000060F			_false:
 0000060F  B8 00000000		    mov             EAX, FALSE

 00000614			_end:

 00000614  5A			pop                 EDX
 00000615  59			pop                 ECX

 00000616  5D			pop                 EBP

 00000617  C2 0004		ret 4
 0000061A			PromptMsg ENDP

				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/10/23 20:25:46
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000507 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000061A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 000001CF _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001D5 _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 0000029C _TEXT	Length= 000000AF Public STDCALL
  PrintUserGuess . . . . . . . .	L Near	 000002BB _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 000002E6 _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 000002ED _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 000002F8 _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 00000317 _TEXT	
  outOfisThisInArray . . . . . .	L Near	 00000320 _TEXT	
  outOfPrintUserGuess  . . . . .	L Near	 0000032A _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 0000007D _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 000000C4 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 00000104 _TEXT	Length= 000000CB Public STDCALL
  _clearCheckArrays  . . . . . .	L Near	 0000011F _TEXT	
  _stackFrame  . . . . . . . . .	L Near	 00000142 _TEXT	
  _generateCode  . . . . . . . .	L Near	 00000150 _TEXT	
  _checkCode . . . . . . . . . .	L Near	 00000176 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 000001C0 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 000003FD _TEXT	Length= 000001B0 Public STDCALL
  _init_variables  . . . . . . .	L Near	 00000404 _TEXT	
  _string  . . . . . . . . . . .	L Near	 00000426 _TEXT	
  _preloop . . . . . . . . . . .	L Near	 00000432 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000460 _TEXT	
  _increase  . . . . . . . . . .	L Near	 000004A2 _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 000004AC _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 000004B1 _TEXT	
  _decrease  . . . . . . . . . .	L Near	 000004E4 _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 000004EE _TEXT	
  _getColorLow . . . . . . . . .	L Near	 000004F3 _TEXT	
  _enter . . . . . . . . . . . .	L Near	 00000526 _TEXT	
  _onlyEnter . . . . . . . . . .	L Near	 00000531 _TEXT	
  downKey  . . . . . . . . . . .	L Near	 00000538 _TEXT	
  _break . . . . . . . . . . . .	L Near	 0000053D _TEXT	
  _up  . . . . . . . . . . . . .	L Near	 00000561 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000058C _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 00000225 _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 0000022C _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 00000235 _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 00000255 _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 0000026A _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 0000027F _TEXT	
  _done  . . . . . . . . . . . .	L Near	 00000294 _TEXT	
PrintSolution  . . . . . . . . .	P Near	 0000034B _TEXT	Length= 000000B2 Public STDCALL
PromptMsg  . . . . . . . . . . .	P Near	 000005AD _TEXT	Length= 0000006D Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000005B9 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 000005C8 _TEXT	
  _endInvalid  . . . . . . . . .	L Near	 000005E5 _TEXT	
  _true  . . . . . . . . . . . .	L Near	 00000608 _TEXT	
  _false . . . . . . . . . . . .	L Near	 0000060F _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000614 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 000001EB _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000001F1 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007D Public STDCALL
  ProgramSetup . . . . . . . . .	L Near	 00000000 _TEXT	
  InitialGreeting  . . . . . . .	L Near	 0000000F _TEXT	
  PromptForRules . . . . . . . .	L Near	 0000000F _TEXT	
  DisplayRules . . . . . . . . .	L Near	 0000001E _TEXT	
  PromptForDuplicates  . . . . .	L Near	 00000027 _TEXT	
  NewGamestate . . . . . . . . .	L Near	 00000036 _TEXT	
  GameTurn . . . . . . . . . . .	L Near	 00000055 _TEXT	
  WinnerCelebration  . . . . . .	L Near	 00000076 _TEXT	
  LoserAdmonishment  . . . . . .	L Near	 00000076 _TEXT	
  PromptForPlayAgain . . . . . .	L Near	 00000076 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NO . . . . . . . . . . . . . . .	Byte	 00000300 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OUT_OF_RANGE_1 . . . . . . . . .	Number	 00000064h   
OUT_OF_RANGE_2 . . . . . . . . .	Number	 000000C8h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
T_HelperVar  . . . . . . . . . .	DWord	 000004F3 _DATA	
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
YES  . . . . . . . . . . . . . .	Byte	 000002FF _DATA	
allowDuplicates  . . . . . . . .	DWord	 000004E3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 000004EB _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 00000503 _DATA	
currX  . . . . . . . . . . . . .	DWord	 000004FB _DATA	
currY  . . . . . . . . . . . . .	DWord	 000004FF _DATA	
current_round  . . . . . . . . .	Byte	 0000043E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	DWord	 0000044F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000301 _DATA	
helperVar1 . . . . . . . . . . .	DWord	 000004EF _DATA	
hits . . . . . . . . . . . . . .	DWord	 000004E7 _DATA	
invalidCharMsg . . . . . . . . .	Byte	 00000366 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 000004F7 _DATA	
prompt_duplicates  . . . . . . .	Byte	 000003BD _DATA	
prompt_rules . . . . . . . . . .	Byte	 00000380 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectColor  . . . . . . . . . .	Byte	 0000031A _DATA	
solution . . . . . . . . . . . .	DWord	 0000043F _DATA	
userHasWon . . . . . . . . . . .	DWord	 000004DF _DATA	
user_guess . . . . . . . . . . .	DWord	 000004CF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
