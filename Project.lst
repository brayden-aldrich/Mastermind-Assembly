Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/08/23 08:51:26
Mastermind			(AddTwo.asm		     Page 1 - 1


				 TITLE Mastermind			(AddTwo.asm)

				; Author(s) : Trenton Young
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE = 1
 = 00000000			FALSE = 0

 = 00000002			HIT = 2
 = 00000001			BLOW = 1
 = 00000000			MISS = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses

 = 00000064			OUT_OF_RANGE_1 = 100
 = 000000C8			OUT_OF_RANGE_2 = 200

				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range from Irvine's WriteString,
				;               output is stored in given register
				;
				; Use:          _low and _high may be literals, _target may
				;               be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM

 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND!", CR, LF, 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 21 0D 0A 00
 00000318 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00

				; (Gamestate)               Variables defining gameplay

 00000364 00			current_round               BYTE        0

 00000365  00000004 [		solution                    DWORD        CODE_LENGTH DUP(?)
	    00000000
	   ]
 00000375  00000004 [		game_matrix                 DWORD        CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00000000
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 000003F5  00000004 [		user_guess                  DWORD        CODE_LENGTH DUP(?)                     ; TODO consolidate arrays from test phase - Trenton Young
	    00000000
	   ]

				; Hits and Blows            hits and blows will be stored in these variables
 00000405 00000000		hits                        DWORD       0
 00000409 00000000		blows                       DWORD       0
 0000040D  00000004 [		uArray                      DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_1)       ; user guesses         ; TODO consolidate arrays from test phase - Trenton Young
	    00000064
	   ]
 0000041D  00000004 [		solArray                    DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_2)       ; peg positions?       ; TODO consolidate arrays from test phase - Trenton Young
	    000000C8
	   ]
 0000042D 00000000		helperVar1                  DWORD       ?
 00000431 00000000		matches                     DWORD       ?

				; Hits and Blows temporary helper variables   - feel free to delete after
 00000435 43 6F 6D 70 61	msgHh1                      BYTE        "Comparing arrays", LF, 0
	   72 69 6E 67 20
	   61 72 72 61 79
	   73 0A 00
 00000447 55 73 65 72 20	msgHh2                      BYTE        "User array: ", 0
	   61 72 72 61 79
	   3A 20 00
 00000454 0A 53 6F 6C 75	msgHh3                      BYTE        LF, "Solution array: ", 0
	   74 69 6F 6E 20
	   61 72 72 61 79
	   3A 20 00
 00000466 0A 68 69 74 73	msgHh4                      BYTE        LF, "hits: ", 0
	   3A 20 00
 0000046E 0A 62 6C 6F 77	msgHh5                      BYTE        LF, "blows: ", 0
	   73 3A 20 00
 00000477 20 00			msgSpace                    BYTE        " ", 0

 00000479			userArray                   DWORD       4 DUP(?)                                ; TODO consolidate arrays from test phase - Trenton Young
 00000489 0000000F		currX                       DWORD       15              ; Helper var for GetUserCode. Stores current X coordinate. FOR START OF GAME, SET TO 7 ; TODO can probably be calculated on the fly (from test phase) - Trenton Young
 0000048D 00000007		currY                       DWORD       7               ; Helper var for GetUserCode. Stores current Y coordinate. FOR START OF GAME, SET TO 7
 00000491 00000000		currIndex                   DWORD       0               ; Helper var for GetUserCode. Will store current array index.


 00000000			.code
 00000000			main PROC; (insert executable instructions here)


				; --------------------------------------------------------
 00000000			setup:
				;
				; Runs functions that set the environment to expected
				; --------------------------------------------------------
 00000000  9B DB E3		finit
 00000003  E8 00000000 E	call            Randomize

 00000008  6A 08		push            8
 0000000A  E8 00000256		call            SetColorFromPalette

				; --------------------------------------------------------
 0000000F			gameplay:
				;
				; Runs the gameloop TODO contains test code right now
				; --------------------------------------------------------

 0000000F  E8 000000E8		call            DrawNewGameboard

				mPlacePeg       7, 7, 2
 00000014  52		     2	    push        EDX
 00000015  B2 07	     2	    mov         dl, 7
 00000017  FE CA	     2	    dec         dl
 00000019  B6 07	     2	    mov         dh, 7
 0000001B  FE CE	     2	    dec         dh
 0000001D  E8 00000000 E     2	    call        Gotoxy
 00000022  5A		     2	    pop         EDX
 00000023  6A 02	     1	    push        2
 00000025  E8 0000023B	     1	    call        SetColorFromPalette
 0000002A  52		     2	    push        EDX
 0000002B  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000030  E8 00000000 E     2	    call        WriteString
 00000035  5A		     2	    pop         EDX
				mPlacePeg       7, 9, 5
 00000036  52		     2	    push        EDX
 00000037  B2 07	     2	    mov         dl, 7
 00000039  FE CA	     2	    dec         dl
 0000003B  B6 09	     2	    mov         dh, 9
 0000003D  FE CE	     2	    dec         dh
 0000003F  E8 00000000 E     2	    call        Gotoxy
 00000044  5A		     2	    pop         EDX
 00000045  6A 05	     1	    push        5
 00000047  E8 00000219	     1	    call        SetColorFromPalette
 0000004C  52		     2	    push        EDX
 0000004D  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000052  E8 00000000 E     2	    call        WriteString
 00000057  5A		     2	    pop         EDX
				mPlacePeg       7, 11, 1
 00000058  52		     2	    push        EDX
 00000059  B2 07	     2	    mov         dl, 7
 0000005B  FE CA	     2	    dec         dl
 0000005D  B6 0B	     2	    mov         dh, 11
 0000005F  FE CE	     2	    dec         dh
 00000061  E8 00000000 E     2	    call        Gotoxy
 00000066  5A		     2	    pop         EDX
 00000067  6A 01	     1	    push        1
 00000069  E8 000001F7	     1	    call        SetColorFromPalette
 0000006E  52		     2	    push        EDX
 0000006F  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000074  E8 00000000 E     2	    call        WriteString
 00000079  5A		     2	    pop         EDX
				mPlacePeg       7, 13, 4
 0000007A  52		     2	    push        EDX
 0000007B  B2 07	     2	    mov         dl, 7
 0000007D  FE CA	     2	    dec         dl
 0000007F  B6 0D	     2	    mov         dh, 13
 00000081  FE CE	     2	    dec         dh
 00000083  E8 00000000 E     2	    call        Gotoxy
 00000088  5A		     2	    pop         EDX
 00000089  6A 04	     1	    push        4
 0000008B  E8 000001D5	     1	    call        SetColorFromPalette
 00000090  52		     2	    push        EDX
 00000091  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000096  E8 00000000 E     2	    call        WriteString
 0000009B  5A		     2	    pop         EDX

				mPlaceFeedback  7, 4, HIT
 0000009C  6A 07	     1	    push        7
 0000009E  6A 04	     1	    push        4
 000000A0  6A 02	     1	    push        HIT
 000000A2  E8 000001F8	     1	    call        PlaceFeedback
				mPlaceFeedback  8, 4, BLOW
 000000A7  6A 08	     1	    push        8
 000000A9  6A 04	     1	    push        4
 000000AB  6A 01	     1	    push        BLOW
 000000AD  E8 000001ED	     1	    call        PlaceFeedback
				mPlaceFeedback  7, 5, BLOW
 000000B2  6A 07	     1	    push        7
 000000B4  6A 05	     1	    push        5
 000000B6  6A 01	     1	    push        BLOW
 000000B8  E8 000001E2	     1	    call        PlaceFeedback

 000000BD  6A 00		push            FALSE
 000000BF  6A 04		push            TYPE solution
 000000C1  68 00000365 R	push            OFFSET solution
				;call            GenerateCode

				;call            PrintSolution


 000000C6  68 00000479 R	push            OFFSET userArray
 000000CB  E8 000003A2		call            GetUserCode


				; End of program steps
				mGotoXY         1, 20
 000000D0  52		     1	    push        EDX
 000000D1  B2 01	     1	    mov         dl, 1
 000000D3  FE CA	     1	    dec         dl
 000000D5  B6 14	     1	    mov         dh, 20
 000000D7  FE CE	     1	    dec         dh
 000000D9  E8 00000000 E     1	    call        Gotoxy
 000000DE  5A		     1	    pop         EDX

 000000DF  6A 08		push            8
 000000E1  E8 0000017F		call            SetColorFromPalette

				; comparing uArray and solArray elements - updates hits and blows
 000000E6  68 00000409 R	push            OFFSET blows
 000000EB  68 00000405 R	push            OFFSET hits
 000000F0  E8 00000221		call            CheckSimilar

				invoke EXITProcess, 0		; exit to operating system
 000000F5  6A 00	   *	    push   +000000000h
 000000F7  E8 00000000 E   *	    call   ExitProcess
 000000FC			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 000000FC			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 000000FC  51			push        ECX

 000000FD  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 00000102  52		     1	    push        EDX
 00000103  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 00000108  E8 00000000 E     1	    call        WriteString
 0000010D  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 0000010E  52		     1	    push        EDX
 0000010F  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 00000114  E8 00000000 E     1	    call        WriteString
 00000119  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 0000011A  52		     1	    push        EDX
 0000011B  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 00000120  E8 00000000 E     1	    call        WriteString
 00000125  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000126  52		     1	    push        EDX
 00000127  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 0000012C  E8 00000000 E     1	    call        WriteString
 00000131  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000132  52		     1	    push        EDX
 00000133  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 00000138  E8 00000000 E     1	    call        WriteString
 0000013D  5A		     1	    pop         EDX

 0000013E  B9 00000004		mov         ECX, ROWS
 00000143			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 00000143  52		     1	    push        EDX
 00000144  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000149  E8 00000000 E     1	    call        WriteString
 0000014E  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 0000014F  52		     1	    push        EDX
 00000150  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 00000155  E8 00000000 E     1	    call        WriteString
 0000015A  5A		     1	    pop         EDX

 0000015B  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 0000015D  52		     1	    push        EDX
 0000015E  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 00000163  E8 00000000 E     1	    call        WriteString
 00000168  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 00000169  52		     1	    push        EDX
 0000016A  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 0000016F  E8 00000000 E     1	    call        WriteString
 00000174  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 00000175  52		     1	    push        EDX
 00000176  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 0000017B  E8 00000000 E     1	    call        WriteString
 00000180  5A		     1	    pop         EDX

 00000181  59			pop         ECX

 00000182  C3			ret
 00000183			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 00000183			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code,
				;                   uArray and solArray will be mutated
				; -------------------------------------------------------- -
 00000183  55			push        EBP
 00000184  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000186  50			push        EAX
 00000187  53			push        EBX
 00000188  51			push        ECX
 00000189  52			push        EDX

 0000018A  B8 00000000		mov         EAX, 0
 0000018F  B9 00000004		mov         ECX, CODE_LENGTH

 00000194			_clearCheckArrays:
 00000194  C7 80 0000040D R	    mov     uArray[EAX], OUT_OF_RANGE_1
	   00000064
 0000019E  C7 80 0000041D R	    mov     solArray[EAX], OUT_OF_RANGE_2
	   000000C8

 000001A8  40			    inc     EAX
 000001A9  E2 E9		    loop    _clearCheckArrays

 000001AB  C7 05 0000040E R	    mov     uArray[1], 1            ; initialize k for the accepted code tracker (see _checkCode for formula)
	   00000001

 000001B5			_stackFrame:
 000001B5  B9 00000004		    mov     ECX, CODE_LENGTH
 000001BA  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 000001BD  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 000001C0  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 000001C3  EB 02		jmp _generateCode
 000001C5			_popTwo:
 000001C5  5B			    pop     EBX;
 000001C6  58			    pop     EAX;                    ; During the code checking, there are JMPs while registers are pushed,
 000001C7			_generateCode:
 000001C7  8B 55 10		    mov     EDX, [EBP + 16]         ; Reclaim the duplicate flag
 000001CA  51			    push    ECX                     ; Preserve loop counter

				    mArand  1, COLORS, ECX          ; Get a random number and store to EDX
 000001CB  50		     1	    push        EAX
 000001CC  B8 00000008	     1	    mov         EAX, COLORS
 000001D1  83 E8 01	     1	    sub         EAX, 1
 000001D4  40		     1	    inc         EAX
 000001D5  E8 00000000 E     1	    call        RandomRange
 000001DA  83 C0 01	     1	    add         EAX, 1
 000001DD  8B C8	     1	    mov         ECX, EAX
 000001DF  58		     1	    pop         EAX

 000001E0  83 FA 01		    cmp     EDX, TRUE
 000001E3  74 55		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 000001E5  8B D1		    mov     EDX, ECX                ; EDX is now random number
 000001E7  59			    pop     ECX                     ; ECX is loop counter again

 000001E8			    _checkCode:
				        ; Uses uArray[0] to store the current candidate to add to the code,
				        ;  and uArray[1] to store (codeLength * k) + 1 where k = number of accepted code inputs
 000001E8  50			        push            EAX
 000001E9  53			        push            EBX

 000001EA  A1 0000040E R	        mov             EAX, uArray[1]
 000001EF  BB 00000004		        mov             EBX, CODE_LENGTH

 000001F4  52			        push            EDX                 ; preserve EDX (random candidate) for DIV
 000001F5  99			            cdq
 000001F6  F7 F3		            div         EBX                 ; Decode step, current accepted code inputs is in EAX
 000001F8  5A			        pop             EDX

 000001F9  89 15 0000040D R	        mov             uArray[0], EDX      ; Store the current candidate in uArray[0]

				        ; comparing uArray(candidate, index, ?, ?) and solArray(accepted codes) elements - updates hits and blows
 000001FF  68 00000409 R	        push            OFFSET blows
 00000204  68 00000405 R	        push            OFFSET hits
 00000209  E8 00000108		        call            CheckSimilar

 0000020E  83 3D 00000405 R	        cmp             hits, 0             ; WARNING: EBX and EAX are on the stack here
	   00
 00000215  7F AE		        jg              _popTwo
 00000217  83 3D 00000409 R	        cmp             blows, 0            ; TODO every turn adds another blow
	   00
 0000021E  7F A5		        jg              _popTwo             ; check if the candidate has already been selected,
				                                            ; run generate code over if so BUT FIRST POP EBX AND EAX BACK IN PLACE

 00000220  89 90 0000041D R	        mov             solArray[EAX], EDX  ; store the accepted candidate in the next slot of the solution array

 00000226  52			        push            EDX                 ; preserve EDX (random candidate) for MUL
 00000227  40			            inc         EAX                 ; increment uArray[1] round counter
 00000228  F7 E3		            mul         EBX
 0000022A  A3 0000040E R	            mov         uArray[1], EAX      ; Re-encode step
 0000022F  5A			        pop             EDX

 00000230  5B			        pop             EBX
 00000231  58			        pop             EAX

 00000232  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 00000233  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 00000235  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 0000023A			    _allowDuplicates:
 0000023A  89 08		    mov     [EAX], ECX              ; Store in next index

 0000023C  59			    pop     ECX                     ; restore loop counter

 0000023D  03 C3		    add     EAX, EBX                ; Increment index

 0000023F  E2 86		    loop    _generateCode

 00000241  5A			pop         EDX
 00000242  59			pop         ECX
 00000243  5B			pop         EBX
 00000244  58			pop         EAX
 00000245  5D			pop         EBP

 00000246  C2 000C		ret         12
 00000249			GenerateCode ENDP


				; -------------------------------------------------------- -
 00000249			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 00000249  55			push                EBP
 0000024A  8B EC		mov                 EBP, ESP

 0000024C  53			push                EBX
 0000024D  51			push                ECX
 0000024E  52			push                EDX

 0000024F			_stackFrame:
 0000024F  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 00000252  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 00000255  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 00000258  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 0000025A  03 D8		add                 EBX, EAX                ; Get to array[n]
 0000025C  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 0000025E  5A			pop                 EDX
 0000025F  59			pop                 ECX
 00000260  5B			pop                 EBX

 00000261  5D			pop                 EBP

 00000262  C2 000C		ret 12
 00000265			ArrayAt ENDP

				; -------------------------------------------------------- -
 00000265			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 00000265  55			push                EBP
 00000266  8B EC		mov                 EBP, ESP

 00000268  50			push                EAX
 00000269  53			push                EBX
 0000026A  51			push                ECX

 0000026B			_stackFrame:
 0000026B  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 0000026E  51			push                ECX
 0000026F  68 000002A7 R	push                OFFSET MAP_background_color
 00000274  6A 04		push                TYPE MAP_background_color
 00000276  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 0000027B  BB 00000010		mov                 EBX, 16
 00000280  F7 E3		mul                 EBX

				; Preserve background in EBX
 00000282  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 00000284  51			push                ECX
 00000285  68 000002D3 R	push                OFFSET MAP_text_color
 0000028A  6A 04		push                TYPE MAP_text_color
 0000028C  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 00000291  03 C3		add                 EAX, EBX

				; Finally, set the color
 00000293  E8 00000000 E	call                SetTextColor

 00000298  59			pop                 ECX
 00000299  5B			pop                 EBX
 0000029A  58			pop                 EAX

 0000029B  5D			pop                 EBP

 0000029C  C2 0004		ret 4
 0000029F			SetColorFromPalette ENDP

				; --------------------------------------------------------
 0000029F			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 0000029F  55			push            EBP
 000002A0  8B EC		mov             EBP, ESP

 000002A2  50			push            EAX
 000002A3  53			push            EBX
 000002A4  51			push            ECX
 000002A5  52			push            EDX

 000002A6			_stackFrame:
 000002A6  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 000002A9  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 000002AC  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 000002AF			_moveCursor:
 000002AF  50			    push        EAX

 000002B0  8B C3		    mov         EAX, EBX                ; insert y
 000002B2  48			    dec         EAX                     ; shift back for 1-indexing
 000002B3  BB 00000100		    mov         EBX, 256
 000002B8  F7 E3		    mul         EBX                     ; shift y to subregister AH

 000002BA  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 000002BC  48			    dec         EAX                     ; shift back for 1-indexing

 000002BD  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 000002BF  E8 00000000 E	    call        GotoXY
 000002C4  58			    pop         EAX

 000002C5  83 F8 02		cmp             EAX, HIT
 000002C8  74 2F		je              _hit

 000002CA  83 F8 01		cmp             EAX, BLOW
 000002CD  74 15		je              _blow

 000002CF			_miss:
 000002CF  6A 08		    push        8
 000002D1  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 000002D6  52		     1	    push        EDX
 000002D7  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 000002DC  E8 00000000 E     1	    call        WriteString
 000002E1  5A		     1	    pop         EDX
 000002E2  EB 2A		    jmp         _done
 000002E4			_blow:
 000002E4  6A 09		    push        9
 000002E6  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 000002EB  52		     1	    push        EDX
 000002EC  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 000002F1  E8 00000000 E     1	    call        WriteString
 000002F6  5A		     1	    pop         EDX
 000002F7  EB 15		    jmp         _done
 000002F9			_hit:
 000002F9  6A 0A		    push        10
 000002FB  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 00000300  52		     1	    push        EDX
 00000301  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 00000306  E8 00000000 E     1	    call        WriteString
 0000030B  5A		     1	    pop         EDX
 0000030C  EB 00		    jmp         _done

 0000030E			_done:

 0000030E  5A			pop             EDX
 0000030F  59			pop             ECX
 00000310  5B			pop             EBX
 00000311  58			pop             EAX

 00000312  5D			pop             EBP

 00000313  C2 000C		ret 12
 00000316			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 00000316			CheckSimilar PROC
				; Author:           Hla Htun (Trenton Young made small contribution)
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have uArray and solArray as global variables
				;                   Both of the arrays must have a size of 4   TODO must they, though? - Trenton Young
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 00000316  55			    push    EBP
 00000317  8B EC		    mov     EBP, ESP

 00000319  50			    push    EAX
 0000031A  53			    push    EBX
 0000031B  51			    push    ECX

 0000031C  B8 00000000		    mov     EAX, 0
 00000321  8B 5D 08		    mov     EBX, [EBP + 8]
 00000324  89 03		    mov     [EBX], EAX      ; initializing hits variable
 00000326  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000329  89 03		    mov     [EBX], EAX      ; initializing blows variable


 0000032B  B9 00000000		    mov     ECX, 0
 00000330			    PrintuArray:
 00000330  51			        push    ECX
 00000331  68 0000040D R	        push    OFFSET uArray
 00000336  6A 04		        push    TYPE uArray
 00000338  E8 FFFFFF0C		        call    ArrayAt
 0000033D  A3 0000042D R	        mov     helperVar1, EAX

 00000342  51			        push    ECX
 00000343  68 0000041D R	        push    OFFSET solArray
 00000348  6A 04		        push    TYPE solArray
 0000034A  E8 FFFFFEFA		        call    ArrayAt
 0000034F  8B 1D 0000042D R	        mov     EBX, helperVar1
 00000355  3B D8		        cmp     EBX, EAX
 00000357  74 02		        JE      isAHit
 00000359  EB 07		        JMP     notAHit
 0000035B			        isAHit:
 0000035B  83 05 00000405 R	            add hits, 1
	   01

 00000362			        notAHit:
				            ; ECX => i
				            ; EBX => j
 00000362  A3 0000042D R	            mov     helperVar1, EAX
 00000367  8B 1D 00000405 R	            mov     EBX, hits
 0000036D			            loop2ndArray:
 0000036D  53			                push    EBX
 0000036E  68 0000040D R	                push    OFFSET uArray
 00000373  6A 04		                push    TYPE uArray
 00000375  E8 FFFFFECF		                call    ArrayAt
 0000037A  3B 05 0000042D R	                cmp     EAX, helperVar1
 00000380  74 0A		                JE      isAMatch
 00000382  83 FB 03		                cmp     EBX, 3
 00000385  74 0E		                JE      outOfisThisInArray
 00000387  83 C3 01		                add     EBX, 1
 0000038A  EB E1		                JMP     loop2ndArray

 0000038C			            isAMatch:
 0000038C  83 05 00000431 R	                add     matches, 1
	   01
 00000393  EB 00		                JMP     outOfisThisInArray


 00000395			        outOfisThisInArray:
 00000395  83 F9 03		            cmp     ECX, 3
 00000398  74 05		            JE      outOfPrintuArray
 0000039A  83 C1 01		            add     ECX, 1
 0000039D  EB 91		            JMP     PrintuArray

 0000039F			outOfPrintuArray:
 0000039F  8B 5D 08		    mov     EBX, [EBP + 8]
 000003A2  A1 00000405 R	    mov     EAX, hits
 000003A7  89 03		    mov     [EBX], EAX      ; saving to hits variable

 000003A9  A1 00000431 R	    mov     EAX, matches
 000003AE  2B 05 00000405 R	    sub     EAX, hits
 000003B4  8B 5D 0C		    mov     EBX, [EBP + 12]
 000003B7  89 03		    mov     [EBX], EAX      ; saving to blows variable

 000003B9  59			    pop     ECX
 000003BA  5B			    pop     EBX
 000003BB  58			    pop     EAX

 000003BC  5D			    pop     EBP
 000003BD  C2 0008		    ret     8
 000003C0			CheckSimilar ENDP


				; -------------------------------------------------------- -
 000003C0			PrintSolution PROC
				; Author:           Cameron Kroeker (Trenton Young made small contribution)
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -
 000003C0  50			push    EAX
 000003C1  57			push    EDI

 000003C2  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 000003C7  8B 87 00000365 R	mov EAX, solution[EDI]
				mPlacePeg       75, 7, EAX
 000003CD  52		     2	    push        EDX
 000003CE  B2 4B	     2	    mov         dl, 75
 000003D0  FE CA	     2	    dec         dl
 000003D2  B6 07	     2	    mov         dh, 7
 000003D4  FE CE	     2	    dec         dh
 000003D6  E8 00000000 E     2	    call        Gotoxy
 000003DB  5A		     2	    pop         EDX
 000003DC  50		     1	    push        EAX
 000003DD  E8 FFFFFE83	     1	    call        SetColorFromPalette
 000003E2  52		     2	    push        EDX
 000003E3  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000003E8  E8 00000000 E     2	    call        WriteString
 000003ED  5A		     2	    pop         EDX

 000003EE  8B 87 00000366 R	mov EAX, solution[EDI+1]
				mPlacePeg       75, 9, EAX
 000003F4  52		     2	    push        EDX
 000003F5  B2 4B	     2	    mov         dl, 75
 000003F7  FE CA	     2	    dec         dl
 000003F9  B6 09	     2	    mov         dh, 9
 000003FB  FE CE	     2	    dec         dh
 000003FD  E8 00000000 E     2	    call        Gotoxy
 00000402  5A		     2	    pop         EDX
 00000403  50		     1	    push        EAX
 00000404  E8 FFFFFE5C	     1	    call        SetColorFromPalette
 00000409  52		     2	    push        EDX
 0000040A  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000040F  E8 00000000 E     2	    call        WriteString
 00000414  5A		     2	    pop         EDX

 00000415  8B 87 00000367 R	mov EAX, solution[EDI+2]
				mPlacePeg       75, 11, EAX
 0000041B  52		     2	    push        EDX
 0000041C  B2 4B	     2	    mov         dl, 75
 0000041E  FE CA	     2	    dec         dl
 00000420  B6 0B	     2	    mov         dh, 11
 00000422  FE CE	     2	    dec         dh
 00000424  E8 00000000 E     2	    call        Gotoxy
 00000429  5A		     2	    pop         EDX
 0000042A  50		     1	    push        EAX
 0000042B  E8 FFFFFE35	     1	    call        SetColorFromPalette
 00000430  52		     2	    push        EDX
 00000431  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000436  E8 00000000 E     2	    call        WriteString
 0000043B  5A		     2	    pop         EDX

 0000043C  8B 87 00000368 R	mov EAX, solution[EDI+3]
				mPlacePeg       75, 13, EAX
 00000442  52		     2	    push        EDX
 00000443  B2 4B	     2	    mov         dl, 75
 00000445  FE CA	     2	    dec         dl
 00000447  B6 0D	     2	    mov         dh, 13
 00000449  FE CE	     2	    dec         dh
 0000044B  E8 00000000 E     2	    call        Gotoxy
 00000450  5A		     2	    pop         EDX
 00000451  50		     1	    push        EAX
 00000452  E8 FFFFFE0E	     1	    call        SetColorFromPalette
 00000457  52		     2	    push        EDX
 00000458  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000045D  E8 00000000 E     2	    call        WriteString
 00000462  5A		     2	    pop         EDX
				;
				;movzx EAX, solution[EDI]
				;mPlacePeg       75, 7, EAX
				;
				;movzx EAX, solution[EDI+1]
				;mPlacePeg       75, 9, EAX
				;
				;movzx EAX, solution[EDI+2]
				;mPlacePeg       75, 11, EAX
				;
				;movzx EAX, solution[EDI+3]
				;mPlacePeg       75, 13, EAX


				;Set color back to White
 00000463  6A 08		push            8
 00000465  E8 FFFFFDFB		call            SetColorFromPalette


 0000046A  B8 00000000		mov EAX, 0

 0000046F  5F			pop     EDI
 00000470  58			pop     EAX

 00000471  C3			ret
 00000472			PrintSolution ENDP


				; -------------------------------------------------------- -
 00000472			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into userArray
				;
				; Helper Variables: currX, currIndex, userArray
				;
				; Parameters:       push OFFSET array
				;                   call 
				;                   
				; Postconditions:   Updated userArray
				; -------------------------------------------------------- -
 00000472  55			push            EBP
 00000473  8B EC		mov             EBP, ESP

 00000475  50			push            EAX
 00000476  53			push            EBX
 00000477  51			push            ECX
 00000478  52			push            EDX

 00000479			_init_variables:
 00000479  8B 7D 08		    mov             EDI, [EBP + 8]      ; Array offset 
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be
 0000047C  52		     1	    push        EDX
 0000047D  B2 01	     1	    mov         dl, 1
 0000047F  FE CA	     1	    dec         dl
 00000481  B6 11	     1	    mov         dh, 17
 00000483  FE CE	     1	    dec         dh
 00000485  E8 00000000 E     1	    call        Gotoxy
 0000048A  5A		     1	    pop         EDX
				                                        ; displayed.
 0000048B			_string:
				    mPrint          selectColor
 0000048B  52		     1	    push        EDX
 0000048C  BA 00000318 R     1	    mov         EDX, OFFSET selectColor
 00000491  E8 00000000 E     1	    call        WriteString
 00000496  5A		     1	    pop         EDX



				; Initialize the screen and ECX to show a color before the user hits the arrow keys. 
 00000497			_preloop:
 00000497  A1 00000489 R	mov             EAX, currX              ; init current x
 0000049C  8B 1D 0000048D R	mov             EBX, currY              ; init current y
 000004A2  B9 00000000		mov             ECX, 0                  ; init red color
				mPlacePeg       al, bl, 0               ; place peg on coordinate
 000004A7  52		     2	    push        EDX
 000004A8  8A D0	     2	    mov         dl, al
 000004AA  FE CA	     2	    dec         dl
 000004AC  8A F3	     2	    mov         dh, bl
 000004AE  FE CE	     2	    dec         dh
 000004B0  E8 00000000 E     2	    call        Gotoxy
 000004B5  5A		     2	    pop         EDX
 000004B6  6A 00	     1	    push        0
 000004B8  E8 FFFFFDA8	     1	    call        SetColorFromPalette
 000004BD  52		     2	    push        EDX
 000004BE  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000004C3  E8 00000000 E     2	    call        WriteString
 000004C8  5A		     2	    pop         EDX

				;  loop until user inputs a code
 000004C9			_loop:
 000004C9  B8 00000032		    mov             EAX, 50
 000004CE  E8 00000000 E	    call            Delay
 000004D3  E8 00000000 E	    call            ReadKey
 000004D8  74 EF		    jz              _loop

 000004DA  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx
 000004DD  83 FA 25		cmp             EDX, 37                 ; left
 000004E0  74 66		je              _decrease



 000004E2  83 FA 27		cmp             EDX, 39                 ; right
 000004E5  74 24		je              _increase

 000004E7  83 FA 0D		cmp             EDX, 13                 ; enter
 000004EA  0F 84 00000098	je              _enter

 000004F0  83 FA 28		cmp             EDX, 40                 ; down
 000004F3  0F 84 0000008F	je              _enter

 000004F9  83 FA 26		cmp             EDX, 38                 ; up
 000004FC  0F 84 000000AC	je              _up

 00000502  83 FA 08		cmp             EDX, 8                  ; backspace
 00000505  0F 84 000000A3	je              _up

 0000050B			_increase:

 0000050B  83 C1 01		add             ECX, 1                  ; increment color map
 0000050E  83 F9 08		cmp             ECX, 8                  ; check if current index is too high
 00000511  7D 02		jge             _resetHigh
 00000513  EB 05		jmp             _getColorHigh   

 00000515			    _resetHigh: 
 00000515  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 0000051A			    _getColorHigh:
 0000051A  A1 00000489 R	    mov             EAX, currX          ; move the current x index into EAX so mPlacePeg can use AL
 0000051F  8B 1D 0000048D R	    mov             EBX, currY          ; move current y index into EBX so mPlacePeg can use BL
				    mPlacePeg       al, bl, ECX
 00000525  52		     2	    push        EDX
 00000526  8A D0	     2	    mov         dl, al
 00000528  FE CA	     2	    dec         dl
 0000052A  8A F3	     2	    mov         dh, bl
 0000052C  FE CE	     2	    dec         dh
 0000052E  E8 00000000 E     2	    call        Gotoxy
 00000533  5A		     2	    pop         EDX
 00000534  51		     1	    push        ECX
 00000535  E8 FFFFFD2B	     1	    call        SetColorFromPalette
 0000053A  52		     2	    push        EDX
 0000053B  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000540  E8 00000000 E     2	    call        WriteString
 00000545  5A		     2	    pop         EDX
				                                        ; ^ User's previous choices are displayed (currX, 19)
 00000546  EB 81		jmp             _loop                   ; Loop until a new key press

 00000548			_decrease:

 00000548  83 F9 00		cmp             ECX, 0
 0000054B  74 05		je              _resetLow
 0000054D  83 E9 01		sub             ECX, 1
 00000550  EB 05		jmp             _getColorLow
 00000552			    _resetLow:
 00000552  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 00000557			    _getColorLow:
 00000557  A1 00000489 R	    mov             EAX, currX          ; move current x index into EAX so it can be used in mPlacePeg
 0000055C  8B 1D 0000048D R	    mov             EBX, currY          ; move current y index to EBX to be used in mPlacePeg
				    mPlacePeg       al, bl, ECX
 00000562  52		     2	    push        EDX
 00000563  8A D0	     2	    mov         dl, al
 00000565  FE CA	     2	    dec         dl
 00000567  8A F3	     2	    mov         dh, bl
 00000569  FE CE	     2	    dec         dh
 0000056B  E8 00000000 E     2	    call        Gotoxy
 00000570  5A		     2	    pop         EDX
 00000571  51		     1	    push        ECX
 00000572  E8 FFFFFCEE	     1	    call        SetColorFromPalette
 00000577  52		     2	    push        EDX
 00000578  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000057D  E8 00000000 E     2	    call        WriteString
 00000582  5A		     2	    pop         EDX
				                                        ; ^ User's previous choices are displayed (currX, 19)
 00000583  E9 FFFFFF41		jmp             _loop                   ; Loop until a new key press

 00000588			_enter:
 00000588  89 0F		mov             [EDI], ECX              ; add color number into current index         
 0000058A  83 C7 04		add             EDI, 4                  ; increment current index
 0000058D  A1 0000048D R	mov             EAX, currY              ; move current y coordinate into eax
 00000592  83 C0 02		add             EAX, 2                  ; incease it by 2
 00000595  A3 0000048D R	mov             currY, EAX              ; store updated currY
 0000059A  FF 05 00000491 R	inc             currIndex               ; increment current index in userArray
 000005A0  83 3D 00000491 R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 000005A7  7D 30		jge             _end
 000005A9  E9 FFFFFEE9		jmp             _preloop                ; loop to get a new number

 000005AE			_up:
 000005AE  A1 0000048D R	    mov         EAX, currY
 000005B3  83 F8 07		    cmp         EAX, 7                  ; compare current y coord with 7. If it's 7, just go back to looping.
 000005B6  0F 84 FFFFFF0D	    je          _loop
 000005BC  83 E8 02		    sub         EAX, 2                  ; subtract 2 from currY to get to peg above currY
 000005BF  A3 0000048D R	    mov         currY, EAX
 000005C4  83 EF 04		    sub         EDI, 4                  ; move array pointer back to previous entry
 000005C7  A1 00000491 R	    mov         EAX, currIndex
 000005CC  83 E8 01		    sub         EAX, 1                  ; subtract 1 from currIndex
 000005CF  A3 00000491 R	    mov         currIndex, EAX
 000005D4  E9 FFFFFEBE		    jmp         _preloop                ; go to preloop


 000005D9			_end:                                   ; break out of loop and return
 000005D9  6A 08		push            8
 000005DB  E8 FFFFFC85		call            SetColorFromPalette     ; set color back to white

 000005E0  C7 05 0000048D R	mov             currY, 7                ; reset currY for next round
	   00000007
 000005EA  A1 00000489 R	mov             EAX, currX              ; set currX to currX + 8 to get next round x coordinate
 000005EF  83 C0 08		add             EAX, 8

 000005F2  5A			pop             EDX
 000005F3  59			pop             ECX
 000005F4  5B			pop             EBX
 000005F5  58			pop             EAX
 000005F6  5D			pop             EBP
 000005F7  C2 0004		ret 4
 000005FA			GetUserCode ENDP


				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/08/23 08:51:26
Mastermind			(AddTwo.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000495 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005FA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayAt  . . . . . . . . . . . .	P Near	 00000249 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 0000024F _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 00000316 _TEXT	Length= 000000AA Public STDCALL
  PrintuArray  . . . . . . . . .	L Near	 00000330 _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 0000035B _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 00000362 _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 0000036D _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 0000038C _TEXT	
  outOfisThisInArray . . . . . .	L Near	 00000395 _TEXT	
  outOfPrintuArray . . . . . . .	L Near	 0000039F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 000000FC _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 00000143 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 000000C6 Public STDCALL
  _clearCheckArrays  . . . . . .	L Near	 00000194 _TEXT	
  _stackFrame  . . . . . . . . .	L Near	 000001B5 _TEXT	
  _popTwo  . . . . . . . . . . .	L Near	 000001C5 _TEXT	
  _generateCode  . . . . . . . .	L Near	 000001C7 _TEXT	
  _checkCode . . . . . . . . . .	L Near	 000001E8 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 0000023A _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 00000472 _TEXT	Length= 00000188 Public STDCALL
  _init_variables  . . . . . . .	L Near	 00000479 _TEXT	
  _string  . . . . . . . . . . .	L Near	 0000048B _TEXT	
  _preloop . . . . . . . . . . .	L Near	 00000497 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 000004C9 _TEXT	
  _increase  . . . . . . . . . .	L Near	 0000050B _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 00000515 _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 0000051A _TEXT	
  _decrease  . . . . . . . . . .	L Near	 00000548 _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 00000552 _TEXT	
  _getColorLow . . . . . . . . .	L Near	 00000557 _TEXT	
  _enter . . . . . . . . . . . .	L Near	 00000588 _TEXT	
  _up  . . . . . . . . . . . . .	L Near	 000005AE _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000005D9 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedback  . . . . . . . . .	P Near	 0000029F _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000002A6 _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 000002AF _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 000002CF _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 000002E4 _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 000002F9 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 0000030E _TEXT	
PrintSolution  . . . . . . . . .	P Near	 000003C0 _TEXT	Length= 000000B2 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 00000265 _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 0000026B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000FC Public STDCALL
  setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameplay . . . . . . . . . . .	L Near	 0000000F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OUT_OF_RANGE_1 . . . . . . . . .	Number	 00000064h   
OUT_OF_RANGE_2 . . . . . . . . .	Number	 000000C8h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 00000409 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 00000491 _DATA	
currX  . . . . . . . . . . . . .	DWord	 00000489 _DATA	
currY  . . . . . . . . . . . . .	DWord	 0000048D _DATA	
current_round  . . . . . . . . .	Byte	 00000364 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_matrix  . . . . . . . . . .	DWord	 00000375 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000002FF _DATA	
helperVar1 . . . . . . . . . . .	DWord	 0000042D _DATA	
hits . . . . . . . . . . . . . .	DWord	 00000405 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 00000431 _DATA	
msgHh1 . . . . . . . . . . . . .	Byte	 00000435 _DATA	
msgHh2 . . . . . . . . . . . . .	Byte	 00000447 _DATA	
msgHh3 . . . . . . . . . . . . .	Byte	 00000454 _DATA	
msgHh4 . . . . . . . . . . . . .	Byte	 00000466 _DATA	
msgHh5 . . . . . . . . . . . . .	Byte	 0000046E _DATA	
msgSpace . . . . . . . . . . . .	Byte	 00000477 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectColor  . . . . . . . . . .	Byte	 00000318 _DATA	
solArray . . . . . . . . . . . .	DWord	 0000041D _DATA	
solution . . . . . . . . . . . .	DWord	 00000365 _DATA	
uArray . . . . . . . . . . . . .	DWord	 0000040D _DATA	
userArray  . . . . . . . . . . .	DWord	 00000479 _DATA	
user_guess . . . . . . . . . . .	DWord	 000003F5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
