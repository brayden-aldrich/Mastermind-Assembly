Index: AddTwo.asm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>TITLE Metric Converter - Assignment 3\t\t\t(AddTwo.asm)\r\n\r\n; Author(s) : Trenton Young\r\n; Course / Project ID  CS 271 / Assignment 3\tDate: 5 / 16 / 2023\r\n; Description: Tool to convert between Fahrenheit / Celsius and Miles / Kilometers\r\n\r\n\r\nINCLUDE Irvine32.inc\r\n\r\n; (insert constant definitions here)\r\nCR = 13\r\nLF = 10\r\n\r\nUSER_NAME_LEN = 24\r\n\r\nMAX_ARGS = 3; The largest number of arguments allowed per conversion(SOFT CAP : must be less than 10)\r\nCHAR_MAX_ARGS = MAX_ARGS + 48\r\n\r\nmSwap           MACRO       a, b\r\n    push        EAX\r\n    push        EBX\r\n\r\n    mov         EAX, a\r\n    mov         EBX, b\r\n\r\n    mov         b, EAX\r\n    mov         a, EBX\r\n\r\n    pop         EBX\r\n    pop         EAX\r\nENDM\r\n\r\n.data\r\n\r\n; (Conversion)\r\n\r\nMIN_F\t\t\tREAL4\t\t-459.67f ; Absolute zero in Fahrenheit (update reinstr_temp if you change this or if the laws of thermodynamics change for some reason)\r\nMIN_POS\t\t\tREAL4\t\t0.0f ; Zero for positive number validation\r\n\r\nKM_RATIO\t\tREAL4\t\t1.60934f\r\nML_RATIO\t\tREAL4\t\t29.5735f\r\nKG_RATIO\t\tREAL4\t\t0.453592f\r\n\r\nC_CONST\t\t\tREAL4\t\t32.0f\r\nC_RATIO\t\t\tREAL4\t\t0.5555555555555555555555555555f\r\n\r\n; (Localizations)\r\nec1\t\t\t\tBYTE\t\t\"**EC         : Performs four different conversions.\", CR, LF, 0\r\nec2\t\t\t\tBYTE\t\t\"**EC (Maybe?): Displays the conversions in aligned columns.\", CR, LF, 0\r\nec3\t\t\t\tBYTE\t\t\"**EC (Maybe?): Used constants to define the carriage\", CR, LF, \"**             return and line feed codes for multiline\", CR, LF, \"**             strings with a single print.\", CR, LF, 0\r\nec4\t\t\t\tBYTE\t\t\"**EC (Maybe?): Program prompts user to go again which\", CR, LF, \"**             preserves the user's name and prompts for\", CR, LF, \"**             another number of terms.\", CR, LF, 0\r\nec5\t\t\t\tBYTE\t\t\"**EC (Maybe?): Allows the user to convert up to \", CHAR_MAX_ARGS, \" values\", CR, LF, \"**             per conversion with arrays.\", CR, LF, 0\r\nec6\t\t\t\tBYTE\t\t\"**EC (Maybe?): Validates input of temperatures to conform\", CR, LF, \"**             with the laws of physics, uses absolute value\", CR, LF, \"**             of inputs for others (no negatives).\", CR, LF, CR, LF, 0\r\n\r\nheader\t\t\tBYTE\t\t\"Metric Converter\", CR, LF, \"Programmed by Trenton Young\", CR, LF, CR, LF, 0\r\n\r\nprompt_name\t\tBYTE\t\t\"- Hi, I'm Milli! What's your name? \", 0\r\n\r\ngreeting\t\tBYTE\t\tCR, LF, \"- Hello, \", 0\r\n\r\nregreet\t\t\tBYTE\t\tCR, LF, CR, LF, \"- Okay, let's convert some more values!\", CR, LF, CR, LF, 0\r\n\r\nlabel_dist\t\tBYTE\t\t\"** Conversion: Miles to Kilometers           **\", CR, LF, 0\r\nlabel_temp\t\tBYTE\t\t\"** Conversion: Degrees Fahrenheit to Celsius **\", CR, LF, 0\r\nlabel_vol\t\tBYTE\t\t\"** Conversion: Fluid Ounces to Milliliters   **\", CR, LF, 0\r\nlabel_mass\t\tBYTE\t\t\"** Conversion: Earth-pounds to Kilograms     **\", CR, LF, 0\r\n\r\ninstruct_dist \tBYTE\t\t\"- Enter a distance (in miles)                 : \", 0\r\ninstruct_temp \tBYTE\t\t\"- Enter a temperature (in degrees Fahrenheit) : \", 0\r\ninstruct_vol \tBYTE\t\t\"- Enter a volume (in fluid ounces)            : \", 0\r\ninstruct_mass \tBYTE\t\t\"- Enter a weight (in earth-pounds)            : \", 0\r\n\r\nreinstr_positv\tBYTE\t\tCR, LF, \"- Oops, that number is out of range!\", CR, LF, \"  (Give a positive number)                    : \", 0\r\nreinstr_temp\tBYTE\t\tCR, LF, \"- Oops, that number is out of range!\", CR, LF, \"  (Give a number greater than -459.67)        : \", 0\r\n\r\ntry_again\t\tBYTE\t\t\"- That was fun! Do you want to go again?\", CR, LF, \"  (Enter 1 to go again, anything else or [Enter] to quit): \", 0\r\noutro\t\t\tBYTE\t\tCR, LF, \"- Thanks so much, until next time \", 0\r\n\r\nsadface\t\t\tBYTE\t\t\"): \", 0\r\nexclaim_break\tBYTE\t\t\"!\", CR, LF, 0\r\nspace_string\tBYTE\t\t\" \", 0\r\n\r\nkm_string\t\tBYTE\t\t\" km\", 0\r\nml_string\t\tBYTE\t\t\" mL\", 0\r\nkg_string\t\tBYTE\t\t\" kg\", 0\r\nc_string\t\tBYTE\t\t\" C \", 0\r\n\t\t\t\t\t\t\t  \r\nmile_string\t\tBYTE\t\t\" mi\", 0\r\noz_string\t\tBYTE\t\t\" oz\", 0\r\nlb_string\t\tBYTE\t\t\" lb\", 0\r\nf_string\t\tBYTE\t\t\" F \", 0\r\n\r\nequal_string\tBYTE\t\t\" = \", 0\r\n\r\n; (User variables)\r\nusers_name\t\tBYTE\t\tUSER_NAME_LEN DUP(0)\r\n\r\nusers_dist_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\nusers_temp_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\nusers_vol_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\nusers_mass_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\n\r\nconvr_dist_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\nconvr_temp_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\nconvr_vol_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\nconvr_mass_arr\tREAL4\t\tMAX_ARGS DUP(?)\r\n\r\ntab_width\t\tDWORD\t\t19\r\ncolumn\t\t\tDWORD\t\t0\r\n\r\nnum_length\t\tDWORD\t\t15; All floats are 15\r\n\r\n; TODO TESTING\r\n\r\nuser_a          DWORD       42\r\nuser_b          DWORD       100\r\n\r\n; TODO TESTING\r\n\r\n\r\n.code\r\nmain PROC; (insert executable instructions here)\r\n\r\n; TODO TESTING\r\n\r\nmov             EAX, user_a\r\ncall            WriteDec\r\ncall            Crlf\r\nmov             EAX, user_b\r\ncall            WriteDec\r\n\r\ncall            Crlf\r\ncall            Crlf\r\n\r\nmSwap           user_a, user_b\r\n\r\nmov             EAX, user_a\r\ncall            WriteDec\r\ncall            Crlf\r\nmov             EAX, user_b\r\ncall            WriteDec\r\n\r\ncall            Crlf\r\ncall            Crlf\r\n\r\n; TODO TESTING\r\n\r\n\r\n; --------------------------------------------------------\r\nsetup:\r\n;\r\n; Runs functions that set the environment to expected\r\n; --------------------------------------------------------\r\nfinit\r\n\r\n; --------------------------------------------------------\r\nintroduction:\r\n;\r\n; Displays extra credit messages, assignment title, and author.\r\n; Also gets the user's name and greets them.\r\n; --------------------------------------------------------\r\n\r\nmov\t\t\tEDX, OFFSET ec1\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET ec2\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET ec3\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET ec4\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET ec5\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET ec6\r\ncall\t\tWriteString\r\n\r\nmov\t\t\tEDX, OFFSET header\r\ncall\t\tWriteString\r\n\r\nmov\t\t\tEDX, OFFSET prompt_name\r\ncall\t\tWriteString\r\n\r\nmov\t\t\tEDX, OFFSET users_name\r\nmov\t\t\tECX, USER_NAME_LEN\r\ncall\t\tReadString\r\n\r\nmov\t\t\tEDX, OFFSET greeting\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET users_name\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET exclaim_break\r\ncall\t\tWriteString\r\n\r\njmp\t\t\t_skipRegreet\r\n\r\n; --------------------------------------------------------\r\ngetUserData:\r\n;\r\n; Gets all values in imperial(standard) to convert.\r\n; --------------------------------------------------------\r\n\r\nmov\t\t\tEDX, OFFSET regreet \r\ncall\t\tWriteString\r\n_skipRegreet:\r\n\r\ncall GetUserTemps\r\n\r\n\r\n;-----------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\r\n_getDistInput:\r\n\tmov\t\t\tEDX, OFFSET\tinstruct_dist\r\n\tcall\t\tWriteString\r\n\t\r\n_skipDistInstruct:\r\n\tcall\t\tReadFloat\t\t\t\t\t; ST(0) = input\t\r\n\tfabs\t\t\t\t\t\t\t\t\t; ST(0) = absolute value of input (no negatives)\r\n\t\t\t\r\n\tfstp\t\t[users_dist_arr + ESI]\t\t; Pop the user input into the distance array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes(the size of a real4)\r\n\t\r\n\tloop\t\t_getDistInput\r\n\tjmp\t\t\t_exitDistInput\r\n\r\n\t_invalidDistInput:\r\n\t\tpush\t\tEDX\r\n\t\tmov\t\t\tEDX, OFFSET\treinstr_positv\r\n\t\tcall\t\tWriteString\r\n\t\tpop\t\t\tEDX \r\n\t\tjmp\t\t\t_skipDistInstruct\r\n_exitDistInput :\r\n\r\n\r\n;-----------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\r\n_getVolInput:\r\n\tmov\t\t\tEDX, OFFSET\tinstruct_vol\r\n\tcall\t\tWriteString\r\n\t\r\n_skipVolInstruct:\r\n\tcall\t\tReadFloat\t\t\t\t\t; ST(0) = input\t\r\n\tfabs\t\t\t\t\t\t\t\t\t; ST(0) = absolute value of input (no negatives)\r\n\t\t\t\r\n\tfstp\t\t[users_vol_arr + ESI]\t\t; Pop the user input into the volume array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes(the size of a real4)\r\n\t\r\n\tloop\t\t_getVolInput\r\n\tjmp\t\t\t_exitVolInput\r\n\r\n\t_invalidVolInput:\r\n\t\tpush\t\tEDX\r\n\t\tmov\t\t\tEDX, OFFSET\treinstr_positv\r\n\t\tcall\t\tWriteString\r\n\t\tpop\t\t\tEDX \r\n\t\tjmp\t\t\t_skipVolInstruct\r\n_exitVolInput :\r\n\r\n\r\n;-----------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\r\n_getMassInput:\r\n\tmov\t\t\tEDX, OFFSET\tinstruct_mass\r\n\tcall\t\tWriteString\r\n\t\r\n_skipMassInstruct:\r\n\tcall\t\tReadFloat\t\t\t\t\t; ST(0) = input\t\r\n\tfabs\t\t\t\t\t\t\t\t\t; ST(0) = absolute value of input (no negatives)\r\n\t\t\t\r\n\tfstp\t\t[users_mass_arr + ESI]\t\t; Pop the user input into the mass array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes(the size of a real4)\r\n\t\r\n\tloop\t\t_getMassInput\r\n\tjmp\t\t\t_exitMassInput\r\n\r\n\t_invalidMassInput:\r\n\t\tpush\t\tEDX\r\n\t\tmov\t\t\tEDX, OFFSET\treinstr_positv\r\n\t\tcall\t\tWriteString\r\n\t\tpop\t\t\tEDX \r\n\t\tjmp\t\t\t_skipMassInstruct\r\n_exitMassInput :\r\n\r\n\r\n;fld\t\t\tusers_dist_arr[0]\r\n;call\t\tWriteFloat\r\n;call\t\tCrlf\r\n;fld\t\t\tusers_dist_arr[4]\r\n;call\t\tWriteFloat\r\n;call\t\tCrlf\r\n;fld\t\t\tusers_dist_arr[8]\r\n;call\t\tWriteFloat\r\n;call\t\tCrlf\r\n\r\n; ---------------------------- -\r\n\r\n\r\n; --------------------------------------------------------\r\nconvertToKM:\r\n;\r\n; Performs the miles/kilometers conversion\r\n; --------------------------------------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\t\r\n_convertDist:\t\t\t\r\n\tfld\t\t\t[users_dist_arr + ESI]\t\t; Load the next element in the distance array\r\n\tfld\t\t\tKM_RATIO\t\t\t\t\t; Load the kilometer ratio and multiply\r\n\tfmul\r\n\r\n\tfstp\t\t[convr_dist_arr + ESI]\t\t; Pop the user input into the converted distance array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes (the size of a real4)\r\n\t\r\n\tloop\t\t_convertDist\r\n_exitConvertDist :\r\n\r\n\r\n; --------------------------------------------------------\r\nconvertToCelsius:\r\n;\r\n; Performs the fahrenheit / celsius conversion\r\n; --------------------------------------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\t\r\n_convertTemp:\t\t\t\r\n\tfld\t\t\t[users_temp_arr + ESI]\t\t; Load the next element in the temperature array\r\n\tfld\t\t\tC_CONST\t\t\t\t\t\t; Load the constant for converting celsius, subtract\r\n\tfsub\r\n\t\t\r\n\tfld\t\t\tC_RATIO\t\t\t\t\t\t; Load the kilometer ratio and multiply\r\n\tfmul\r\n\r\n\tfstp\t\t[convr_temp_arr + ESI]\t\t; Pop the user input into the converted temperature array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes (the size of a real4)\r\n\t\r\n\tloop\t\t_convertTemp\r\n_exitConvertTemp :\r\n\t\r\n\r\n; --------------------------------------------------------\r\nconvertToML:\r\n;\r\n; Performs the ounces / milliliters conversion\r\n; --------------------------------------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\t\r\n_convertVol:\t\t\t\t\r\n\tfld\t\t\t[users_vol_arr + ESI]\t\t; Load the next element in the volume array\r\n\tfld\t\t\tML_RATIO\t\t\t\t\t; Load the milliliter ratio and multiply\r\n\tfmul\r\n\r\n\tfstp\t\t[convr_vol_arr + ESI]\t\t; Pop the user input into the converted volume array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes (the size of a real4)\r\n\t\r\n\tloop\t\t_convertVol\r\n_exitConvertVol :\r\n\r\n\r\n; --------------------------------------------------------\r\nconvertToKG:\r\n;\r\n; Performs the pounds / kilograms conversion\r\n; --------------------------------------------------------\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\t\r\n_convertMass:\t\t\t\t\r\n\tfld\t\t\t[users_mass_arr + ESI]\t\t; Load the next element in the mass array\r\n\tfld\t\t\tKG_RATIO\t\t\t\t\t; Load the kilogram ratio and multiply\r\n\tfmul\r\n\r\n\tfstp\t\t[convr_mass_arr + ESI]\t\t; Pop the user input into the converted mass array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes (the size of a real4)\r\n\t\r\n\tloop\t\t_convertMass\r\n_exitConvertMass :\r\n\t\t\r\n\r\n; --------------------------------------------------------\r\ndisplayConvertedData:\r\n;\r\n; Displays converted values\r\n; label_dist\r\n; label_temp\r\n; label_vol\r\n; label_mass\r\n; --------------------------------------------------------\r\n\r\ncall\t\tCrlf\r\ncall\t\tCrlf\r\n\r\nmov\t\t\tECX, MAX_ARGS\t\t\t\t\t; Initiate loop counter to the users\r\nmov\t\t\tESI, 0\r\n\r\nmov\t\t\tEDX, OFFSET label_dist\r\ncall\t\tWriteString\r\n\r\ndisplayDistConversion:\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tusers_dist_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET mile_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET equal_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tconvr_dist_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\r\n\tmov\t\t\tEDX, OFFSET km_string\r\n\tcall\t\tWriteString \r\n\r\n\tadd\t\t\tESI, 4\r\n\tcall\t\tCrlf\r\n\r\n\tloop displayDistConversion\r\n\r\n\t\t\r\nmov\t\t\tECX, MAX_ARGS\t\t\t\t\t; Initiate loop counter to the users\r\nmov\t\t\tESI, 0\r\n\r\nmov\t\t\tEDX, OFFSET label_temp\r\ncall\t\tWriteString\r\n\r\ndisplayTempConversion:\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tusers_temp_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET f_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET equal_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tconvr_temp_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\r\n\tmov\t\t\tEDX, OFFSET c_string\r\n\tcall\t\tWriteString \r\n\r\n\tadd\t\t\tESI, 4\r\n\tcall\t\tCrlf\r\n\r\n\tloop displayTempConversion\r\n\r\n\t\t\r\n\t\t\r\nmov\t\t\tECX, MAX_ARGS\t\t\t\t\t; Initiate loop counter to the users\r\nmov\t\t\tESI, 0\r\n\r\nmov\t\t\tEDX, OFFSET label_vol\r\ncall\t\tWriteString\r\n\r\ndisplayVolConversion:\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tusers_vol_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET oz_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET equal_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tconvr_vol_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\r\n\tmov\t\t\tEDX, OFFSET ml_string\r\n\tcall\t\tWriteString \r\n\r\n\tadd\t\t\tESI, 4\r\n\tcall\t\tCrlf\r\n\r\n\tloop displayVolConversion\r\n\r\n\t\t\r\nmov\t\t\tECX, MAX_ARGS\t\t\t\t\t; Initiate loop counter to the users\r\nmov\t\t\tESI, 0\r\n\r\nmov\t\t\tEDX, OFFSET label_mass\r\ncall\t\tWriteString\r\n\r\ndisplayMassConversion:\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tusers_mass_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET lb_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tmov\t\t\tEDX, OFFSET equal_string\r\n\tcall\t\tWriteString \r\n\r\n\t\t\r\n\tcall\t\tPrettyPrintSpaces\r\n\t\r\n\tfld\t\t\tconvr_mass_arr[ESI]\r\n\tcall\t\tWriteFloat\r\n\tfstp\t\tST(0)\r\n\r\n\tmov\t\t\tEDX, OFFSET kg_string\r\n\tcall\t\tWriteString \r\n\r\n\tadd\t\t\tESI, 4\r\n\tcall\t\tCrlf\r\n\r\n\tloop displayMassConversion\r\n\r\n\r\n\r\n; --------------------------------------------------------\r\n; farewell:\r\n;\r\n; Prompts user to go again and /or displays ending message\r\n; --------------------------------------------------------\r\n\r\n; Prompt user to go again\r\ncall\t\tCrlf\r\nmov\t\t\tEDX, OFFSET try_again\r\ncall\t\tWriteString\r\n\r\ncall\t\tReadInt\r\ncmp\t\t\tEAX, 1\r\nje\t\t\tgetUserData\t\t\t\t\t\t; If the user enters 1, return to the continuing prompt\r\n\r\nmov\t\t\tEDX, OFFSET\toutro\r\ncall\t\tWriteString\t\t\t\t\t\t; Prints the string outro with two newlines if the user did not choose to repeat the program\r\nmov\t\t\tEDX, OFFSET users_name\r\ncall\t\tWriteString\r\nmov\t\t\tEDX, OFFSET exclaim_break\r\ncall\t\tWriteString\r\n\r\n\r\nexit; exit to operating system\r\nmain ENDP\r\n\r\n; (insert additional procedures here)\r\n\r\n; -------------------------------------------------------- -\r\nGetUserTemps PROC uses ECX EDX ESI\r\n;\r\n; Prompts user for the temperatures they want converted\r\n; Preconditions: Define a global DWORD array of size MAX_ARGS called users_temp_arr\r\n; Postconditions: Updates users_temp_arr array in memory\r\n; -------------------------------------------------------- -\r\n\r\n; get temperatures(first because it has different validation)\r\nmov\t\t\tECX, MAX_ARGS\t\t\t\t\t; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\r\n_getTempInput:\r\n\tmov\t\t\tEDX, OFFSET\tinstruct_temp\r\n\tcall\t\tWriteString\r\n\t\r\n_skipTempInstruct:\r\n\tfld\t\t\tMIN_F\t\t\t\t\t\t; ST(0) = MIN_F\r\n\tcall\t\tReadFloat\t\t\t\t\t; ST(0) = input, ST(1) = MIN_F\r\n\t\t\r\n\r\n\tfcomi\t\tST(0), ST(1)\t\t\t\t; Compare User input to MIN_F  for validation\r\n\tjb\t\t\t_invalidTempInput\r\n\r\n\t\r\n\tfstp\t\t[users_temp_arr + ESI]\t\t; Pop the user input into the temperature array\r\n\tfstp\t\tST(0)\t\t\t\t\t\t; Pop the comparison value (Credit to PhiS on StackOverflow : https://stackoverflow.com/a/4810464)\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes(the size of a real4)\r\n\t\r\n\tloop\t\t_getTempInput\r\n\tjmp\t\t\t_exitTempInput\r\n\r\n\t_invalidTempInput:\r\n\t\tpush\t\tEDX\r\n\t\tmov\t\t\tEDX, OFFSET\treinstr_temp\r\n\t\tcall\t\tWriteString\r\n\t\tpop\t\t\tEDX \r\n\t\tjmp\t\t\t_skipTempInstruct\r\n_exitTempInput:\r\n\r\nret\r\nGetUserTemps ENDP\r\n\r\n\r\n; -------------------------------------------------------- -\r\nGetUserInputs PROC uses ECX EDX ESI\r\n;\r\n; Prompts user for the other valeus they want converted\r\n; Preconditions: Push a valid instruction string THEN a valid input array\r\n; Postconditions: Updates users_temp_arr array in memory\r\n; -------------------------------------------------------- -\r\n\r\n\r\nmov\t\t\tECX, MAX_ARGS; Loop a number of times equal to the maximum arguments allowed\r\nmov\t\t\tESI, 0\r\n\r\n_getInput:\r\n\tmov\t\t\tEDX, OFFSET\tinstruct_vol;TODO XXXXXXXXXXXXXX\r\n\tcall\t\tWriteString\r\n\t\r\n_skipInstruct:\r\n\tcall\t\tReadFloat\t\t\t\t\t; ST(0) = input\t\r\n\tfabs\t\t\t\t\t\t\t\t\t; ST(0) = absolute value of input (no negatives)\r\n\t\t\t\r\n\tfstp\t\t[users_vol_arr + ESI]; TODO XXXXXXXXXXXXXX; Pop the user input into the volume array\r\n\r\n\tadd\t\t\tESI, 4\t\t\t\t\t\t; Increment the index by 4 bytes(the size of a real4)\r\n\t\r\n\tloop\t\t_getInput\r\n\tjmp\t\t\t_exitInput\r\n\r\n\t_invalidInput:\r\n\t\tpush\t\tEDX\r\n\t\tmov\t\t\tEDX, OFFSET\treinstr_positv\r\n\t\tcall\t\tWriteString\r\n\t\tpop\t\t\tEDX \r\n\t\tjmp\t\t\t_skipInstruct\r\n_exitInput :\r\n\r\nret\r\nGetUserInputs ENDP\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;\r\n\t\t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n; -------------------------------------------------------- -\r\nPrettyPrintSpaces PROC uses EAX ECX EDX\r\n;\r\n; Prints the leading whitespace for tabulation of a number\r\n; Preconditions: number to print is in EAX, WILL MUTATE\r\n; Postconditions: EAX will be ? , EBX will be 10, ECX will be preserved(what it was before call), EDX will be 0\r\n; -------------------------------------------------------- -\r\n\r\n\r\n; for tab_width - num_length\r\n; print SPACE\r\n; endfor\r\nmov\t\t\tEAX, tab_width\r\nsub\t\t\tEAX, num_length\r\nmov\t\t\tECX, EAX\r\n\r\nmov\t\t\tEDX, OFFSET space_string\r\nprintSpace :\r\ncall\tWriteString\r\nloop\tprintSpace\r\n\r\nret\r\nPrettyPrintSpaces ENDP\r\n\r\nEND main\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AddTwo.asm b/AddTwo.asm
--- a/AddTwo.asm	(revision e971c481d759e79818c6cf7743500b384a8370dd)
+++ b/AddTwo.asm	(date 1684858587596)
@@ -13,8 +13,8 @@
 
 USER_NAME_LEN = 24
 
-MAX_ARGS = 3; The largest number of arguments allowed per conversion(SOFT CAP : must be less than 10)
-CHAR_MAX_ARGS = MAX_ARGS + 48
+MIN = 1
+MAX = 400
 
 mSwap           MACRO       a, b
     push        EAX
@@ -34,15 +34,15 @@
 
 ; (Conversion)
 
-MIN_F			REAL4		-459.67f ; Absolute zero in Fahrenheit (update reinstr_temp if you change this or if the laws of thermodynamics change for some reason)
-MIN_POS			REAL4		0.0f ; Zero for positive number validation
-
-KM_RATIO		REAL4		1.60934f
-ML_RATIO		REAL4		29.5735f
-KG_RATIO		REAL4		0.453592f
-
-C_CONST			REAL4		32.0f
-C_RATIO			REAL4		0.5555555555555555555555555555f
+;MIN_F			REAL4		-459.67f ; Absolute zero in Fahrenheit (update reinstr_temp if you change this or if the laws of thermodynamics change for some reason)
+;MIN_POS			REAL4		0.0f ; Zero for positive number validation
+;
+;KM_RATIO		REAL4		1.60934f
+;ML_RATIO		REAL4		29.5735f
+;KG_RATIO		REAL4		0.453592f
+;
+;C_CONST			REAL4		32.0f
+;C_RATIO			REAL4		0.5555555555555555555555555555f
 
 ; (Localizations)
 ec1				BYTE		"**EC         : Performs four different conversions.", CR, LF, 0
